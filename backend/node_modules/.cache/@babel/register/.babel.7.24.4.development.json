{"{\"assumptions\":{},\"sourceRoot\":\"C:\\\\Users\\\\karlh\\\\OneDrive\\\\Dokumente\\\\Studium\\\\Projekt\\\\BachelorProject\\\\backend\\\\\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"C:\\\\Users\\\\karlh\\\\OneDrive\\\\Dokumente\\\\Studium\\\\Projekt\\\\BachelorProject\\\\backend\",\"filename\":\"C:\\\\Users\\\\karlh\\\\OneDrive\\\\Dokumente\\\\Studium\\\\Projekt\\\\BachelorProject\\\\backend\\\\app.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\karlh\\\\OneDrive\\\\Dokumente\\\\Studium\\\\Projekt\\\\BachelorProject\\\\backend\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-unicode-sets-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-class-static-block\",\"visitor\":{\"ClassBody\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-private-property-in-object\",\"visitor\":{\"BinaryExpression\":{\"enter\":[null]}},\"options\":{\"loose\":\"#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error\"},\"externalDependencies\":[]},{\"key\":\"transform-class-properties\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{\"loose\":\"#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error\"},\"externalDependencies\":[]},{\"key\":\"transform-private-methods\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{\"loose\":\"#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error\"},\"externalDependencies\":[]},{\"key\":\"transform-numeric-separator\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"BigIntLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-logical-assignment-operators\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-nullish-coalescing-operator\",\"visitor\":{\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-optional-chaining\",\"visitor\":{\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-json-strings\",\"visitor\":{\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-optional-catch-binding\",\"visitor\":{\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-async-generator-functions\",\"visitor\":{\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-object-rest-spread\",\"visitor\":{\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"DoWhileStatement\":{\"exit\":[null]},\"ForInStatement\":{\"exit\":[null]},\"ForStatement\":{\"exit\":[null]},\"WhileStatement\":{\"exit\":[null]},\"ForOfStatement\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null,null]},\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"StaticBlock\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-regenerator\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"CallExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-export-namespace-from\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"CallExpression\":{\"enter\":[null]},\"ImportExpression\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-dynamic-import\",\"visitor\":{\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-top-level-await\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-import-meta\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]}],\"presets\":[]}:7.24.4:development":{"value":{"code":"\"use strict\";\n\nvar _express = _interopRequireDefault(require(\"express\"));\nvar _cors = _interopRequireDefault(require(\"cors\"));\nvar _artist = _interopRequireDefault(require(\"./src/routes/artist\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\nrequire('dotenv').config();\nvar app = (0, _express[\"default\"])();\napp.use((0, _cors[\"default\"])({\n  origin: 'http://localhost:4200'\n}));\napp.use(_express[\"default\"].json());\napp.use(_express[\"default\"].urlencoded({\n  extended: true\n}));\napp.use('/artist/', _artist[\"default\"]);\napp.listen(process.env.PORT, function () {\n  return console.log(\"Server running on port \".concat(process.env.PORT, \" \\n Press CTRL-C to stop\\n\"));\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZXhwcmVzcyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2NvcnMiLCJfYXJ0aXN0Iiwib2JqIiwiX19lc01vZHVsZSIsImNvbmZpZyIsImFwcCIsImV4cHJlc3MiLCJ1c2UiLCJjb3JzIiwib3JpZ2luIiwianNvbiIsInVybGVuY29kZWQiLCJleHRlbmRlZCIsImFydGlzdCIsImxpc3RlbiIsInByb2Nlc3MiLCJlbnYiLCJQT1JUIiwiY29uc29sZSIsImxvZyIsImNvbmNhdCJdLCJzb3VyY2VSb290IjoiQzpcXFVzZXJzXFxrYXJsaFxcT25lRHJpdmVcXERva3VtZW50ZVxcU3R1ZGl1bVxcUHJvamVrdFxcQmFjaGVsb3JQcm9qZWN0XFxiYWNrZW5kXFwiLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZXhwcmVzcyBmcm9tICdleHByZXNzJ1xyXG5pbXBvcnQgY29ycyBmcm9tICdjb3JzJ1xyXG5pbXBvcnQgYXJ0aXN0IGZyb20gJy4vc3JjL3JvdXRlcy9hcnRpc3QnXHJcbnJlcXVpcmUoJ2RvdGVudicpLmNvbmZpZygpXHJcblxyXG5jb25zdCBhcHAgPSBleHByZXNzKClcclxuYXBwLnVzZShjb3JzKHsgb3JpZ2luOiAnaHR0cDovL2xvY2FsaG9zdDo0MjAwJyB9KSk7XHJcbmFwcC51c2UoZXhwcmVzcy5qc29uKCkpXHJcbmFwcC51c2UoZXhwcmVzcy51cmxlbmNvZGVkKHsgZXh0ZW5kZWQ6IHRydWUgfSkpXHJcbmFwcC51c2UoJy9hcnRpc3QvJywgYXJ0aXN0KVxyXG5cclxuYXBwLmxpc3Rlbihwcm9jZXNzLmVudi5QT1JULCAoKSA9PiBjb25zb2xlLmxvZyhgU2VydmVyIHJ1bm5pbmcgb24gcG9ydCAke3Byb2Nlc3MuZW52LlBPUlR9IFxcbiBQcmVzcyBDVFJMLUMgdG8gc3RvcFxcbmApKTtcclxuIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUFBLFFBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLEtBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLE9BQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUF3QyxTQUFBRCx1QkFBQUksR0FBQSxXQUFBQSxHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQSxHQUFBRCxHQUFBLGdCQUFBQSxHQUFBO0FBQ3hDSCxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUNLLE1BQU0sQ0FBQyxDQUFDO0FBRTFCLElBQU1DLEdBQUcsR0FBRyxJQUFBQyxtQkFBTyxFQUFDLENBQUM7QUFDckJELEdBQUcsQ0FBQ0UsR0FBRyxDQUFDLElBQUFDLGdCQUFJLEVBQUM7RUFBRUMsTUFBTSxFQUFFO0FBQXdCLENBQUMsQ0FBQyxDQUFDO0FBQ2xESixHQUFHLENBQUNFLEdBQUcsQ0FBQ0QsbUJBQU8sQ0FBQ0ksSUFBSSxDQUFDLENBQUMsQ0FBQztBQUN2QkwsR0FBRyxDQUFDRSxHQUFHLENBQUNELG1CQUFPLENBQUNLLFVBQVUsQ0FBQztFQUFFQyxRQUFRLEVBQUU7QUFBSyxDQUFDLENBQUMsQ0FBQztBQUMvQ1AsR0FBRyxDQUFDRSxHQUFHLENBQUMsVUFBVSxFQUFFTSxrQkFBTSxDQUFDO0FBRTNCUixHQUFHLENBQUNTLE1BQU0sQ0FBQ0MsT0FBTyxDQUFDQyxHQUFHLENBQUNDLElBQUksRUFBRTtFQUFBLE9BQU1DLE9BQU8sQ0FBQ0MsR0FBRywyQkFBQUMsTUFBQSxDQUEyQkwsT0FBTyxDQUFDQyxHQUFHLENBQUNDLElBQUksK0JBQTRCLENBQUM7QUFBQSxFQUFDIiwiaWdub3JlTGlzdCI6W119","map":{"version":3,"names":["_express","_interopRequireDefault","require","_cors","_artist","obj","__esModule","config","app","express","use","cors","origin","json","urlencoded","extended","artist","listen","process","env","PORT","console","log","concat"],"sourceRoot":"C:\\Users\\karlh\\OneDrive\\Dokumente\\Studium\\Projekt\\BachelorProject\\backend\\","sources":["app.js"],"sourcesContent":["import express from 'express'\r\nimport cors from 'cors'\r\nimport artist from './src/routes/artist'\r\nrequire('dotenv').config()\r\n\r\nconst app = express()\r\napp.use(cors({ origin: 'http://localhost:4200' }));\r\napp.use(express.json())\r\napp.use(express.urlencoded({ extended: true }))\r\napp.use('/artist/', artist)\r\n\r\napp.listen(process.env.PORT, () => console.log(`Server running on port ${process.env.PORT} \\n Press CTRL-C to stop\\n`));\r\n"],"mappings":";;AAAA,IAAAA,QAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,KAAA,GAAAF,sBAAA,CAAAC,OAAA;AACA,IAAAE,OAAA,GAAAH,sBAAA,CAAAC,OAAA;AAAwC,SAAAD,uBAAAI,GAAA,WAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA,gBAAAA,GAAA;AACxCH,OAAO,CAAC,QAAQ,CAAC,CAACK,MAAM,CAAC,CAAC;AAE1B,IAAMC,GAAG,GAAG,IAAAC,mBAAO,EAAC,CAAC;AACrBD,GAAG,CAACE,GAAG,CAAC,IAAAC,gBAAI,EAAC;EAAEC,MAAM,EAAE;AAAwB,CAAC,CAAC,CAAC;AAClDJ,GAAG,CAACE,GAAG,CAACD,mBAAO,CAACI,IAAI,CAAC,CAAC,CAAC;AACvBL,GAAG,CAACE,GAAG,CAACD,mBAAO,CAACK,UAAU,CAAC;EAAEC,QAAQ,EAAE;AAAK,CAAC,CAAC,CAAC;AAC/CP,GAAG,CAACE,GAAG,CAAC,UAAU,EAAEM,kBAAM,CAAC;AAE3BR,GAAG,CAACS,MAAM,CAACC,OAAO,CAACC,GAAG,CAACC,IAAI,EAAE;EAAA,OAAMC,OAAO,CAACC,GAAG,2BAAAC,MAAA,CAA2BL,OAAO,CAACC,GAAG,CAACC,IAAI,+BAA4B,CAAC;AAAA,EAAC","ignoreList":[]}},"mtime":1714240239310},"{\"assumptions\":{},\"sourceRoot\":\"C:\\\\Users\\\\karlh\\\\OneDrive\\\\Dokumente\\\\Studium\\\\Projekt\\\\BachelorProject\\\\backend\\\\src\\\\routes\\\\\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"C:\\\\Users\\\\karlh\\\\OneDrive\\\\Dokumente\\\\Studium\\\\Projekt\\\\BachelorProject\\\\backend\",\"filename\":\"C:\\\\Users\\\\karlh\\\\OneDrive\\\\Dokumente\\\\Studium\\\\Projekt\\\\BachelorProject\\\\backend\\\\src\\\\routes\\\\artist.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\karlh\\\\OneDrive\\\\Dokumente\\\\Studium\\\\Projekt\\\\BachelorProject\\\\backend\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-unicode-sets-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-class-static-block\",\"visitor\":{\"ClassBody\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-private-property-in-object\",\"visitor\":{\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":\"#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error\"},\"externalDependencies\":[]},{\"key\":\"transform-class-properties\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{\"loose\":\"#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error\"},\"externalDependencies\":[]},{\"key\":\"transform-private-methods\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{\"loose\":\"#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error\"},\"externalDependencies\":[]},{\"key\":\"transform-numeric-separator\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"BigIntLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-logical-assignment-operators\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-nullish-coalescing-operator\",\"visitor\":{\"LogicalExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-optional-chaining\",\"visitor\":{\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-json-strings\",\"visitor\":{\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-optional-catch-binding\",\"visitor\":{\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-async-generator-functions\",\"visitor\":{\"Program\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-object-rest-spread\",\"visitor\":{\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"DoWhileStatement\":{\"exit\":[null]},\"ForInStatement\":{\"exit\":[null]},\"ForStatement\":{\"exit\":[null]},\"WhileStatement\":{\"exit\":[null]},\"ForOfStatement\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null,null]},\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"StaticBlock\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-regenerator\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"CallExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-export-namespace-from\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"CallExpression\":{\"enter\":[null]},\"ImportExpression\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-dynamic-import\",\"visitor\":{\"Program\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-top-level-await\",\"visitor\":{\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-import-meta\",\"visitor\":{\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]}],\"presets\":[]}:7.24.4:development":{"value":{"code":"\"use strict\";\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _express = require(\"express\");\nvar _artist = _interopRequireDefault(require(\"../models/artist\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n// ROUTING\n/* app.METHOD(PATH, HANDLER)\r\nWhere:\r\n- `app` is an instance of `express`.\r\n- `METHOD` is an [HTTP request method], in lowercase.\r\n- `PATH` is a path on the server.\r\n- `HANDLER` is the function executed when the route is matched.\r\n*/\n\nvar artist = (0, _express.Router)();\nartist.get('/nationality/technique', /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(req, res) {\n    var result;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _artist[\"default\"].findAllNationalityTechnique();\n        case 3:\n          result = _context.sent;\n          res.json(result);\n          _context.next = 11;\n          break;\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          res.status(500).json({\n            message: \"Internal server error\"\n          });\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[0, 7]]);\n  }));\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}());\nartist.get('/birthcountry/technique', /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(req, res) {\n    var result;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return _artist[\"default\"].findAllBirthcountryTechnique();\n        case 3:\n          result = _context2.sent;\n          res.json(result);\n          _context2.next = 11;\n          break;\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.error(_context2.t0);\n          res.status(500).json({\n            message: \"Internal server error\"\n          });\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2, null, [[0, 7]]);\n  }));\n  return function (_x3, _x4) {\n    return _ref2.apply(this, arguments);\n  };\n}());\nartist.get('/deathcountry/technique', /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(req, res) {\n    var result;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return _artist[\"default\"].findAllDeathcountryTechnique();\n        case 3:\n          result = _context3.sent;\n          res.json(result);\n          _context3.next = 11;\n          break;\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error(_context3.t0);\n          res.status(500).json({\n            message: \"Internal server error\"\n          });\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3, null, [[0, 7]]);\n  }));\n  return function (_x5, _x6) {\n    return _ref3.apply(this, arguments);\n  };\n}());\nartist.get('/mostexhibitedincountry/technique', /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(req, res) {\n    var result;\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return _artist[\"default\"].findAllMostExhibitedInTechnique();\n        case 3:\n          result = _context4.sent;\n          res.json(result);\n          _context4.next = 11;\n          break;\n        case 7:\n          _context4.prev = 7;\n          _context4.t0 = _context4[\"catch\"](0);\n          console.error(_context4.t0);\n          res.status(500).json({\n            message: \"Internal server error\"\n          });\n        case 11:\n        case \"end\":\n          return _context4.stop();\n      }\n    }, _callee4, null, [[0, 7]]);\n  }));\n  return function (_x7, _x8) {\n    return _ref4.apply(this, arguments);\n  };\n}());\nartist.get('/technique', /*#__PURE__*/function () {\n  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(req, res) {\n    var result;\n    return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n      while (1) switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return _artist[\"default\"].findAllTechniques();\n        case 3:\n          result = _context5.sent;\n          res.json(result);\n          _context5.next = 11;\n          break;\n        case 7:\n          _context5.prev = 7;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.error(_context5.t0);\n          res.status(500).json({\n            message: \"Internal server error\"\n          });\n        case 11:\n        case \"end\":\n          return _context5.stop();\n      }\n    }, _callee5, null, [[0, 7]]);\n  }));\n  return function (_x9, _x10) {\n    return _ref5.apply(this, arguments);\n  };\n}());\nartist.get('/amount/nationality/technique', /*#__PURE__*/function () {\n  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(req, res) {\n    var minLimit, maxLimit, result;\n    return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n      while (1) switch (_context6.prev = _context6.next) {\n        case 0:\n          minLimit = req.query.minLimit;\n          maxLimit = req.query.maxLimit;\n          _context6.prev = 2;\n          _context6.next = 5;\n          return _artist[\"default\"].findAllNationalityTechniqueAmount(minLimit, maxLimit);\n        case 5:\n          result = _context6.sent;\n          res.json(result);\n          _context6.next = 13;\n          break;\n        case 9:\n          _context6.prev = 9;\n          _context6.t0 = _context6[\"catch\"](2);\n          console.error(_context6.t0);\n          res.status(500).json({\n            message: \"Internal server error\"\n          });\n        case 13:\n        case \"end\":\n          return _context6.stop();\n      }\n    }, _callee6, null, [[2, 9]]);\n  }));\n  return function (_x11, _x12) {\n    return _ref6.apply(this, arguments);\n  };\n}());\nartist.get('/amount/birthcountry/technique', /*#__PURE__*/function () {\n  var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(req, res) {\n    var minLimit, maxLimit, result;\n    return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n      while (1) switch (_context7.prev = _context7.next) {\n        case 0:\n          minLimit = req.query.minLimit;\n          maxLimit = req.query.maxLimit;\n          _context7.prev = 2;\n          _context7.next = 5;\n          return _artist[\"default\"].findAllBirthcountryTechniqueAmount(minLimit, maxLimit);\n        case 5:\n          result = _context7.sent;\n          res.json(result);\n          _context7.next = 13;\n          break;\n        case 9:\n          _context7.prev = 9;\n          _context7.t0 = _context7[\"catch\"](2);\n          console.error(_context7.t0);\n          res.status(500).json({\n            message: \"Internal server error\"\n          });\n        case 13:\n        case \"end\":\n          return _context7.stop();\n      }\n    }, _callee7, null, [[2, 9]]);\n  }));\n  return function (_x13, _x14) {\n    return _ref7.apply(this, arguments);\n  };\n}());\nartist.get('/amount/deathcountry/technique', /*#__PURE__*/function () {\n  var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(req, res) {\n    var minLimit, maxLimit, result;\n    return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n      while (1) switch (_context8.prev = _context8.next) {\n        case 0:\n          minLimit = req.query.minLimit;\n          maxLimit = req.query.maxLimit;\n          _context8.prev = 2;\n          _context8.next = 5;\n          return _artist[\"default\"].findAllDeathcountryTechniqueAmount(minLimit, maxLimit);\n        case 5:\n          result = _context8.sent;\n          res.json(result);\n          _context8.next = 13;\n          break;\n        case 9:\n          _context8.prev = 9;\n          _context8.t0 = _context8[\"catch\"](2);\n          console.error(_context8.t0);\n          res.status(500).json({\n            message: \"Internal server error\"\n          });\n        case 13:\n        case \"end\":\n          return _context8.stop();\n      }\n    }, _callee8, null, [[2, 9]]);\n  }));\n  return function (_x15, _x16) {\n    return _ref8.apply(this, arguments);\n  };\n}());\nartist.get('/amount/mostexhibitedincountry/technique', /*#__PURE__*/function () {\n  var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(req, res) {\n    var minLimit, maxLimit, result;\n    return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n      while (1) switch (_context9.prev = _context9.next) {\n        case 0:\n          minLimit = req.query.minLimit;\n          maxLimit = req.query.maxLimit;\n          _context9.prev = 2;\n          _context9.next = 5;\n          return _artist[\"default\"].findAllMostExhibitedInTechniqueAmount(minLimit, maxLimit);\n        case 5:\n          result = _context9.sent;\n          res.json(result);\n          _context9.next = 13;\n          break;\n        case 9:\n          _context9.prev = 9;\n          _context9.t0 = _context9[\"catch\"](2);\n          console.error(_context9.t0);\n          res.status(500).json({\n            message: \"Internal server error\"\n          });\n        case 13:\n        case \"end\":\n          return _context9.stop();\n      }\n    }, _callee9, null, [[2, 9]]);\n  }));\n  return function (_x17, _x18) {\n    return _ref9.apply(this, arguments);\n  };\n}());\nartist.get('/cluster/nationality', /*#__PURE__*/function () {\n  var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(req, res) {\n    var minLimit, maxLimit, k, result;\n    return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n      while (1) switch (_context10.prev = _context10.next) {\n        case 0:\n          minLimit = req.query.minLimit;\n          maxLimit = req.query.maxLimit;\n          k = parseInt(req.query.k); // Parse k parameter as integer\n          _context10.prev = 3;\n          _context10.next = 6;\n          return _artist[\"default\"].spectralClusteringNationality(minLimit, maxLimit, k);\n        case 6:\n          result = _context10.sent;\n          res.json(result);\n          _context10.next = 14;\n          break;\n        case 10:\n          _context10.prev = 10;\n          _context10.t0 = _context10[\"catch\"](3);\n          console.error(_context10.t0);\n          res.status(500).json({\n            message: \"Internal server error\"\n          });\n        case 14:\n        case \"end\":\n          return _context10.stop();\n      }\n    }, _callee10, null, [[3, 10]]);\n  }));\n  return function (_x19, _x20) {\n    return _ref10.apply(this, arguments);\n  };\n}());\nartist.get('/cluster/birthcountry', /*#__PURE__*/function () {\n  var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(req, res) {\n    var minLimit, maxLimit, k, result;\n    return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n      while (1) switch (_context11.prev = _context11.next) {\n        case 0:\n          minLimit = req.query.minLimit;\n          maxLimit = req.query.maxLimit;\n          k = parseInt(req.query.k); // Parse k parameter as integer\n          _context11.prev = 3;\n          _context11.next = 6;\n          return _artist[\"default\"].spectralClusteringBirthcountry(minLimit, maxLimit, k);\n        case 6:\n          result = _context11.sent;\n          res.json(result);\n          _context11.next = 14;\n          break;\n        case 10:\n          _context11.prev = 10;\n          _context11.t0 = _context11[\"catch\"](3);\n          console.error(_context11.t0);\n          res.status(500).json({\n            message: \"Internal server error\"\n          });\n        case 14:\n        case \"end\":\n          return _context11.stop();\n      }\n    }, _callee11, null, [[3, 10]]);\n  }));\n  return function (_x21, _x22) {\n    return _ref11.apply(this, arguments);\n  };\n}());\nartist.get('/cluster/deathcountry', /*#__PURE__*/function () {\n  var _ref12 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(req, res) {\n    var minLimit, maxLimit, k, result;\n    return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n      while (1) switch (_context12.prev = _context12.next) {\n        case 0:\n          minLimit = req.query.minLimit;\n          maxLimit = req.query.maxLimit;\n          k = parseInt(req.query.k); // Parse k parameter as integer\n          _context12.prev = 3;\n          _context12.next = 6;\n          return _artist[\"default\"].spectralClusteringDeathcountry(minLimit, maxLimit, k);\n        case 6:\n          result = _context12.sent;\n          res.json(result);\n          _context12.next = 14;\n          break;\n        case 10:\n          _context12.prev = 10;\n          _context12.t0 = _context12[\"catch\"](3);\n          console.error(_context12.t0);\n          res.status(500).json({\n            message: \"Internal server error\"\n          });\n        case 14:\n        case \"end\":\n          return _context12.stop();\n      }\n    }, _callee12, null, [[3, 10]]);\n  }));\n  return function (_x23, _x24) {\n    return _ref12.apply(this, arguments);\n  };\n}());\nartist.get('/cluster/mostexhibited', /*#__PURE__*/function () {\n  var _ref13 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(req, res) {\n    var minLimit, maxLimit, k, result;\n    return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n      while (1) switch (_context13.prev = _context13.next) {\n        case 0:\n          minLimit = req.query.minLimit;\n          maxLimit = req.query.maxLimit;\n          k = parseInt(req.query.k); // Parse k parameter as integer\n          _context13.prev = 3;\n          _context13.next = 6;\n          return _artist[\"default\"].spectralClusteringMostExhibited(minLimit, maxLimit, k);\n        case 6:\n          result = _context13.sent;\n          res.json(result);\n          _context13.next = 14;\n          break;\n        case 10:\n          _context13.prev = 10;\n          _context13.t0 = _context13[\"catch\"](3);\n          console.error(_context13.t0);\n          res.status(500).json({\n            message: \"Internal server error\"\n          });\n        case 14:\n        case \"end\":\n          return _context13.stop();\n      }\n    }, _callee13, null, [[3, 10]]);\n  }));\n  return function (_x25, _x26) {\n    return _ref13.apply(this, arguments);\n  };\n}());\nvar _default = exports[\"default\"] = artist;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":{"version":3,"names":["_express","require","_artist","_interopRequireDefault","obj","__esModule","_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","_catch","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","key","info","error","_asyncToGenerator","fn","self","args","arguments","apply","err","undefined","artist","Router","get","_ref","_callee","req","res","result","_callee$","_context","artistModel","findAllNationalityTechnique","json","t0","console","status","message","_x","_x2","_ref2","_callee2","_callee2$","_context2","findAllBirthcountryTechnique","_x3","_x4","_ref3","_callee3","_callee3$","_context3","findAllDeathcountryTechnique","_x5","_x6","_ref4","_callee4","_callee4$","_context4","findAllMostExhibitedInTechnique","_x7","_x8","_ref5","_callee5","_callee5$","_context5","findAllTechniques","_x9","_x10","_ref6","_callee6","minLimit","maxLimit","_callee6$","_context6","query","findAllNationalityTechniqueAmount","_x11","_x12","_ref7","_callee7","_callee7$","_context7","findAllBirthcountryTechniqueAmount","_x13","_x14","_ref8","_callee8","_callee8$","_context8","findAllDeathcountryTechniqueAmount","_x15","_x16","_ref9","_callee9","_callee9$","_context9","findAllMostExhibitedInTechniqueAmount","_x17","_x18","_ref10","_callee10","k","_callee10$","_context10","parseInt","spectralClusteringNationality","_x19","_x20","_ref11","_callee11","_callee11$","_context11","spectralClusteringBirthcountry","_x21","_x22","_ref12","_callee12","_callee12$","_context12","spectralClusteringDeathcountry","_x23","_x24","_ref13","_callee13","_callee13$","_context13","spectralClusteringMostExhibited","_x25","_x26","_default","exports"],"sourceRoot":"C:\\Users\\karlh\\OneDrive\\Dokumente\\Studium\\Projekt\\BachelorProject\\backend\\src\\routes\\","sources":["artist.js"],"sourcesContent":["import { Router } from 'express';\r\nimport artistModel from '../models/artist';\r\n\r\n// ROUTING\r\n/* app.METHOD(PATH, HANDLER)\r\nWhere:\r\n- `app` is an instance of `express`.\r\n- `METHOD` is an [HTTP request method], in lowercase.\r\n- `PATH` is a path on the server.\r\n- `HANDLER` is the function executed when the route is matched.\r\n*/\r\n\r\n\r\nconst artist = Router();\r\n\r\n\r\n\r\nartist.get('/nationality/technique', async (req, res) => {\r\n    try {\r\n        const result = await artistModel.findAllNationalityTechnique();\r\n        res.json(result);\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ message: \"Internal server error\" });\r\n    }\r\n});\r\nartist.get('/birthcountry/technique', async (req, res) => {\r\n    try {\r\n        const result = await artistModel.findAllBirthcountryTechnique();\r\n        res.json(result);\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ message: \"Internal server error\" });\r\n    }\r\n});\r\nartist.get('/deathcountry/technique', async (req, res) => {\r\n    try {\r\n        const result = await artistModel.findAllDeathcountryTechnique();\r\n        res.json(result);\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ message: \"Internal server error\" });\r\n    }\r\n});\r\n\r\nartist.get('/mostexhibitedincountry/technique', async (req, res) => {\r\n    try {\r\n        const result = await artistModel.findAllMostExhibitedInTechnique();\r\n        res.json(result);\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ message: \"Internal server error\" });\r\n    }\r\n});\r\n\r\nartist.get('/technique', async (req, res) => {\r\n    try {\r\n        const result = await artistModel.findAllTechniques();\r\n        res.json(result);\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ message: \"Internal server error\" });\r\n    }\r\n});\r\nartist.get('/amount/nationality/technique', async (req, res) => {\r\n    const minLimit = req.query.minLimit;\r\n    const maxLimit = req.query.maxLimit;\r\n    \r\n    try {\r\n        const result = await artistModel.findAllNationalityTechniqueAmount(minLimit,maxLimit);\r\n        res.json(result);\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ message: \"Internal server error\" });\r\n    }\r\n});\r\n\r\nartist.get('/amount/birthcountry/technique', async (req, res) => {\r\n    const minLimit = req.query.minLimit;\r\n    const maxLimit = req.query.maxLimit;\r\n    \r\n    try {\r\n        const result = await artistModel.findAllBirthcountryTechniqueAmount(minLimit,maxLimit);\r\n        res.json(result);\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ message: \"Internal server error\" });\r\n    }\r\n});\r\nartist.get('/amount/deathcountry/technique', async (req, res) => {\r\n    const minLimit = req.query.minLimit;\r\n    const maxLimit = req.query.maxLimit;\r\n    \r\n    try {\r\n        const result = await artistModel.findAllDeathcountryTechniqueAmount(minLimit,maxLimit);\r\n        res.json(result);\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ message: \"Internal server error\" });\r\n    }\r\n});\r\nartist.get('/amount/mostexhibitedincountry/technique', async (req, res) => {\r\n    const minLimit = req.query.minLimit;\r\n    const maxLimit = req.query.maxLimit;\r\n    \r\n    try {\r\n        const result = await artistModel.findAllMostExhibitedInTechniqueAmount(minLimit,maxLimit);\r\n        res.json(result);\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ message: \"Internal server error\" });\r\n    }\r\n});\r\nartist.get('/cluster/nationality', async (req, res) => {\r\n    const minLimit = req.query.minLimit;\r\n    const maxLimit = req.query.maxLimit;\r\n    const k = parseInt(req.query.k); // Parse k parameter as integer\r\n\r\n    try {\r\n        const result = await artistModel.spectralClusteringNationality(minLimit, maxLimit, k);\r\n        res.json(result);\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ message: \"Internal server error\" });\r\n    }\r\n});\r\nartist.get('/cluster/birthcountry', async (req, res) => {\r\n    const minLimit = req.query.minLimit;\r\n    const maxLimit = req.query.maxLimit;\r\n    const k = parseInt(req.query.k); // Parse k parameter as integer\r\n\r\n    try {\r\n        const result = await artistModel.spectralClusteringBirthcountry(minLimit, maxLimit, k);\r\n        res.json(result);\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ message: \"Internal server error\" });\r\n    }\r\n});\r\nartist.get('/cluster/deathcountry', async (req, res) => {\r\n    const minLimit = req.query.minLimit;\r\n    const maxLimit = req.query.maxLimit;\r\n    const k = parseInt(req.query.k); // Parse k parameter as integer\r\n\r\n    try {\r\n        const result = await artistModel.spectralClusteringDeathcountry(minLimit, maxLimit, k);\r\n        res.json(result);\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ message: \"Internal server error\" });\r\n    }\r\n});\r\nartist.get('/cluster/mostexhibited', async (req, res) => {\r\n    const minLimit = req.query.minLimit;\r\n    const maxLimit = req.query.maxLimit;\r\n    const k = parseInt(req.query.k); // Parse k parameter as integer\r\n\r\n    try {\r\n        const result = await artistModel.spectralClusteringMostExhibited(minLimit, maxLimit, k);\r\n        res.json(result);\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ message: \"Internal server error\" });\r\n    }\r\n});\r\nexport default artist;\r\n"],"mappings":"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","ignoreList":[]}},"mtime":1716223136346},"{\"assumptions\":{},\"sourceRoot\":\"C:\\\\Users\\\\karlh\\\\OneDrive\\\\Dokumente\\\\Studium\\\\Projekt\\\\BachelorProject\\\\backend\\\\src\\\\models\\\\\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"C:\\\\Users\\\\karlh\\\\OneDrive\\\\Dokumente\\\\Studium\\\\Projekt\\\\BachelorProject\\\\backend\",\"filename\":\"C:\\\\Users\\\\karlh\\\\OneDrive\\\\Dokumente\\\\Studium\\\\Projekt\\\\BachelorProject\\\\backend\\\\src\\\\models\\\\artist.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\karlh\\\\OneDrive\\\\Dokumente\\\\Studium\\\\Projekt\\\\BachelorProject\\\\backend\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-unicode-sets-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-class-static-block\",\"visitor\":{\"ClassBody\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-private-property-in-object\",\"visitor\":{\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":\"#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error\"},\"externalDependencies\":[]},{\"key\":\"transform-class-properties\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{\"loose\":\"#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error\"},\"externalDependencies\":[]},{\"key\":\"transform-private-methods\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{\"loose\":\"#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error\"},\"externalDependencies\":[]},{\"key\":\"transform-numeric-separator\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"BigIntLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-logical-assignment-operators\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-nullish-coalescing-operator\",\"visitor\":{\"LogicalExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-optional-chaining\",\"visitor\":{\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-json-strings\",\"visitor\":{\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-optional-catch-binding\",\"visitor\":{\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-async-generator-functions\",\"visitor\":{\"Program\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-object-rest-spread\",\"visitor\":{\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"DoWhileStatement\":{\"exit\":[null]},\"ForInStatement\":{\"exit\":[null]},\"ForStatement\":{\"exit\":[null]},\"WhileStatement\":{\"exit\":[null]},\"ForOfStatement\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null,null]},\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"StaticBlock\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-regenerator\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"CallExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-export-namespace-from\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"CallExpression\":{\"enter\":[null]},\"ImportExpression\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-dynamic-import\",\"visitor\":{\"Program\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-top-level-await\",\"visitor\":{\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-import-meta\",\"visitor\":{\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]}],\"presets\":[]}:7.24.4:development":{"value":{"code":"\"use strict\";\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar dbSemaphore = require('../semaphoreHandler');\nvar math = require('mathjs');\nvar latestArtists = [];\nvar latestRelationships = [];\nvar latestMinLimit = -1;\nvar latestMaxLimit = -1;\nvar latestValue = '';\nvar Artist = /*#__PURE__*/function () {\n  function Artist(data) {\n    _classCallCheck(this, Artist);\n    this.id = Number(data.id);\n    this.firstname = data.firstname;\n    this.lastname = data.lastname;\n    this.birthyear = this.calculateYear(data.birthdate.toString());\n    this.birthplace = data.birthplace;\n    this.deathyear = this.calculateYear(data.deathdate.toString());\n    this.deathplace = data.deathplace;\n    this.nationality = data.country;\n    this.sex = data.sex;\n    this.title = data.title;\n    this.techniques = data.artForms;\n    this.amount_techniques = data.amountArtForms;\n    this.distinct_techniques = data.distinctArtForms;\n    this.europeanRegionNationality = this.determineRegion(data.country);\n    this.most_exhibited_in = data.mostExhibitedInCountry;\n    this.europeanRegionMostExhibited = this.determineRegion(data.mostExhibitedInCountry);\n    this.most_exhibited_in_amount = data.mostExhibitedInCountryAmount;\n    this.total_exhibited_artworks = data.TotalExhibitedArtworks;\n    this.deathcountry = data.deathCountry;\n    this.europeanRegionDeath = this.determineRegion(data.deathCountry);\n    this.birthcountry = data.birthCountry;\n    this.europeanRegionBirth = this.determineRegion(data.birthCountry);\n    this.total_exhibitions = data.TotalExhibitions;\n    this.techniques_freq = data.artFormsFreq;\n    this.cluster = -1; // Default value\n  }\n  return _createClass(Artist, [{\n    key: \"calculateYear\",\n    value: function calculateYear(date) {\n      if (!date) return null; // Handle cases where birthdate is not provided\n      var year = parseInt(date.split('-')[0]);\n      return year;\n    }\n  }, {\n    key: \"determineRegion\",\n    value: function determineRegion(countryCode) {\n      for (var region in europeanRegions) {\n        if (europeanRegions[region].includes(countryCode)) {\n          return region;\n        }\n      }\n      return '\\\\N'; // Return null if no region matches\n    }\n  }]);\n}(); // Define European regions based on country codes\nvar europeanRegions = {\n  \"North Europe\": [\"DK\", \"EE\", \"FI\", \"IE\", \"LT\", \"LV\", \"NO\", \"SE\", \"IS\"],\n  \"Western Europe\": [\"GB\", \"FR\", \"BE\", \"NL\", \"LU\", \"CH\", \"MC\", \"DE\", \"AT\"],\n  // Added DE, AT\n  \"Southern Europe\": [\"PT\", \"ES\", \"IT\", \"GR\", \"HR\", \"BA\", \"RS\", \"ME\", \"SI\", \"MA\", \"GI\"],\n  \"Eastern Europe\": [\"RU\", \"UA\", \"BY\", \"BG\", \"RO\", \"MD\", \"AZ\", \"PL\", \"CZ\", \"SK\", \"HU\"],\n  // Added PL, CZ, SK, HU\n  \"Others\": [\"US\", \"AU\", \"GE\", \"MX\", \"AM\", \"IL\", \"CL\", \"AR\", \"CA\", \"DO\", \"PE\", \"JP\", \"TR\", \"BR\", \"ZA\", \"NZ\", \"VE\", \"GT\", \"UY\", \"SV\", \"PY\", \"IN\", \"PF\", \"KZ\", \"UZ\", \"VN\", \"NA\", \"JO\", \"IR\", \"KH\", \"JM\", \"SA\", \"DZ\", \"CN\", \"EG\", \"VI\", \"ID\", \"CU\", \"TN\", \"MQ\", \"MU\", \"LK\", \"EC\", \"SG\", \"BL\", \"TH\", \"BO\"]\n};\n\n/*   const allCountries = [\r\n    \"GB\", \"ID\", \"UA\", \"CH\", \"RU\", \"NL\", \"DE\", \"BY\", \"IT\", \"LT\", \"US\", \"HU\", \"FR\", \"AU\", \"BE\", \"CZ\", \"AT\", \"NO\", \r\n    \"GR\", \"SE\", \"PL\", \"LV\", \"FI\", \"ES\", \"MD\", \"CA\", \"BG\", \"GE\", \"DZ\", \"MX\", \"AZ\", \"RO\", \"EE\", \"DK\", \"AR\", \"UY\", \r\n    \"CU\", \"PT\", \"HR\", \"SI\", \"TN\", \"EG\", \"SK\", \"TR\", \"VI\", \"RS\", \"IE\", \"DO\", \"JP\", \"MQ\", \"IN\", \"MU\", \"ME\", \"CL\", \r\n    \"ZA\", \"NZ\", \"KH\", \"LU\", \"GI\", \"VE\", \"GT\", \"SV\", \"PY\", \"LK\", \"BA\", \"EC\", \"BR\", \"SG\", \"BL\", \"PE\", \"TH\", \"PF\", \r\n    \"AM\", \"IL\", \"MC\", \"CN\", \"UZ\", \"KZ\", \"MA\", \"BO\", \"VN\", \"NA\", \"JO\", \"IR\", \"JM\", \"SA\"\r\n  ]\r\n  // Create a set of all countries in europeanRegions\r\nconst categorizedCountries = new Set();\r\nObject.values(europeanRegions).forEach(regionCountries => {\r\n  regionCountries.forEach(country => {\r\n    categorizedCountries.add(country);\r\n  });\r\n});\r\n\r\n// Find countries in allCountries that are not in categorizedCountries\r\nconst uncategorizedCountries = allCountries.filter(country => !categorizedCountries.has(country));\r\n\r\nconsole.log(uncategorizedCountries);\r\n   */\nvar exhibited_with = /*#__PURE__*/_createClass(function exhibited_with(startData, endData, relationshipData) {\n  _classCallCheck(this, exhibited_with);\n  this.startId = Math.min(startData.id, endData.id);\n  this.endId = Math.max(startData.id, endData.id);\n  this.sharedExhibitions = relationshipData.sharedExhibitions;\n  this.sharedExhibitionMinArtworks = relationshipData.sharedExhibitionMinArtworks;\n});\nvar findAllNationalityTechnique = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n    var _require, session;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          _require = require('../db'), session = _require.session;\n          _context2.next = 3;\n          return dbSemaphore.runExclusive( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n            var result;\n            return _regeneratorRuntime().wrap(function _callee$(_context) {\n              while (1) switch (_context.prev = _context.next) {\n                case 0:\n                  console.log('Semaphore acquired by normal');\n                  _context.next = 3;\n                  return session.run( // Collect 25 distinct artists based on some criteria\n                  \"MATCH (a:Artist)\\n    WHERE a.artForms <> [] AND a.country <> '\\\\N'\\n    WITH a\\n    LIMIT 25\\n    WITH collect(a) AS selectedArtists\\n\\n    // For each artist in the selected group, find all exhibited relationships within this group\\n    UNWIND selectedArtists AS a\\n    MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\\n    WHERE b IN selectedArtists\\n    RETURN p\\n    \");\n                case 3:\n                  result = _context.sent;\n                  _context.next = 6;\n                  return processResult(result);\n                case 6:\n                  return _context.abrupt(\"return\", _context.sent);\n                case 7:\n                case \"end\":\n                  return _context.stop();\n              }\n            }, _callee);\n          })));\n        case 3:\n          return _context2.abrupt(\"return\", _context2.sent);\n        case 4:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return function findAllNationalityTechnique() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\n/* const findAllNationalityTechniqueAmount = async (minLimit, maxLimit) => {\r\n    const { session } = require('../db');\r\n    return await dbSemaphore.runExclusive(async () => {\r\n        console.log('Semaphore acquired by amount')\r\n    const result = await session.run(\r\n   // Collect artists where total\r\n    `MATCH (a:Artist)\r\n    WHERE a.artForms <> [] AND a.country <> '\\\\N' AND a.TotalExhibitedArtworks >= $minLimit AND a.TotalExhibitedArtworks <= $maxLimit\r\n    WITH a\r\n    WITH collect(a) AS selectedArtists\r\n\r\n    // For each artist in the selected group, find all exhibited relationships within this group\r\n    UNWIND selectedArtists AS a\r\n    MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\r\n    WHERE b IN selectedArtists\r\n    RETURN p\r\n    `\r\n    ,{ minLimit: parseInt(minLimit), maxLimit: parseInt(maxLimit) } );// Ensure these are correctly passed as integers);\r\n    \r\n\r\n    return await processResult(result);\r\n});\r\n}; */\n\nvar findAllBirthcountryTechnique = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n    var _require2, session;\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) switch (_context4.prev = _context4.next) {\n        case 0:\n          _require2 = require('../db'), session = _require2.session;\n          _context4.next = 3;\n          return dbSemaphore.runExclusive( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n            var result;\n            return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n              while (1) switch (_context3.prev = _context3.next) {\n                case 0:\n                  _context3.next = 2;\n                  return session.run( // Collect 25 distinct artists based on some criteria\n                  \"MATCH (a:Artist)\\n    WHERE a.artForms <> [] AND a.birthCountry <> '\\\\N'\\n    WITH a\\n    LIMIT 25\\n    WITH collect(a) AS selectedArtists\\n\\n    // For each artist in the selected group, find all exhibited relationships within this group\\n    UNWIND selectedArtists AS a\\n    MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\\n    WHERE b IN selectedArtists\\n    RETURN p\\n    \");\n                case 2:\n                  result = _context3.sent;\n                  _context3.next = 5;\n                  return processResult(result);\n                case 5:\n                  return _context3.abrupt(\"return\", _context3.sent);\n                case 6:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }, _callee3);\n          })));\n        case 3:\n          return _context4.abrupt(\"return\", _context4.sent);\n        case 4:\n        case \"end\":\n          return _context4.stop();\n      }\n    }, _callee4);\n  }));\n  return function findAllBirthcountryTechnique() {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\n/* const findAllBirthcountryTechniqueAmount = async (minLimit,maxLimit) => {\r\n    const { session } = require('../db');\r\n    return await dbSemaphore.runExclusive(async () => {\r\n    const result = await session.run(\r\n   // Collect 25 distinct artists based on some criteria\r\n    `MATCH (a:Artist) \r\n    WHERE a.artForms <> [] AND a.birthCountry <> '\\\\N' AND a.TotalExhibitedArtworks >= $minLimit AND a.TotalExhibitedArtworks <= $maxLimit\r\n    WITH a\r\n    WITH collect(a) AS selectedArtists\r\n\r\n    // For each artist in the selected group, find all exhibited relationships within this group\r\n    UNWIND selectedArtists AS a\r\n    MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\r\n    WHERE b IN selectedArtists\r\n    RETURN p\r\n    `\r\n    ,{ minLimit: parseInt(minLimit), maxLimit: parseInt(maxLimit) } );// Ensure these are correctly passed as integers);\r\n    \r\n\r\n    return await processResult(result);\r\n});\r\n}; */\n\nvar findAllDeathcountryTechnique = /*#__PURE__*/function () {\n  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n    var _require3, session;\n    return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n      while (1) switch (_context6.prev = _context6.next) {\n        case 0:\n          _require3 = require('../db'), session = _require3.session;\n          _context6.next = 3;\n          return dbSemaphore.runExclusive( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n            var result;\n            return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n              while (1) switch (_context5.prev = _context5.next) {\n                case 0:\n                  _context5.next = 2;\n                  return session.run( // Collect 25 distinct artists based on some criteria\n                  \"MATCH (a:Artist)\\n    WHERE a.artForms <> [] AND a.deathCountry <> '\\\\N'\\n    WITH a\\n    LIMIT 25\\n    WITH collect(a) AS selectedArtists\\n\\n    // For each artist in the selected group, find all exhibited relationships within this group\\n    UNWIND selectedArtists AS a\\n    MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\\n    WHERE b IN selectedArtists\\n    RETURN p\\n    \");\n                case 2:\n                  result = _context5.sent;\n                  _context5.next = 5;\n                  return processResult(result);\n                case 5:\n                  return _context5.abrupt(\"return\", _context5.sent);\n                case 6:\n                case \"end\":\n                  return _context5.stop();\n              }\n            }, _callee5);\n          })));\n        case 3:\n          return _context6.abrupt(\"return\", _context6.sent);\n        case 4:\n        case \"end\":\n          return _context6.stop();\n      }\n    }, _callee6);\n  }));\n  return function findAllDeathcountryTechnique() {\n    return _ref5.apply(this, arguments);\n  };\n}();\n/* \r\nconst findAllDeathcountryTechniqueAmount = async (minLimit,maxLimit) => {\r\n    const { session } = require('../db');\r\n    return await dbSemaphore.runExclusive(async () => {\r\n    const result = await session.run(\r\n   // Collect 25 distinct artists based on some criteria\r\n    `MATCH (a:Artist)\r\n    WHERE a.artForms <> [] AND a.deathCountry <> '\\\\N'  AND a.TotalExhibitedArtworks >= $minLimit AND a.TotalExhibitedArtworks <= $maxLimit\r\n    WITH a\r\n    WITH collect(a) AS selectedArtists\r\n\r\n    // For each artist in the selected group, find all exhibited relationships within this group\r\n    UNWIND selectedArtists AS a\r\n    MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\r\n    WHERE b IN selectedArtists\r\n    RETURN p\r\n    `\r\n    ,{ minLimit: parseInt(minLimit), maxLimit: parseInt(maxLimit) } );// Ensure these are correctly passed as integers);\r\n    \r\n\r\n    return await processResult(result);\r\n\r\n});\r\n}; */\n\nvar findAllMostExhibitedInTechnique = /*#__PURE__*/function () {\n  var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n    var _require4, session;\n    return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n      while (1) switch (_context8.prev = _context8.next) {\n        case 0:\n          _require4 = require('../db'), session = _require4.session;\n          _context8.next = 3;\n          return dbSemaphore.runExclusive( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n            var result;\n            return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n              while (1) switch (_context7.prev = _context7.next) {\n                case 0:\n                  _context7.next = 2;\n                  return session.run( // Collect 25 distinct artists based on some criteria\n                  \"MATCH (a:Artist)\\n    WHERE a.artForms <> [] AND a.mostExhibitedInCountry <> '\\\\N' AND a.unclearMostExhibitedInCountry = FALSE \\n    WITH a\\n    LIMIT 25\\n    WITH collect(a) AS selectedArtists\\n\\n    // For each artist in the selected group, find all exhibited relationships within this group\\n    UNWIND selectedArtists AS a\\n    MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\\n    WHERE b IN selectedArtists\\n    RETURN p\\n    \");\n                case 2:\n                  result = _context7.sent;\n                  _context7.next = 5;\n                  return processResult(result);\n                case 5:\n                  return _context7.abrupt(\"return\", _context7.sent);\n                case 6:\n                case \"end\":\n                  return _context7.stop();\n              }\n            }, _callee7);\n          })));\n        case 3:\n          return _context8.abrupt(\"return\", _context8.sent);\n        case 4:\n        case \"end\":\n          return _context8.stop();\n      }\n    }, _callee8);\n  }));\n  return function findAllMostExhibitedInTechnique() {\n    return _ref7.apply(this, arguments);\n  };\n}();\n\n/* const findAllMostExhibitedInTechniqueAmount = async (minLimit,maxLimit) => {\r\n    const { session } = require('../db');\r\n    return await dbSemaphore.runExclusive(async () => {\r\n    const result = await session.run(\r\n   // Collect 25 distinct artists based on some criteria\r\n    `MATCH (a:Artist)\r\n    WHERE a.artForms <> [] AND a.mostExhibitedInCountry <> '\\\\N' AND a.unclearMostExhibitedInCountry = FALSE  AND a.TotalExhibitedArtworks >= $minLimit AND a.TotalExhibitedArtworks <= $maxLimit\r\n    WITH a\r\n    WITH collect(a) AS selectedArtists\r\n\r\n    // For each artist in the selected group, find all exhibited relationships within this group\r\n    UNWIND selectedArtists AS a\r\n    MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\r\n    WHERE b IN selectedArtists\r\n    RETURN p\r\n    `\r\n    ,{ minLimit: parseInt(minLimit), maxLimit: parseInt(maxLimit) } );// Ensure these are correctly passed as integers);\r\n    \r\n\r\n    return await processResult(result);\r\n\r\n});\r\n}; */\n\nvar findAllTechniques = /*#__PURE__*/function () {\n  var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n    var _require5, session;\n    return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n      while (1) switch (_context10.prev = _context10.next) {\n        case 0:\n          _require5 = require('../db'), session = _require5.session;\n          _context10.next = 3;\n          return dbSemaphore.runExclusive( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n            var result;\n            return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n              while (1) switch (_context9.prev = _context9.next) {\n                case 0:\n                  _context9.next = 2;\n                  return session.run( // Collect 25 distinct artists based on some criteria\n                  \"MATCH (a:Artist)\\n    WHERE a.artForms <> [] AND a.artFormsFreq <> '{}'\\n    WITH a\\n    LIMIT 25\\n    WITH collect(a) AS selectedArtists\\n\\n    // For each artist in the selected group, find all exhibited relationships within this group\\n    UNWIND selectedArtists AS a\\n    MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\\n    WHERE b IN selectedArtists\\n    RETURN p\\n    \");\n                case 2:\n                  result = _context9.sent;\n                  _context9.next = 5;\n                  return processResult(result);\n                case 5:\n                  return _context9.abrupt(\"return\", _context9.sent);\n                case 6:\n                case \"end\":\n                  return _context9.stop();\n              }\n            }, _callee9);\n          })));\n        case 3:\n          return _context10.abrupt(\"return\", _context10.sent);\n        case 4:\n        case \"end\":\n          return _context10.stop();\n      }\n    }, _callee10);\n  }));\n  return function findAllTechniques() {\n    return _ref9.apply(this, arguments);\n  };\n}();\n\n// Assuming 'artists' is an array of artist nodes and 'relationships' is an array of edges with weights\nvar normalizeLogarithmically = function normalizeLogarithmically(values) {\n  var logMaxValue = Math.log1p(Math.max.apply(Math, _toConsumableArray(values.values())));\n  var logMinValue = Math.log1p(Math.min.apply(Math, _toConsumableArray(values.values())));\n  var range = logMaxValue - logMinValue;\n  var normalized = new Map();\n  values.forEach(function (value, id) {\n    normalized.set(id, (Math.log1p(value) - logMinValue) / range); // Normalize by dividing by the max degree\n  });\n  return normalized;\n};\nfunction spectralClustering(_x, _x2, _x3) {\n  return _spectralClustering.apply(this, arguments);\n}\nfunction _spectralClustering() {\n  _spectralClustering = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17(artists, relationships, k) {\n    var sharedExhibitionValues, normalizedSharedExhibitionValues, size, adjacencyMatrix, degreeMatrix, laplacianMatrix, eigensystem, firstThreeEigenvectors, featureMatrixU, i, vector, featureMatrixUTransposed, clusters, clusterArray, clusterAssignments, clusteredArtists, clusterMap, intraClusterRelationships, singleInterClusterRelationships, interClusterRelationshipsMap, interClusterRelationships;\n    return _regeneratorRuntime().wrap(function _callee17$(_context17) {\n      while (1) switch (_context17.prev = _context17.next) {\n        case 0:\n          console.log('cluster');\n          // Step 0: Extract sharedExhibitionMinArtworks values for normalization\n          sharedExhibitionValues = new Map();\n          relationships.forEach(function (relationship) {\n            var id = relationship.startId;\n            var value = relationship.sharedExhibitionMinArtworks;\n            sharedExhibitionValues.set(id, value);\n          });\n\n          // Step 0.1: Normalize sharedExhibitionMinArtworks values\n          normalizedSharedExhibitionValues = normalizeLogarithmically(sharedExhibitionValues); // Step 1: Construct the adjacency matrix\n          size = artists.length;\n          adjacencyMatrix = math.zeros(size, size);\n          relationships.forEach(function (relationship) {\n            var i = artists.findIndex(function (artist) {\n              return artist.id === relationship.startId;\n            });\n            var j = artists.findIndex(function (artist) {\n              return artist.id === relationship.endId;\n            });\n            var weight = normalizedSharedExhibitionValues.get(relationship.startId);\n            adjacencyMatrix.set([i, j], Number(weight));\n            adjacencyMatrix.set([j, i], Number(weight)); // since it's an undirected graph\n          });\n\n          // Step 2: Construct the degree matrix\n          degreeMatrix = adjacencyMatrix.map(function (value, index, matrix) {\n            return index[0] === index[1] ? Number(math.sum(matrix._data[index[0]])) : 0;\n          }); // Step 3: Construct the Laplacian matrix\n          laplacianMatrix = math.subtract(degreeMatrix, adjacencyMatrix); // Step 4: Compute the eigenvalues and eigenvectors\n          eigensystem = math.eigs(laplacianMatrix); // Check if the eigenvalues and eigenvectors are defined and not empty\n          if (!(!eigensystem || eigensystem.values.length === 0)) {\n            _context17.next = 12;\n            break;\n          }\n          throw new Error(\"Eigenvectors are undefined or missing data.\");\n        case 12:\n          // Extract the first three eigenvectors\n          firstThreeEigenvectors = eigensystem.eigenvectors.slice(0, k); // Initialize the feature matrix\n          featureMatrixU = []; // Loop over the eigenvectors\n          for (i = 0; i < firstThreeEigenvectors.length; i++) {\n            vector = firstThreeEigenvectors[i].vector.toArray(); // Convert DenseMatrix to array\n            featureMatrixU.push(vector); // Push the vector as a column in the feature matrix\n          }\n\n          // Transpose the feature matrix to have columns as data points\n          featureMatrixUTransposed = math.transpose(featureMatrixU); // Perform initial kMeans Clustering\n          clusters = kMeansClustering(featureMatrixUTransposed, k, 1); // Assume minClusterSize = 1 for basic example\n          // Redistribute clusters here\n          clusters = redistributeClusters(featureMatrixUTransposed, clusters, k, 5, 15); // Example sizes\n\n          // Assuming kMeansClustering and other related functions are d\n\n          // Associate artists with their clusters\n          clusterArray = artists.map(function (artist, index) {\n            return _objectSpread(_objectSpread({}, artist), {}, {\n              cluster: clusters[index]\n            });\n          }); // Associate artists with their clusters\n          clusterAssignments = artists.map(function (artist, index) {\n            artist.cluster = clusters[index]; // Assign the cluster to the artist\n          }); // Initialize an array of k empty arrays for the clusters\n          clusteredArtists = Array.from({\n            length: k\n          }, function () {\n            return [];\n          }); // Populate the cluster arrays with artists\n          artists.forEach(function (artist, index) {\n            var clusterIndex = clusters[index]; // Retrieve the cluster index assigned to the artist\n            clusteredArtists[clusterIndex].push(artist); // Add the artist to the corresponding cluster\n          });\n          clusterMap = new Map();\n          artists.forEach(function (artist, index) {\n            clusterMap.set(artist.id, clusters[index]); // Correctly associate artist ID with cluster index\n          });\n          intraClusterRelationships = Array.from({\n            length: k\n          }, function () {\n            return [];\n          });\n          singleInterClusterRelationships = Array.from({\n            length: k\n          }, function () {\n            return [];\n          });\n          interClusterRelationshipsMap = new Map();\n          relationships.forEach(function (relationship) {\n            var clusterA = clusterMap.get(relationship.startId);\n            var clusterB = clusterMap.get(relationship.endId);\n            if (clusterA === clusterB) {\n              intraClusterRelationships[clusterA].push(relationship);\n            } else {\n              singleInterClusterRelationships[clusterA].push(relationship);\n              singleInterClusterRelationships[clusterB].push(relationship);\n              var key = \"\".concat(Math.min(clusterA, clusterB), \"-\").concat(Math.max(clusterA, clusterB));\n              if (!interClusterRelationshipsMap.has(key)) {\n                interClusterRelationshipsMap.set(key, {\n                  startId: Math.min(clusterA, clusterB),\n                  endId: Math.max(clusterA, clusterB),\n                  sharedExhibitions: 0,\n                  sharedExhibitionMinArtworks: 0\n                });\n              }\n              var aggregatedRelationship = interClusterRelationshipsMap.get(key);\n              aggregatedRelationship.sharedExhibitions += relationship.sharedExhibitions;\n              aggregatedRelationship.sharedExhibitionMinArtworks += relationship.sharedExhibitionMinArtworks;\n            }\n          });\n          interClusterRelationships = Array.from(interClusterRelationshipsMap.values()).map(function (rel) {\n            return new exhibited_with({\n              id: rel.startId\n            }, {\n              id: rel.endId\n            }, {\n              sharedExhibitions: rel.sharedExhibitions,\n              sharedExhibitionMinArtworks: rel.sharedExhibitionMinArtworks\n            });\n          });\n          console.log('cluster finished');\n          return _context17.abrupt(\"return\", [clusteredArtists, intraClusterRelationships, interClusterRelationships,\n          // You might want to further organize this by cluster pairs if needed\n          singleInterClusterRelationships]);\n        case 31:\n        case \"end\":\n          return _context17.stop();\n      }\n    }, _callee17);\n  }));\n  return _spectralClustering.apply(this, arguments);\n}\nfunction redistributeClusters(data, clusters, k, minClusterSize, maxClusterSize) {\n  var centroids = calculateCentroids(data, clusters, k);\n  var clusterSizes = new Array(k).fill(0);\n  clusters.forEach(function (cluster) {\n    return clusterSizes[cluster]++;\n  });\n  var needsHelp = clusterSizes.map(function (size, index) {\n    return {\n      index: index,\n      size: size,\n      type: size < minClusterSize ? 'undersized' : size > maxClusterSize ? 'oversized' : 'ok'\n    };\n  }).filter(function (stat) {\n    return stat.type !== 'ok';\n  });\n  needsHelp.forEach(function (need) {\n    if (need.type === 'oversized') {\n      data.forEach(function (point, idx) {\n        if (clusters[idx] === need.index) {\n          var currentClusterIndex = need.index;\n          var closest = {\n            index: -1,\n            distance: Infinity\n          };\n          centroids.forEach(function (centroid, index) {\n            if (index !== currentClusterIndex && clusterSizes[index] < maxClusterSize) {\n              var distance = euclideanDistance(point, centroid);\n              if (distance < closest.distance) {\n                closest = {\n                  index: index,\n                  distance: distance\n                };\n              }\n            }\n          });\n          if (closest.index !== -1) {\n            clusters[idx] = closest.index;\n            clusterSizes[currentClusterIndex]--;\n            clusterSizes[closest.index]++;\n          }\n        }\n      });\n    }\n  });\n  return clusters;\n}\nfunction calculateCentroids(data, clusters, k) {\n  var centroids = Array(k).fill(null).map(function () {\n    return [];\n  });\n  data.forEach(function (point, index) {\n    centroids[clusters[index]].push(point);\n  });\n  return centroids.map(function (cluster) {\n    return cluster.reduce(function (mean, point) {\n      return mean.map(function (m, idx) {\n        return m + point[idx] / cluster.length;\n      });\n    }, new Array(data[0].length).fill(0));\n  });\n}\nfunction kMeansClustering(data, k, minClusterSize) {\n  var maxIterations = 500;\n  var bestCentroids = [];\n  var bestClusterAssignments = [];\n  var minTotalDistance = Infinity;\n  for (var initialization = 0; initialization < 10; initialization++) {\n    // Try multiple random initializations\n    var centroids = initializeCentroids(data, k);\n    var clusterAssignments = [];\n    for (var iteration = 0; iteration < maxIterations; iteration++) {\n      var newClusterAssignments = assignPointsToCentroids(data, centroids);\n      var newCentroids = updateCentroids(data, newClusterAssignments, k);\n      if (centroidsEqual(newCentroids, centroids)) {\n        clusterAssignments = newClusterAssignments;\n        break;\n      }\n      centroids = newCentroids;\n    }\n    var totalDistance = calculateTotalDistance(data, centroids, clusterAssignments);\n    if (totalDistance < minTotalDistance) {\n      bestCentroids = centroids;\n      bestClusterAssignments = clusterAssignments;\n      minTotalDistance = totalDistance;\n    }\n  }\n\n  // Ensure each cluster meets the minimum size requirement\n  var clusterSizes = new Array(k).fill(0);\n  bestClusterAssignments.forEach(function (clusterIndex) {\n    clusterSizes[clusterIndex]++;\n  });\n\n  // Reassign points until each cluster has at least minClusterSize points\n  var _loop = function _loop(i) {\n    var _loop2 = function _loop2() {\n      // Find the point farthest from its centroid in cluster i\n      var farthestPointIndex = -1;\n      var maxDistance = -1;\n      data.forEach(function (point, index) {\n        if (bestClusterAssignments[index] === i) {\n          var distance = euclideanDistance(point, bestCentroids[i]);\n          if (distance > maxDistance) {\n            maxDistance = distance;\n            farthestPointIndex = index;\n          }\n        }\n      });\n\n      // Reassign the farthest point to the nearest cluster\n      var minDistance = Infinity;\n      var nearestClusterIndex = -1;\n      for (var j = 0; j < k; j++) {\n        if (j !== i) {\n          var distance = euclideanDistance(data[farthestPointIndex], bestCentroids[j]);\n          if (distance < minDistance) {\n            minDistance = distance;\n            nearestClusterIndex = j;\n          }\n        }\n      }\n\n      // Reassign the point to the nearest cluster\n      bestClusterAssignments[farthestPointIndex] = nearestClusterIndex;\n      clusterSizes[i]--;\n      clusterSizes[nearestClusterIndex]++;\n    };\n    while (clusterSizes[i] < minClusterSize) {\n      _loop2();\n    }\n  };\n  for (var i = 0; i < k; i++) {\n    _loop(i);\n  }\n  return bestClusterAssignments;\n}\nfunction initializeCentroids(data, k) {\n  var centroids = [data[Math.floor(Math.random() * data.length)]]; // Start with one random centroid\n  var _loop3 = function _loop3() {\n    var distances = data.map(function (point) {\n      return Math.min.apply(Math, _toConsumableArray(centroids.map(function (centroid) {\n        return euclideanDistance(point, centroid);\n      })));\n    });\n    var totalDistance = distances.reduce(function (a, b) {\n      return a + b;\n    }, 0);\n    var probabilities = distances.map(function (distance) {\n      return distance / totalDistance;\n    });\n    var cumulativeProbabilities = probabilities.reduce(function (acc, prob, index) {\n      if (index === 0) acc.push(prob);else acc.push(acc[index - 1] + prob);\n      return acc;\n    }, []);\n    var rand = Math.random();\n    var nextCentroidIndex = cumulativeProbabilities.findIndex(function (cumProb) {\n      return cumProb >= rand;\n    });\n    centroids.push(data[nextCentroidIndex]);\n  };\n  for (var i = 1; i < k; i++) {\n    _loop3();\n  }\n  return centroids;\n}\nfunction assignPointsToCentroids(data, centroids) {\n  var clusterAssignments = [];\n  var _iterator = _createForOfIteratorHelper(data),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var point = _step.value;\n      var minDistance = Infinity;\n      var closestCentroidIndex = -1;\n      for (var i = 0; i < centroids.length; i++) {\n        var distance = euclideanDistance(point, centroids[i]);\n        if (distance < minDistance) {\n          minDistance = distance;\n          closestCentroidIndex = i;\n        }\n      }\n      clusterAssignments.push(closestCentroidIndex);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return clusterAssignments;\n}\nfunction updateCentroids(data, clusterAssignments, k) {\n  var newCentroids = new Array(k).fill(0).map(function () {\n    return new Array(data[0].length).fill(0);\n  });\n  var clusterCounts = new Array(k).fill(0);\n  for (var i = 0; i < data.length; i++) {\n    var clusterIndex = clusterAssignments[i];\n    for (var j = 0; j < data[i].length; j++) {\n      newCentroids[clusterIndex][j] += data[i][j];\n    }\n    clusterCounts[clusterIndex]++;\n  }\n  for (var _i = 0; _i < k; _i++) {\n    if (clusterCounts[_i] !== 0) {\n      for (var _j = 0; _j < newCentroids[_i].length; _j++) {\n        newCentroids[_i][_j] /= clusterCounts[_i];\n      }\n    } else {\n      // If no points were assigned to this cluster, keep the centroid unchanged\n    }\n  }\n  return newCentroids;\n}\nfunction centroidsEqual(centroids1, centroids2) {\n  for (var i = 0; i < centroids1.length; i++) {\n    for (var j = 0; j < centroids1[i].length; j++) {\n      if (centroids1[i][j] !== centroids2[i][j]) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\nfunction euclideanDistance(point1, point2) {\n  var sum = 0;\n  for (var i = 0; i < point1.length; i++) {\n    sum += Math.pow(point1[i] - point2[i], 2);\n  }\n  return Math.sqrt(sum);\n}\nfunction calculateTotalDistance(data, centroids, clusterAssignments) {\n  var totalDistance = 0;\n  for (var i = 0; i < data.length; i++) {\n    totalDistance += euclideanDistance(data[i], centroids[clusterAssignments[i]]);\n  }\n  return totalDistance;\n}\nvar processResult = function processResult(result) {\n  var artistsId = new Set();\n  var relationships = [];\n  var artists = [];\n  result.records.forEach(function (record) {\n    var relationship = record.get('p');\n    var startData = relationship.start.properties;\n    var endData = relationship.end.properties;\n    var relationshipData = relationship.segments[0].relationship.properties;\n    var relation = new exhibited_with(startData, endData, relationshipData);\n    relationships.push(relation);\n\n    // Check if the artist with the same ID hasn't been created yet\n    var artistId = startData.id;\n    if (!artistsId.has(artistId)) {\n      var artist = new Artist(startData);\n      artistsId.add(artistId);\n      artists.push(artist);\n      // Store the artist object as needed\n    }\n    var otherArtistId = endData.id;\n    if (!artistsId.has(otherArtistId)) {\n      var otherArtist = new Artist(endData);\n      artistsId.add(otherArtistId);\n      artists.push(otherArtist);\n    }\n  });\n  return [artists, relationships];\n};\nfunction removeEmptyClusters(clusteredArtists) {\n  // Remove empty clusters and reassign IDs\n  var nonEmptyClusters = clusteredArtists.filter(function (cluster) {\n    return cluster.length > 0;\n  });\n  var newClusterMap = new Map();\n  nonEmptyClusters.forEach(function (cluster, newIndex) {\n    cluster.forEach(function (artist) {\n      newClusterMap.set(artist.id, newIndex);\n    });\n  });\n  var newClusteredArtists = Array.from({\n    length: nonEmptyClusters.length\n  }, function () {\n    return [];\n  });\n  clusteredArtists.forEach(function (cluster) {\n    cluster.forEach(function (artist) {\n      var newClusterId = newClusterMap.get(artist.id);\n      newClusteredArtists[newClusterId].push(artist);\n      artist.cluster = newClusterId; // Update the artist's cluster ID\n    });\n  });\n  return newClusteredArtists;\n}\nvar findAllNationalityTechniqueAmount = /*#__PURE__*/function () {\n  var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(minLimit, maxLimit) {\n    var query;\n    return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n      while (1) switch (_context11.prev = _context11.next) {\n        case 0:\n          query = \"\\n        MATCH (a:Artist)\\n        WHERE a.artForms <> [] AND a.country <> '\\\\N' AND a.TotalExhibitedArtworks >= $minLimit AND a.TotalExhibitedArtworks <= $maxLimit\\n        WITH a\\n        WITH collect(a) AS selectedArtists\\n\\n        UNWIND selectedArtists AS a\\n        MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\\n        WHERE b IN selectedArtists\\n        RETURN p\\n    \";\n          return _context11.abrupt(\"return\", streamQuery(query, {\n            minLimit: parseInt(minLimit),\n            maxLimit: parseInt(maxLimit)\n          }));\n        case 2:\n        case \"end\":\n          return _context11.stop();\n      }\n    }, _callee11);\n  }));\n  return function findAllNationalityTechniqueAmount(_x4, _x5) {\n    return _ref11.apply(this, arguments);\n  };\n}();\nvar findAllBirthcountryTechniqueAmount = /*#__PURE__*/function () {\n  var _ref12 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(minLimit, maxLimit) {\n    var query;\n    return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n      while (1) switch (_context12.prev = _context12.next) {\n        case 0:\n          query = \"\\n        MATCH (a:Artist)\\n        WHERE a.artForms <> [] AND a.birthCountry <> '\\\\N' AND a.TotalExhibitedArtworks >= $minLimit AND a.TotalExhibitedArtworks <= $maxLimit\\n        WITH a\\n        WITH collect(a) AS selectedArtists\\n\\n        UNWIND selectedArtists AS a\\n        MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\\n        WHERE b IN selectedArtists\\n        RETURN p\\n    \";\n          return _context12.abrupt(\"return\", streamQuery(query, {\n            minLimit: parseInt(minLimit),\n            maxLimit: parseInt(maxLimit)\n          }));\n        case 2:\n        case \"end\":\n          return _context12.stop();\n      }\n    }, _callee12);\n  }));\n  return function findAllBirthcountryTechniqueAmount(_x6, _x7) {\n    return _ref12.apply(this, arguments);\n  };\n}();\nvar findAllDeathcountryTechniqueAmount = /*#__PURE__*/function () {\n  var _ref13 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(minLimit, maxLimit) {\n    var query;\n    return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n      while (1) switch (_context13.prev = _context13.next) {\n        case 0:\n          query = \"\\n        MATCH (a:Artist)\\n        WHERE a.artForms <> [] AND a.deathCountry <> '\\\\N' AND a.TotalExhibitedArtworks >= $minLimit AND a.TotalExhibitedArtworks <= $maxLimit\\n        WITH a\\n        WITH collect(a) AS selectedArtists\\n\\n        UNWIND selectedArtists AS a\\n        MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\\n        WHERE b IN selectedArtists\\n        RETURN p\\n    \";\n          return _context13.abrupt(\"return\", streamQuery(query, {\n            minLimit: parseInt(minLimit),\n            maxLimit: parseInt(maxLimit)\n          }));\n        case 2:\n        case \"end\":\n          return _context13.stop();\n      }\n    }, _callee13);\n  }));\n  return function findAllDeathcountryTechniqueAmount(_x8, _x9) {\n    return _ref13.apply(this, arguments);\n  };\n}();\nvar findAllMostExhibitedInTechniqueAmount = /*#__PURE__*/function () {\n  var _ref14 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(minLimit, maxLimit) {\n    var query;\n    return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n      while (1) switch (_context14.prev = _context14.next) {\n        case 0:\n          query = \"\\n        MATCH (a:Artist)\\n        WHERE a.artForms <> [] AND a.mostExhibitedInCountry <> '\\\\N' AND a.unclearMostExhibitedInCountry = FALSE AND a.TotalExhibitedArtworks >= $minLimit AND a.TotalExhibitedArtworks <= $maxLimit\\n        WITH a\\n        WITH collect(a) AS selectedArtists\\n\\n        UNWIND selectedArtists AS a\\n        MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\\n        WHERE b IN selectedArtists\\n        RETURN p\\n    \";\n          return _context14.abrupt(\"return\", streamQuery(query, {\n            minLimit: parseInt(minLimit),\n            maxLimit: parseInt(maxLimit)\n          }));\n        case 2:\n        case \"end\":\n          return _context14.stop();\n      }\n    }, _callee14);\n  }));\n  return function findAllMostExhibitedInTechniqueAmount(_x10, _x11) {\n    return _ref14.apply(this, arguments);\n  };\n}();\nvar streamQuery = /*#__PURE__*/function () {\n  var _ref15 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16(query, params) {\n    var _require6, session;\n    return _regeneratorRuntime().wrap(function _callee16$(_context16) {\n      while (1) switch (_context16.prev = _context16.next) {\n        case 0:\n          _require6 = require('../db'), session = _require6.session;\n          _context16.next = 3;\n          return dbSemaphore.runExclusive( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15() {\n            var result, artistsId, relationships, artists;\n            return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n              while (1) switch (_context15.prev = _context15.next) {\n                case 0:\n                  result = session.run(query, params);\n                  artistsId = new Set();\n                  relationships = [];\n                  artists = [];\n                  _context15.next = 6;\n                  return new Promise(function (resolve, reject) {\n                    result.subscribe({\n                      onNext: function onNext(record) {\n                        var relationship = record.get('p');\n                        var startData = relationship.start.properties;\n                        var endData = relationship.end.properties;\n                        var relationshipData = relationship.segments[0].relationship.properties;\n                        var relation = new exhibited_with(startData, endData, relationshipData);\n                        relationships.push(relation);\n                        var artistId = startData.id;\n                        if (!artistsId.has(artistId)) {\n                          var artist = new Artist(startData);\n                          artistsId.add(artistId);\n                          artists.push(artist);\n                        }\n                        var otherArtistId = endData.id;\n                        if (!artistsId.has(otherArtistId)) {\n                          var otherArtist = new Artist(endData);\n                          artistsId.add(otherArtistId);\n                          artists.push(otherArtist);\n                        }\n                      },\n                      onCompleted: function onCompleted() {\n                        resolve([artists, relationships]);\n                      },\n                      onError: function onError(error) {\n                        reject(error);\n                      }\n                    });\n                  });\n                case 6:\n                  return _context15.abrupt(\"return\", [artists, relationships]);\n                case 7:\n                case \"end\":\n                  return _context15.stop();\n              }\n            }, _callee15);\n          })));\n        case 3:\n          return _context16.abrupt(\"return\", _context16.sent);\n        case 4:\n        case \"end\":\n          return _context16.stop();\n      }\n    }, _callee16);\n  }));\n  return function streamQuery(_x12, _x13) {\n    return _ref15.apply(this, arguments);\n  };\n}();\nfunction spectralClusteringNationality(_x14, _x15, _x16) {\n  return _spectralClusteringNationality.apply(this, arguments);\n}\nfunction _spectralClusteringNationality() {\n  _spectralClusteringNationality = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18(min, max, k) {\n    var _yield$findAllNationa, _yield$findAllNationa2, artists, relationships, artistsWithClusters;\n    return _regeneratorRuntime().wrap(function _callee18$(_context18) {\n      while (1) switch (_context18.prev = _context18.next) {\n        case 0:\n          _context18.prev = 0;\n          if (!(latestMinLimit != min || latestMaxLimit != max || latestValue !== 'nationality')) {\n            _context18.next = 14;\n            break;\n          }\n          _context18.next = 4;\n          return findAllNationalityTechniqueAmount(min, max);\n        case 4:\n          _yield$findAllNationa = _context18.sent;\n          _yield$findAllNationa2 = _slicedToArray(_yield$findAllNationa, 2);\n          artists = _yield$findAllNationa2[0];\n          relationships = _yield$findAllNationa2[1];\n          latestArtists = artists;\n          latestRelationships = relationships;\n          latestMinLimit = min;\n          latestMaxLimit = max;\n          latestValue = 'nationality';\n          console.log(latestMinLimit, latestMaxLimit);\n        case 14:\n          _context18.next = 16;\n          return spectralClustering(latestArtists, latestRelationships, k);\n        case 16:\n          artistsWithClusters = _context18.sent;\n          return _context18.abrupt(\"return\", artistsWithClusters);\n        case 20:\n          _context18.prev = 20;\n          _context18.t0 = _context18[\"catch\"](0);\n          console.error(_context18.t0);\n        case 23:\n        case \"end\":\n          return _context18.stop();\n      }\n    }, _callee18, null, [[0, 20]]);\n  }));\n  return _spectralClusteringNationality.apply(this, arguments);\n}\nfunction spectralClusteringBirthcountry(_x17, _x18, _x19) {\n  return _spectralClusteringBirthcountry.apply(this, arguments);\n}\nfunction _spectralClusteringBirthcountry() {\n  _spectralClusteringBirthcountry = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee19(min, max, k) {\n    var _yield$findAllBirthco, _yield$findAllBirthco2, artists, relationships, artistsWithClusters;\n    return _regeneratorRuntime().wrap(function _callee19$(_context19) {\n      while (1) switch (_context19.prev = _context19.next) {\n        case 0:\n          _context19.prev = 0;\n          if (!(latestMinLimit != min || latestMaxLimit != max || latestValue !== 'birthcountry')) {\n            _context19.next = 13;\n            break;\n          }\n          _context19.next = 4;\n          return findAllBirthcountryTechniqueAmount(min, max);\n        case 4:\n          _yield$findAllBirthco = _context19.sent;\n          _yield$findAllBirthco2 = _slicedToArray(_yield$findAllBirthco, 2);\n          artists = _yield$findAllBirthco2[0];\n          relationships = _yield$findAllBirthco2[1];\n          latestArtists = artists;\n          latestRelationships = relationships;\n          latestMinLimit = min;\n          latestMaxLimit = max;\n          latestValue = 'birthcountry';\n        case 13:\n          _context19.next = 15;\n          return spectralClustering(latestArtists, latestRelationships, k);\n        case 15:\n          artistsWithClusters = _context19.sent;\n          return _context19.abrupt(\"return\", artistsWithClusters);\n        case 19:\n          _context19.prev = 19;\n          _context19.t0 = _context19[\"catch\"](0);\n          console.error(_context19.t0);\n        case 22:\n        case \"end\":\n          return _context19.stop();\n      }\n    }, _callee19, null, [[0, 19]]);\n  }));\n  return _spectralClusteringBirthcountry.apply(this, arguments);\n}\nfunction spectralClusteringDeathcountry(_x20, _x21, _x22) {\n  return _spectralClusteringDeathcountry.apply(this, arguments);\n}\nfunction _spectralClusteringDeathcountry() {\n  _spectralClusteringDeathcountry = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee20(min, max, k) {\n    var _yield$findAllDeathco, _yield$findAllDeathco2, artists, relationships, artistsWithClusters;\n    return _regeneratorRuntime().wrap(function _callee20$(_context20) {\n      while (1) switch (_context20.prev = _context20.next) {\n        case 0:\n          _context20.prev = 0;\n          if (!(latestMinLimit != min || latestMaxLimit != max || latestValue !== 'deathcountry')) {\n            _context20.next = 13;\n            break;\n          }\n          _context20.next = 4;\n          return findAllDeathcountryTechniqueAmount(min, max);\n        case 4:\n          _yield$findAllDeathco = _context20.sent;\n          _yield$findAllDeathco2 = _slicedToArray(_yield$findAllDeathco, 2);\n          artists = _yield$findAllDeathco2[0];\n          relationships = _yield$findAllDeathco2[1];\n          latestArtists = artists;\n          latestRelationships = relationships;\n          latestMinLimit = min;\n          latestMaxLimit = max;\n          latestValue = 'deathcountry';\n        case 13:\n          _context20.next = 15;\n          return spectralClustering(latestArtists, latestRelationships, k);\n        case 15:\n          artistsWithClusters = _context20.sent;\n          return _context20.abrupt(\"return\", artistsWithClusters);\n        case 19:\n          _context20.prev = 19;\n          _context20.t0 = _context20[\"catch\"](0);\n          console.error(_context20.t0);\n        case 22:\n        case \"end\":\n          return _context20.stop();\n      }\n    }, _callee20, null, [[0, 19]]);\n  }));\n  return _spectralClusteringDeathcountry.apply(this, arguments);\n}\nfunction spectralClusteringMostExhibited(_x23, _x24, _x25) {\n  return _spectralClusteringMostExhibited.apply(this, arguments);\n}\nfunction _spectralClusteringMostExhibited() {\n  _spectralClusteringMostExhibited = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee21(min, max, k) {\n    var _yield$findAllMostExh, _yield$findAllMostExh2, artists, relationships, artistsWithClusters;\n    return _regeneratorRuntime().wrap(function _callee21$(_context21) {\n      while (1) switch (_context21.prev = _context21.next) {\n        case 0:\n          _context21.prev = 0;\n          if (!(latestMinLimit != min || latestMaxLimit != max || latestValue !== 'mostexhibited')) {\n            _context21.next = 13;\n            break;\n          }\n          _context21.next = 4;\n          return findAllMostExhibitedInTechniqueAmount(min, max);\n        case 4:\n          _yield$findAllMostExh = _context21.sent;\n          _yield$findAllMostExh2 = _slicedToArray(_yield$findAllMostExh, 2);\n          artists = _yield$findAllMostExh2[0];\n          relationships = _yield$findAllMostExh2[1];\n          latestArtists = artists;\n          latestRelationships = relationships;\n          latestMinLimit = min;\n          latestMaxLimit = max;\n          latestValue = 'mostexhibited';\n        case 13:\n          _context21.next = 15;\n          return spectralClustering(latestArtists, latestRelationships, k);\n        case 15:\n          artistsWithClusters = _context21.sent;\n          return _context21.abrupt(\"return\", artistsWithClusters);\n        case 19:\n          _context21.prev = 19;\n          _context21.t0 = _context21[\"catch\"](0);\n          console.error(_context21.t0);\n        case 22:\n        case \"end\":\n          return _context21.stop();\n      }\n    }, _callee21, null, [[0, 19]]);\n  }));\n  return _spectralClusteringMostExhibited.apply(this, arguments);\n}\nmodule.exports = {\n  findAllNationalityTechnique: findAllNationalityTechnique,\n  findAllBirthcountryTechnique: findAllBirthcountryTechnique,\n  findAllDeathcountryTechnique: findAllDeathcountryTechnique,\n  findAllMostExhibitedInTechnique: findAllMostExhibitedInTechnique,\n  findAllTechniques: findAllTechniques,\n  findAllNationalityTechniqueAmount: findAllNationalityTechniqueAmount,\n  findAllBirthcountryTechniqueAmount: findAllBirthcountryTechniqueAmount,\n  findAllDeathcountryTechniqueAmount: findAllDeathcountryTechniqueAmount,\n  findAllMostExhibitedInTechniqueAmount: findAllMostExhibitedInTechniqueAmount,\n  spectralClusteringNationality: spectralClusteringNationality,\n  spectralClusteringBirthcountry: spectralClusteringBirthcountry,\n  spectralClusteringDeathcountry: spectralClusteringDeathcountry,\n  spectralClusteringMostExhibited: spectralClusteringMostExhibited\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":{"version":3,"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","_catch","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","key","info","error","_asyncToGenerator","fn","self","args","arguments","apply","err","undefined","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","_toPropertyKey","_createClass","protoProps","staticProps","_toPrimitive","toPrimitive","String","Number","dbSemaphore","require","math","latestArtists","latestRelationships","latestMinLimit","latestMaxLimit","latestValue","Artist","data","id","firstname","lastname","birthyear","calculateYear","birthdate","toString","birthplace","deathyear","deathdate","deathplace","nationality","country","sex","title","techniques","artForms","amount_techniques","amountArtForms","distinct_techniques","distinctArtForms","europeanRegionNationality","determineRegion","most_exhibited_in","mostExhibitedInCountry","europeanRegionMostExhibited","most_exhibited_in_amount","mostExhibitedInCountryAmount","total_exhibited_artworks","TotalExhibitedArtworks","deathcountry","deathCountry","europeanRegionDeath","birthcountry","birthCountry","europeanRegionBirth","total_exhibitions","TotalExhibitions","techniques_freq","artFormsFreq","cluster","date","year","parseInt","split","countryCode","region","europeanRegions","includes","exhibited_with","startData","endData","relationshipData","startId","Math","min","endId","max","sharedExhibitions","sharedExhibitionMinArtworks","findAllNationalityTechnique","_ref","_callee2","_require","session","_callee2$","_context2","runExclusive","_callee","result","_callee$","_context","console","log","run","processResult","findAllBirthcountryTechnique","_ref3","_callee4","_require2","_callee4$","_context4","_callee3","_callee3$","_context3","findAllDeathcountryTechnique","_ref5","_callee6","_require3","_callee6$","_context6","_callee5","_callee5$","_context5","findAllMostExhibitedInTechnique","_ref7","_callee8","_require4","_callee8$","_context8","_callee7","_callee7$","_context7","findAllTechniques","_ref9","_callee10","_require5","_callee10$","_context10","_callee9","_callee9$","_context9","normalizeLogarithmically","logMaxValue","log1p","_toConsumableArray","logMinValue","range","normalized","Map","set","spectralClustering","_x","_x2","_x3","_spectralClustering","_callee17","artists","relationships","k","sharedExhibitionValues","normalizedSharedExhibitionValues","size","adjacencyMatrix","degreeMatrix","laplacianMatrix","eigensystem","firstThreeEigenvectors","featureMatrixU","vector","featureMatrixUTransposed","clusters","clusterArray","clusterAssignments","clusteredArtists","clusterMap","intraClusterRelationships","singleInterClusterRelationships","interClusterRelationshipsMap","interClusterRelationships","_callee17$","_context17","relationship","zeros","findIndex","artist","j","weight","get","map","index","matrix","sum","_data","subtract","eigs","eigenvectors","toArray","transpose","kMeansClustering","redistributeClusters","_objectSpread","Array","from","clusterIndex","clusterA","clusterB","concat","has","aggregatedRelationship","rel","minClusterSize","maxClusterSize","centroids","calculateCentroids","clusterSizes","fill","needsHelp","filter","stat","need","point","idx","currentClusterIndex","closest","distance","Infinity","centroid","euclideanDistance","reduce","mean","m","maxIterations","bestCentroids","bestClusterAssignments","minTotalDistance","initialization","initializeCentroids","iteration","newClusterAssignments","assignPointsToCentroids","newCentroids","updateCentroids","centroidsEqual","totalDistance","calculateTotalDistance","_loop","_loop2","farthestPointIndex","maxDistance","minDistance","nearestClusterIndex","floor","random","_loop3","distances","b","probabilities","cumulativeProbabilities","acc","prob","rand","nextCentroidIndex","cumProb","_iterator","_createForOfIteratorHelper","_step","closestCentroidIndex","clusterCounts","centroids1","centroids2","point1","point2","pow","sqrt","artistsId","Set","records","record","start","properties","end","segments","relation","artistId","add","otherArtistId","otherArtist","removeEmptyClusters","nonEmptyClusters","newClusterMap","newIndex","newClusteredArtists","newClusterId","findAllNationalityTechniqueAmount","_ref11","_callee11","minLimit","maxLimit","query","_callee11$","_context11","streamQuery","_x4","_x5","findAllBirthcountryTechniqueAmount","_ref12","_callee12","_callee12$","_context12","_x6","_x7","findAllDeathcountryTechniqueAmount","_ref13","_callee13","_callee13$","_context13","_x8","_x9","findAllMostExhibitedInTechniqueAmount","_ref14","_callee14","_callee14$","_context14","_x10","_x11","_ref15","_callee16","params","_require6","_callee16$","_context16","_callee15","_callee15$","_context15","subscribe","onNext","onCompleted","onError","_x12","_x13","spectralClusteringNationality","_x14","_x15","_x16","_spectralClusteringNationality","_callee18","_yield$findAllNationa","_yield$findAllNationa2","artistsWithClusters","_callee18$","_context18","_slicedToArray","t0","spectralClusteringBirthcountry","_x17","_x18","_x19","_spectralClusteringBirthcountry","_callee19","_yield$findAllBirthco","_yield$findAllBirthco2","_callee19$","_context19","spectralClusteringDeathcountry","_x20","_x21","_x22","_spectralClusteringDeathcountry","_callee20","_yield$findAllDeathco","_yield$findAllDeathco2","_callee20$","_context20","spectralClusteringMostExhibited","_x23","_x24","_x25","_spectralClusteringMostExhibited","_callee21","_yield$findAllMostExh","_yield$findAllMostExh2","_callee21$","_context21","module","exports"],"sourceRoot":"C:\\Users\\karlh\\OneDrive\\Dokumente\\Studium\\Projekt\\BachelorProject\\backend\\src\\models\\","sources":["artist.js"],"sourcesContent":["const dbSemaphore = require('../semaphoreHandler');\r\nconst math = require('mathjs');\r\n\r\nlet latestArtists = [];\r\nlet latestRelationships = [];\r\nlet latestMinLimit = -1;\r\nlet latestMaxLimit = -1;\r\nlet latestValue = '';\r\n\r\n\r\nclass Artist {\r\n    constructor(data) {\r\n        this.id = Number(data.id); \r\n        this.firstname = data.firstname;\r\n        this.lastname = data.lastname;\r\n        this.birthyear = this.calculateYear(data.birthdate.toString());\r\n        this.birthplace = data.birthplace;\r\n        this.deathyear = this.calculateYear(data.deathdate.toString());\r\n        this.deathplace = data.deathplace;\r\n        this.nationality = data.country;\r\n        this.sex = data.sex;\r\n        this.title = data.title;\r\n        this.techniques = data.artForms;\r\n        this.amount_techniques=data.amountArtForms;\r\n        this.distinct_techniques=data.distinctArtForms;\r\n        this.europeanRegionNationality = this.determineRegion(data.country);\r\n        this.most_exhibited_in = data.mostExhibitedInCountry;\r\n        this.europeanRegionMostExhibited = this.determineRegion(data.mostExhibitedInCountry);\r\n        this.most_exhibited_in_amount = data.mostExhibitedInCountryAmount;\r\n        this.total_exhibited_artworks = data.TotalExhibitedArtworks;\r\n        this.deathcountry = data.deathCountry;\r\n        this.europeanRegionDeath = this.determineRegion(data.deathCountry);\r\n        this.birthcountry = data.birthCountry;\r\n        this.europeanRegionBirth = this.determineRegion(data.birthCountry);\r\n        this.total_exhibitions = data.TotalExhibitions;\r\n        this.techniques_freq = data.artFormsFreq;\r\n        this.cluster = -1; // Default value\r\n    }\r\n    calculateYear(date) {\r\n        if (!date) return null; // Handle cases where birthdate is not provided\r\n        const year = parseInt(date.split('-')[0]);\r\n        return year;\r\n    }\r\n    determineRegion(countryCode) {\r\n        for (const region in europeanRegions) {\r\n            if (europeanRegions[region].includes(countryCode)) {\r\n                return region;\r\n            }\r\n        }\r\n        return '\\\\N'; // Return null if no region matches\r\n    }\r\n\r\n}\r\n\r\n// Define European regions based on country codes\r\nconst europeanRegions = {\r\n    \"North Europe\": [\"DK\", \"EE\", \"FI\", \"IE\", \"LT\", \"LV\", \"NO\", \"SE\", \"IS\"],\r\n    \"Western Europe\": [\"GB\", \"FR\", \"BE\", \"NL\", \"LU\", \"CH\", \"MC\", \"DE\", \"AT\"], // Added DE, AT\r\n    \"Southern Europe\": [\"PT\", \"ES\", \"IT\", \"GR\", \"HR\", \"BA\", \"RS\", \"ME\", \"SI\", \"MA\", \"GI\"],\r\n    \"Eastern Europe\": [\"RU\", \"UA\", \"BY\", \"BG\", \"RO\", \"MD\", \"AZ\", \"PL\", \"CZ\", \"SK\", \"HU\"], // Added PL, CZ, SK, HU\r\n    \"Others\": [\r\n      \"US\", \"AU\", \"GE\", \"MX\", \"AM\", \"IL\", \"CL\", \"AR\", \"CA\", \"DO\", \"PE\", \"JP\", \"TR\",\r\n      \"BR\", \"ZA\", \"NZ\", \"VE\", \"GT\", \"UY\", \"SV\", \"PY\", \"IN\", \"PF\", \"KZ\", \"UZ\", \"VN\", \r\n      \"NA\", \"JO\", \"IR\", \"KH\", \"JM\", \"SA\", \"DZ\", \"CN\", \"EG\", \"VI\", \"ID\", \"CU\", \"TN\", \r\n      \"MQ\", \"MU\", \"LK\", \"EC\", \"SG\", \"BL\", \"TH\", \"BO\"\r\n    ]\r\n  };\r\n  \r\n/*   const allCountries = [\r\n    \"GB\", \"ID\", \"UA\", \"CH\", \"RU\", \"NL\", \"DE\", \"BY\", \"IT\", \"LT\", \"US\", \"HU\", \"FR\", \"AU\", \"BE\", \"CZ\", \"AT\", \"NO\", \r\n    \"GR\", \"SE\", \"PL\", \"LV\", \"FI\", \"ES\", \"MD\", \"CA\", \"BG\", \"GE\", \"DZ\", \"MX\", \"AZ\", \"RO\", \"EE\", \"DK\", \"AR\", \"UY\", \r\n    \"CU\", \"PT\", \"HR\", \"SI\", \"TN\", \"EG\", \"SK\", \"TR\", \"VI\", \"RS\", \"IE\", \"DO\", \"JP\", \"MQ\", \"IN\", \"MU\", \"ME\", \"CL\", \r\n    \"ZA\", \"NZ\", \"KH\", \"LU\", \"GI\", \"VE\", \"GT\", \"SV\", \"PY\", \"LK\", \"BA\", \"EC\", \"BR\", \"SG\", \"BL\", \"PE\", \"TH\", \"PF\", \r\n    \"AM\", \"IL\", \"MC\", \"CN\", \"UZ\", \"KZ\", \"MA\", \"BO\", \"VN\", \"NA\", \"JO\", \"IR\", \"JM\", \"SA\"\r\n  ]\r\n  // Create a set of all countries in europeanRegions\r\nconst categorizedCountries = new Set();\r\nObject.values(europeanRegions).forEach(regionCountries => {\r\n  regionCountries.forEach(country => {\r\n    categorizedCountries.add(country);\r\n  });\r\n});\r\n\r\n// Find countries in allCountries that are not in categorizedCountries\r\nconst uncategorizedCountries = allCountries.filter(country => !categorizedCountries.has(country));\r\n\r\nconsole.log(uncategorizedCountries);\r\n   */\r\n\r\nclass exhibited_with {\r\n    constructor(startData, endData, relationshipData) {\r\n        this.startId = Math.min(startData.id, endData.id);\r\n        this.endId = Math.max(startData.id, endData.id);\r\n        this.sharedExhibitions = relationshipData.sharedExhibitions;\r\n        this.sharedExhibitionMinArtworks = relationshipData.sharedExhibitionMinArtworks;\r\n    }\r\n} \r\n\r\nconst findAllNationalityTechnique = async () => {\r\n    const { session } = require('../db');\r\n    return await dbSemaphore.runExclusive(async () => {\r\n        console.log('Semaphore acquired by normal')\r\n    \r\n    const result = await session.run(\r\n   // Collect 25 distinct artists based on some criteria\r\n    `MATCH (a:Artist)\r\n    WHERE a.artForms <> [] AND a.country <> '\\\\N'\r\n    WITH a\r\n    LIMIT 25\r\n    WITH collect(a) AS selectedArtists\r\n\r\n    // For each artist in the selected group, find all exhibited relationships within this group\r\n    UNWIND selectedArtists AS a\r\n    MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\r\n    WHERE b IN selectedArtists\r\n    RETURN p\r\n    `);\r\n\r\n    return await processResult(result); \r\n});\r\n};\r\n\r\n/* const findAllNationalityTechniqueAmount = async (minLimit, maxLimit) => {\r\n    const { session } = require('../db');\r\n    return await dbSemaphore.runExclusive(async () => {\r\n        console.log('Semaphore acquired by amount')\r\n    const result = await session.run(\r\n   // Collect artists where total\r\n    `MATCH (a:Artist)\r\n    WHERE a.artForms <> [] AND a.country <> '\\\\N' AND a.TotalExhibitedArtworks >= $minLimit AND a.TotalExhibitedArtworks <= $maxLimit\r\n    WITH a\r\n    WITH collect(a) AS selectedArtists\r\n\r\n    // For each artist in the selected group, find all exhibited relationships within this group\r\n    UNWIND selectedArtists AS a\r\n    MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\r\n    WHERE b IN selectedArtists\r\n    RETURN p\r\n    `\r\n    ,{ minLimit: parseInt(minLimit), maxLimit: parseInt(maxLimit) } );// Ensure these are correctly passed as integers);\r\n    \r\n\r\n    return await processResult(result);\r\n});\r\n}; */\r\n\r\n\r\nconst findAllBirthcountryTechnique = async () => {\r\n    const { session } = require('../db');\r\n    return await dbSemaphore.runExclusive(async () => {\r\n    const result = await session.run(\r\n   // Collect 25 distinct artists based on some criteria\r\n    `MATCH (a:Artist)\r\n    WHERE a.artForms <> [] AND a.birthCountry <> '\\\\N'\r\n    WITH a\r\n    LIMIT 25\r\n    WITH collect(a) AS selectedArtists\r\n\r\n    // For each artist in the selected group, find all exhibited relationships within this group\r\n    UNWIND selectedArtists AS a\r\n    MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\r\n    WHERE b IN selectedArtists\r\n    RETURN p\r\n    `);\r\n\r\n    return await processResult(result);\r\n});\r\n};\r\n\r\n/* const findAllBirthcountryTechniqueAmount = async (minLimit,maxLimit) => {\r\n    const { session } = require('../db');\r\n    return await dbSemaphore.runExclusive(async () => {\r\n    const result = await session.run(\r\n   // Collect 25 distinct artists based on some criteria\r\n    `MATCH (a:Artist) \r\n    WHERE a.artForms <> [] AND a.birthCountry <> '\\\\N' AND a.TotalExhibitedArtworks >= $minLimit AND a.TotalExhibitedArtworks <= $maxLimit\r\n    WITH a\r\n    WITH collect(a) AS selectedArtists\r\n\r\n    // For each artist in the selected group, find all exhibited relationships within this group\r\n    UNWIND selectedArtists AS a\r\n    MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\r\n    WHERE b IN selectedArtists\r\n    RETURN p\r\n    `\r\n    ,{ minLimit: parseInt(minLimit), maxLimit: parseInt(maxLimit) } );// Ensure these are correctly passed as integers);\r\n    \r\n\r\n    return await processResult(result);\r\n});\r\n}; */\r\n\r\nconst findAllDeathcountryTechnique = async () => {\r\n    const { session } = require('../db');\r\n    return await dbSemaphore.runExclusive(async () => {\r\n    const result = await session.run(\r\n   // Collect 25 distinct artists based on some criteria\r\n    `MATCH (a:Artist)\r\n    WHERE a.artForms <> [] AND a.deathCountry <> '\\\\N'\r\n    WITH a\r\n    LIMIT 25\r\n    WITH collect(a) AS selectedArtists\r\n\r\n    // For each artist in the selected group, find all exhibited relationships within this group\r\n    UNWIND selectedArtists AS a\r\n    MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\r\n    WHERE b IN selectedArtists\r\n    RETURN p\r\n    `);\r\n\r\n    return await processResult(result);\r\n\r\n});\r\n};\r\n/* \r\nconst findAllDeathcountryTechniqueAmount = async (minLimit,maxLimit) => {\r\n    const { session } = require('../db');\r\n    return await dbSemaphore.runExclusive(async () => {\r\n    const result = await session.run(\r\n   // Collect 25 distinct artists based on some criteria\r\n    `MATCH (a:Artist)\r\n    WHERE a.artForms <> [] AND a.deathCountry <> '\\\\N'  AND a.TotalExhibitedArtworks >= $minLimit AND a.TotalExhibitedArtworks <= $maxLimit\r\n    WITH a\r\n    WITH collect(a) AS selectedArtists\r\n\r\n    // For each artist in the selected group, find all exhibited relationships within this group\r\n    UNWIND selectedArtists AS a\r\n    MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\r\n    WHERE b IN selectedArtists\r\n    RETURN p\r\n    `\r\n    ,{ minLimit: parseInt(minLimit), maxLimit: parseInt(maxLimit) } );// Ensure these are correctly passed as integers);\r\n    \r\n\r\n    return await processResult(result);\r\n\r\n});\r\n}; */\r\n\r\n\r\nconst findAllMostExhibitedInTechnique = async () => {\r\n    const { session } = require('../db');\r\n    return await dbSemaphore.runExclusive(async () => {\r\n    const result = await session.run(\r\n   // Collect 25 distinct artists based on some criteria\r\n    `MATCH (a:Artist)\r\n    WHERE a.artForms <> [] AND a.mostExhibitedInCountry <> '\\\\N' AND a.unclearMostExhibitedInCountry = FALSE \r\n    WITH a\r\n    LIMIT 25\r\n    WITH collect(a) AS selectedArtists\r\n\r\n    // For each artist in the selected group, find all exhibited relationships within this group\r\n    UNWIND selectedArtists AS a\r\n    MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\r\n    WHERE b IN selectedArtists\r\n    RETURN p\r\n    `);\r\n\r\n    return await processResult(result);\r\n});\r\n};\r\n\r\n/* const findAllMostExhibitedInTechniqueAmount = async (minLimit,maxLimit) => {\r\n    const { session } = require('../db');\r\n    return await dbSemaphore.runExclusive(async () => {\r\n    const result = await session.run(\r\n   // Collect 25 distinct artists based on some criteria\r\n    `MATCH (a:Artist)\r\n    WHERE a.artForms <> [] AND a.mostExhibitedInCountry <> '\\\\N' AND a.unclearMostExhibitedInCountry = FALSE  AND a.TotalExhibitedArtworks >= $minLimit AND a.TotalExhibitedArtworks <= $maxLimit\r\n    WITH a\r\n    WITH collect(a) AS selectedArtists\r\n\r\n    // For each artist in the selected group, find all exhibited relationships within this group\r\n    UNWIND selectedArtists AS a\r\n    MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\r\n    WHERE b IN selectedArtists\r\n    RETURN p\r\n    `\r\n    ,{ minLimit: parseInt(minLimit), maxLimit: parseInt(maxLimit) } );// Ensure these are correctly passed as integers);\r\n    \r\n\r\n    return await processResult(result);\r\n\r\n});\r\n}; */\r\n\r\n\r\nconst findAllTechniques = async () => {\r\n    const { session } = require('../db');\r\n    return await dbSemaphore.runExclusive(async () => {\r\n    const result = await session.run(\r\n   // Collect 25 distinct artists based on some criteria\r\n    `MATCH (a:Artist)\r\n    WHERE a.artForms <> [] AND a.artFormsFreq <> '{}'\r\n    WITH a\r\n    LIMIT 25\r\n    WITH collect(a) AS selectedArtists\r\n\r\n    // For each artist in the selected group, find all exhibited relationships within this group\r\n    UNWIND selectedArtists AS a\r\n    MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\r\n    WHERE b IN selectedArtists\r\n    RETURN p\r\n    `);\r\n\r\n    return await processResult(result);\r\n\r\n});\r\n};\r\n\r\n\r\n\r\n  // Assuming 'artists' is an array of artist nodes and 'relationships' is an array of edges with weights\r\nconst normalizeLogarithmically = (values) => {\r\n    const logMaxValue = Math.log1p(Math.max(...values.values()));\r\n    const logMinValue = Math.log1p(Math.min(...values.values()));\r\n    const range = logMaxValue - logMinValue;\r\n    const normalized = new Map();\r\n   \r\n    values.forEach((value, id) => {\r\n        normalized.set(id, (Math.log1p(value) - logMinValue) / range); // Normalize by dividing by the max degree\r\n    });\r\n    return normalized;\r\n};\r\n\r\nasync function spectralClustering(artists, relationships, k) {\r\n    console.log('cluster')\r\n    // Step 0: Extract sharedExhibitionMinArtworks values for normalization\r\n    const sharedExhibitionValues = new Map();\r\n    relationships.forEach(relationship => {\r\n        const id = relationship.startId;\r\n        const value = relationship.sharedExhibitionMinArtworks;\r\n        sharedExhibitionValues.set(id, value);\r\n    });\r\n\r\n    // Step 0.1: Normalize sharedExhibitionMinArtworks values\r\n    const normalizedSharedExhibitionValues = normalizeLogarithmically(sharedExhibitionValues);\r\n\r\n    // Step 1: Construct the adjacency matrix\r\n    const size = artists.length;\r\n    const adjacencyMatrix = math.zeros(size, size);\r\n\r\n    relationships.forEach(relationship => {\r\n        const i = artists.findIndex(artist => artist.id === relationship.startId);\r\n        const j = artists.findIndex(artist => artist.id === relationship.endId);\r\n        const weight = normalizedSharedExhibitionValues.get(relationship.startId);\r\n\r\n        adjacencyMatrix.set([i, j], Number(weight));\r\n        adjacencyMatrix.set([j, i], Number(weight)); // since it's an undirected graph\r\n    });   \r\n\r\n    // Step 2: Construct the degree matrix\r\n    const degreeMatrix = adjacencyMatrix.map((value, index, matrix) => {\r\n        return index[0] === index[1] ? Number(math.sum(matrix._data[index[0]])) : 0;\r\n    });\r\n\r\n    // Step 3: Construct the Laplacian matrix\r\n    const laplacianMatrix = math.subtract(degreeMatrix, adjacencyMatrix);\r\n\r\n   // Step 4: Compute the eigenvalues and eigenvectors\r\n   const eigensystem = math.eigs(laplacianMatrix);\r\n\r\n   // Check if the eigenvalues and eigenvectors are defined and not empty\r\n   if (!eigensystem || eigensystem.values.length === 0) {\r\n       throw new Error(\"Eigenvectors are undefined or missing data.\");\r\n   }\r\n \r\n\r\n   // Extract the first three eigenvectors\r\nconst firstThreeEigenvectors = eigensystem.eigenvectors.slice(0, k);\r\n\r\n// Initialize the feature matrix\r\nconst featureMatrixU = [];\r\n\r\n// Loop over the eigenvectors\r\nfor (let i = 0; i < firstThreeEigenvectors.length; i++) {\r\n    const vector = firstThreeEigenvectors[i].vector.toArray(); // Convert DenseMatrix to array\r\n    featureMatrixU.push(vector); // Push the vector as a column in the feature matrix\r\n}\r\n\r\n// Transpose the feature matrix to have columns as data points\r\nconst featureMatrixUTransposed = math.transpose(featureMatrixU);\r\n      // Perform initial kMeans Clustering\r\n      let clusters = kMeansClustering(featureMatrixUTransposed, k, 1); // Assume minClusterSize = 1 for basic example\r\n\r\n      // Redistribute clusters here\r\n      clusters = redistributeClusters(featureMatrixUTransposed, clusters, k, 5, 15); // Example sizes\r\n  \r\n   // Assuming kMeansClustering and other related functions are d\r\n   \r\n    // Associate artists with their clusters\r\n    const clusterArray = artists.map((artist, index) => ({\r\n        ...artist,\r\n        cluster: clusters[index]\r\n    }));\r\n    // Associate artists with their clusters\r\n    const clusterAssignments = artists.map((artist, index) => {\r\n    artist.cluster = clusters[index]; // Assign the cluster to the artist\r\n        \r\n});\r\n   \r\n    // Initialize an array of k empty arrays for the clusters\r\nconst clusteredArtists = Array.from({ length: k }, () => []);\r\n\r\n// Populate the cluster arrays with artists\r\nartists.forEach((artist, index) => {\r\n  const clusterIndex = clusters[index]; // Retrieve the cluster index assigned to the artist\r\n  clusteredArtists[clusterIndex].push(artist); // Add the artist to the corresponding cluster\r\n});\r\n\r\nconst clusterMap = new Map();\r\nartists.forEach((artist, index) => {\r\n    clusterMap.set(artist.id, clusters[index]); // Correctly associate artist ID with cluster index\r\n});\r\n\r\n\r\nconst intraClusterRelationships = Array.from({ length: k }, () => []);\r\nconst singleInterClusterRelationships = Array.from({ length: k }, () => []);\r\nconst interClusterRelationshipsMap = new Map();\r\n\r\nrelationships.forEach(relationship => {\r\n    const clusterA = clusterMap.get(relationship.startId);\r\n    const clusterB = clusterMap.get(relationship.endId);\r\n\r\n    if (clusterA === clusterB) {\r\n        intraClusterRelationships[clusterA].push(relationship);\r\n    } else {\r\n        singleInterClusterRelationships[clusterA].push(relationship);\r\n        singleInterClusterRelationships[clusterB].push(relationship);\r\n        const key = `${Math.min(clusterA, clusterB)}-${Math.max(clusterA, clusterB)}`;\r\n        if (!interClusterRelationshipsMap.has(key)) {\r\n            interClusterRelationshipsMap.set(key, { \r\n                startId: Math.min(clusterA, clusterB), \r\n                endId: Math.max(clusterA, clusterB), \r\n                sharedExhibitions: 0, \r\n                sharedExhibitionMinArtworks: 0 \r\n            });\r\n        }\r\n        const aggregatedRelationship = interClusterRelationshipsMap.get(key);\r\n        aggregatedRelationship.sharedExhibitions += relationship.sharedExhibitions;\r\n        aggregatedRelationship.sharedExhibitionMinArtworks += relationship.sharedExhibitionMinArtworks;\r\n    }\r\n});\r\n\r\nconst interClusterRelationships = Array.from(interClusterRelationshipsMap.values()).map(rel => \r\n    new exhibited_with(\r\n        { id: rel.startId }, \r\n        { id: rel.endId }, \r\n        { sharedExhibitions: rel.sharedExhibitions, sharedExhibitionMinArtworks: rel.sharedExhibitionMinArtworks }\r\n    )\r\n);\r\n\r\nconsole.log('cluster finished')\r\nreturn [\r\n    clusteredArtists,\r\n    intraClusterRelationships,\r\n    interClusterRelationships,  // You might want to further organize this by cluster pairs if needed\r\n    singleInterClusterRelationships\r\n];\r\n\r\n}\r\n\r\nfunction redistributeClusters(data, clusters, k, minClusterSize, maxClusterSize) {\r\n    const centroids = calculateCentroids(data, clusters, k);\r\n    let clusterSizes = new Array(k).fill(0);\r\n    clusters.forEach(cluster => clusterSizes[cluster]++);\r\n\r\n    const needsHelp = clusterSizes.map((size, index) => ({\r\n        index,\r\n        size,\r\n        type: size < minClusterSize ? 'undersized' : (size > maxClusterSize ? 'oversized' : 'ok')\r\n    })).filter(stat => stat.type !== 'ok');\r\n\r\n    needsHelp.forEach(need => {\r\n        if (need.type === 'oversized') {\r\n            data.forEach((point, idx) => {\r\n                if (clusters[idx] === need.index) {\r\n                    const currentClusterIndex = need.index;\r\n                    let closest = { index: -1, distance: Infinity };\r\n                    \r\n                    centroids.forEach((centroid, index) => {\r\n                        if (index !== currentClusterIndex && clusterSizes[index] < maxClusterSize) {\r\n                            const distance = euclideanDistance(point, centroid);\r\n                            if (distance < closest.distance) {\r\n                                closest = { index, distance };\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    if (closest.index !== -1) {\r\n                        clusters[idx] = closest.index;\r\n                        clusterSizes[currentClusterIndex]--;\r\n                        clusterSizes[closest.index]++;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    });\r\n\r\n    return clusters;\r\n}\r\n\r\nfunction calculateCentroids(data, clusters, k) {\r\n    const centroids = Array(k).fill(null).map(() => []);\r\n    data.forEach((point, index) => {\r\n        centroids[clusters[index]].push(point);\r\n    });\r\n    return centroids.map(cluster => cluster.reduce((mean, point) => \r\n        mean.map((m, idx) => m + point[idx] / cluster.length), new Array(data[0].length).fill(0))\r\n    );\r\n}\r\n\r\nfunction kMeansClustering(data, k, minClusterSize) {\r\n    const maxIterations = 500;\r\n    let bestCentroids = [];\r\n    let bestClusterAssignments = [];\r\n    let minTotalDistance = Infinity;\r\n\r\n    for (let initialization = 0; initialization < 10; initialization++) { // Try multiple random initializations\r\n        let centroids = initializeCentroids(data, k);\r\n        let clusterAssignments = [];\r\n\r\n        for (let iteration = 0; iteration < maxIterations; iteration++) {\r\n            const newClusterAssignments = assignPointsToCentroids(data, centroids);\r\n            const newCentroids = updateCentroids(data, newClusterAssignments, k);\r\n\r\n            if (centroidsEqual(newCentroids, centroids)) {\r\n                clusterAssignments = newClusterAssignments;\r\n                break;\r\n            }\r\n\r\n            centroids = newCentroids;\r\n        }\r\n\r\n        const totalDistance = calculateTotalDistance(data, centroids, clusterAssignments);\r\n        if (totalDistance < minTotalDistance) {\r\n            bestCentroids = centroids;\r\n            bestClusterAssignments = clusterAssignments;\r\n            minTotalDistance = totalDistance;\r\n        }\r\n    }\r\n\r\n    // Ensure each cluster meets the minimum size requirement\r\n    let clusterSizes = new Array(k).fill(0);\r\n    bestClusterAssignments.forEach(clusterIndex => {\r\n        clusterSizes[clusterIndex]++;\r\n    });\r\n\r\n    // Reassign points until each cluster has at least minClusterSize points\r\n    for (let i = 0; i < k; i++) {\r\n        while (clusterSizes[i] < minClusterSize) {\r\n            // Find the point farthest from its centroid in cluster i\r\n            let farthestPointIndex = -1;\r\n            let maxDistance = -1;\r\n\r\n            data.forEach((point, index) => {\r\n                if (bestClusterAssignments[index] === i) {\r\n                    const distance = euclideanDistance(point, bestCentroids[i]);\r\n                    if (distance > maxDistance) {\r\n                        maxDistance = distance;\r\n                        farthestPointIndex = index;\r\n                    }\r\n                }\r\n            });\r\n\r\n            // Reassign the farthest point to the nearest cluster\r\n            let minDistance = Infinity;\r\n            let nearestClusterIndex = -1;\r\n            for (let j = 0; j < k; j++) {\r\n                if (j !== i) {\r\n                    const distance = euclideanDistance(data[farthestPointIndex], bestCentroids[j]);\r\n                    if (distance < minDistance) {\r\n                        minDistance = distance;\r\n                        nearestClusterIndex = j;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Reassign the point to the nearest cluster\r\n            bestClusterAssignments[farthestPointIndex] = nearestClusterIndex;\r\n            clusterSizes[i]--;\r\n            clusterSizes[nearestClusterIndex]++;\r\n        }\r\n    }\r\n\r\n    return bestClusterAssignments;\r\n}\r\n\r\nfunction initializeCentroids(data, k) {\r\n    const centroids = [data[Math.floor(Math.random() * data.length)]]; // Start with one random centroid\r\n    for (let i = 1; i < k; i++) {\r\n        const distances = data.map(point => Math.min(...centroids.map(centroid => euclideanDistance(point, centroid))));\r\n        const totalDistance = distances.reduce((a, b) => a + b, 0);\r\n        const probabilities = distances.map(distance => distance / totalDistance);\r\n        const cumulativeProbabilities = probabilities.reduce((acc, prob, index) => {\r\n            if (index === 0) acc.push(prob);\r\n            else acc.push(acc[index - 1] + prob);\r\n            return acc;\r\n        }, []);\r\n        \r\n        const rand = Math.random();\r\n        const nextCentroidIndex = cumulativeProbabilities.findIndex(cumProb => cumProb >= rand);\r\n        centroids.push(data[nextCentroidIndex]);\r\n    }\r\n    return centroids;\r\n}\r\n\r\nfunction assignPointsToCentroids(data, centroids) {\r\n    const clusterAssignments = [];\r\n    for (const point of data) {\r\n        let minDistance = Infinity;\r\n        let closestCentroidIndex = -1;\r\n        for (let i = 0; i < centroids.length; i++) {\r\n            const distance = euclideanDistance(point, centroids[i]);\r\n            if (distance < minDistance) {\r\n                minDistance = distance;\r\n                closestCentroidIndex = i;\r\n            }\r\n        }\r\n        clusterAssignments.push(closestCentroidIndex);\r\n    }\r\n    return clusterAssignments;\r\n}\r\n\r\nfunction updateCentroids(data, clusterAssignments, k) {\r\n    const newCentroids = new Array(k).fill(0).map(() => new Array(data[0].length).fill(0));\r\n    const clusterCounts = new Array(k).fill(0);\r\n\r\n    for (let i = 0; i < data.length; i++) {\r\n        const clusterIndex = clusterAssignments[i];\r\n        for (let j = 0; j < data[i].length; j++) {\r\n            newCentroids[clusterIndex][j] += data[i][j];\r\n        }\r\n        clusterCounts[clusterIndex]++;\r\n    }\r\n\r\n    for (let i = 0; i < k; i++) {\r\n        if (clusterCounts[i] !== 0) {\r\n            for (let j = 0; j < newCentroids[i].length; j++) {\r\n                newCentroids[i][j] /= clusterCounts[i];\r\n            }\r\n        } else {\r\n            // If no points were assigned to this cluster, keep the centroid unchanged\r\n        }\r\n    }\r\n\r\n    return newCentroids;\r\n}\r\n\r\nfunction centroidsEqual(centroids1, centroids2) {\r\n    for (let i = 0; i < centroids1.length; i++) {\r\n        for (let j = 0; j < centroids1[i].length; j++) {\r\n            if (centroids1[i][j] !== centroids2[i][j]) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction euclideanDistance(point1, point2) {\r\n    let sum = 0;\r\n    for (let i = 0; i < point1.length; i++) {\r\n        sum += (point1[i] - point2[i]) ** 2;\r\n    }\r\n    return Math.sqrt(sum);\r\n}\r\n\r\nfunction calculateTotalDistance(data, centroids, clusterAssignments) {\r\n    let totalDistance = 0;\r\n    for (let i = 0; i < data.length; i++) {\r\n        totalDistance += euclideanDistance(data[i], centroids[clusterAssignments[i]]);\r\n    }\r\n    return totalDistance;\r\n}\r\n\r\nconst processResult = (result) => {\r\n    const artistsId = new Set();\r\n    const relationships = [];\r\n    const artists = [];\r\n    \r\n    result.records.forEach(record => {\r\n        const relationship = record.get('p');\r\n\r\n        const startData = relationship.start.properties;\r\n        const endData = relationship.end.properties;\r\n        const relationshipData = relationship.segments[0].relationship.properties;\r\n        const relation = new exhibited_with(startData, endData, relationshipData);\r\n        \r\n        relationships.push(relation);\r\n    \r\n        // Check if the artist with the same ID hasn't been created yet\r\n        const artistId = startData.id;\r\n        if (!artistsId.has(artistId)) {\r\n            const artist = new Artist(startData);\r\n            artistsId.add(artistId);\r\n            artists.push(artist);\r\n            // Store the artist object as needed\r\n        }\r\n    \r\n        const otherArtistId = endData.id;\r\n        if (!artistsId.has(otherArtistId)) {\r\n            const otherArtist = new Artist(endData);\r\n            artistsId.add(otherArtistId);\r\n            artists.push(otherArtist);\r\n        }\r\n    });\r\n\r\n    return [artists, relationships];\r\n};\r\n\r\nfunction removeEmptyClusters(clusteredArtists) {\r\n    // Remove empty clusters and reassign IDs\r\n    const nonEmptyClusters = clusteredArtists.filter(cluster => cluster.length > 0);\r\n    const newClusterMap = new Map();\r\n\r\n    nonEmptyClusters.forEach((cluster, newIndex) => {\r\n        cluster.forEach(artist => {\r\n            newClusterMap.set(artist.id, newIndex);\r\n        });\r\n    });\r\n\r\n    const newClusteredArtists = Array.from({ length: nonEmptyClusters.length }, () => []);\r\n\r\n    clusteredArtists.forEach(cluster => {\r\n        cluster.forEach(artist => {\r\n            const newClusterId = newClusterMap.get(artist.id);\r\n            newClusteredArtists[newClusterId].push(artist);\r\n            artist.cluster = newClusterId; // Update the artist's cluster ID\r\n        });\r\n    });\r\n\r\n    return newClusteredArtists;\r\n}\r\n\r\n\r\n\r\nconst findAllNationalityTechniqueAmount = async (minLimit, maxLimit) => {\r\n    const query = `\r\n        MATCH (a:Artist)\r\n        WHERE a.artForms <> [] AND a.country <> '\\\\N' AND a.TotalExhibitedArtworks >= $minLimit AND a.TotalExhibitedArtworks <= $maxLimit\r\n        WITH a\r\n        WITH collect(a) AS selectedArtists\r\n\r\n        UNWIND selectedArtists AS a\r\n        MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\r\n        WHERE b IN selectedArtists\r\n        RETURN p\r\n    `;\r\n    return streamQuery(query, { minLimit: parseInt(minLimit), maxLimit: parseInt(maxLimit) });\r\n};\r\n\r\nconst findAllBirthcountryTechniqueAmount = async (minLimit, maxLimit) => {\r\n    const query = `\r\n        MATCH (a:Artist)\r\n        WHERE a.artForms <> [] AND a.birthCountry <> '\\\\N' AND a.TotalExhibitedArtworks >= $minLimit AND a.TotalExhibitedArtworks <= $maxLimit\r\n        WITH a\r\n        WITH collect(a) AS selectedArtists\r\n\r\n        UNWIND selectedArtists AS a\r\n        MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\r\n        WHERE b IN selectedArtists\r\n        RETURN p\r\n    `;\r\n    return streamQuery(query, { minLimit: parseInt(minLimit), maxLimit: parseInt(maxLimit) });\r\n};\r\n\r\nconst findAllDeathcountryTechniqueAmount = async (minLimit, maxLimit) => {\r\n    const query = `\r\n        MATCH (a:Artist)\r\n        WHERE a.artForms <> [] AND a.deathCountry <> '\\\\N' AND a.TotalExhibitedArtworks >= $minLimit AND a.TotalExhibitedArtworks <= $maxLimit\r\n        WITH a\r\n        WITH collect(a) AS selectedArtists\r\n\r\n        UNWIND selectedArtists AS a\r\n        MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\r\n        WHERE b IN selectedArtists\r\n        RETURN p\r\n    `;\r\n    return streamQuery(query, { minLimit: parseInt(minLimit), maxLimit: parseInt(maxLimit) });\r\n};\r\n\r\nconst findAllMostExhibitedInTechniqueAmount = async (minLimit, maxLimit) => {\r\n    const query = `\r\n        MATCH (a:Artist)\r\n        WHERE a.artForms <> [] AND a.mostExhibitedInCountry <> '\\\\N' AND a.unclearMostExhibitedInCountry = FALSE AND a.TotalExhibitedArtworks >= $minLimit AND a.TotalExhibitedArtworks <= $maxLimit\r\n        WITH a\r\n        WITH collect(a) AS selectedArtists\r\n\r\n        UNWIND selectedArtists AS a\r\n        MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\r\n        WHERE b IN selectedArtists\r\n        RETURN p\r\n    `;\r\n    return streamQuery(query, { minLimit: parseInt(minLimit), maxLimit: parseInt(maxLimit) });\r\n};\r\nconst streamQuery = async (query, params) => {\r\n    const { session } = require('../db');\r\n    return await dbSemaphore.runExclusive(async () => {\r\n        const result = session.run(query, params);\r\n\r\n        const artistsId = new Set();\r\n        const relationships = [];\r\n        const artists = [];\r\n\r\n        await new Promise((resolve, reject) => {\r\n            result.subscribe({\r\n                onNext: record => {\r\n                    const relationship = record.get('p');\r\n\r\n                    const startData = relationship.start.properties;\r\n                    const endData = relationship.end.properties;\r\n                    const relationshipData = relationship.segments[0].relationship.properties;\r\n                    const relation = new exhibited_with(startData, endData, relationshipData);\r\n\r\n                    relationships.push(relation);\r\n\r\n                    const artistId = startData.id;\r\n                    if (!artistsId.has(artistId)) {\r\n                        const artist = new Artist(startData);\r\n                        artistsId.add(artistId);\r\n                        artists.push(artist);\r\n                    }\r\n\r\n                    const otherArtistId = endData.id;\r\n                    if (!artistsId.has(otherArtistId)) {\r\n                        const otherArtist = new Artist(endData);\r\n                        artistsId.add(otherArtistId);\r\n                        artists.push(otherArtist);\r\n                    }\r\n                },\r\n                onCompleted: () => {\r\n                    resolve([artists, relationships]);\r\n                },\r\n                onError: error => {\r\n                    reject(error);\r\n                },\r\n            });\r\n        });\r\n\r\n        return [artists, relationships];\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\nasync function spectralClusteringNationality(min, max, k) {\r\n    try {\r\n        // To only retrieve the artists, when min/max got changed\r\n        if(latestMinLimit!=min || latestMaxLimit!=max  || latestValue !== 'nationality')    {\r\n            const [artists, relationships] = await findAllNationalityTechniqueAmount(min, max);\r\n            latestArtists = artists;\r\n            latestRelationships = relationships;\r\n            latestMinLimit=min;\r\n            latestMaxLimit=max;\r\n            latestValue = 'nationality';\r\n            console.log( latestMinLimit, latestMaxLimit)\r\n        }\r\n        const artistsWithClusters= await spectralClustering(latestArtists, latestRelationships, k);\r\n\r\n        return artistsWithClusters;\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n}\r\nasync function spectralClusteringBirthcountry(min, max, k) {\r\n    try {\r\n        if(latestMinLimit!=min || latestMaxLimit!=max  || latestValue !== 'birthcountry')    {\r\n            const [artists, relationships] = await findAllBirthcountryTechniqueAmount(min, max);\r\n            latestArtists = artists;\r\n            latestRelationships = relationships;\r\n            latestMinLimit=min;\r\n            latestMaxLimit=max;\r\n            latestValue = 'birthcountry';\r\n        }\r\n        const artistsWithClusters= await spectralClustering(latestArtists, latestRelationships, k);\r\n        return artistsWithClusters;\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n}\r\nasync function spectralClusteringDeathcountry(min, max, k) \r\n{\r\n    try {\r\n        if(latestMinLimit!=min || latestMaxLimit!=max  || latestValue !== 'deathcountry')    {\r\n            const [artists, relationships] = await findAllDeathcountryTechniqueAmount(min, max);\r\n            latestArtists = artists;\r\n            latestRelationships = relationships;\r\n            latestMinLimit=min;\r\n            latestMaxLimit=max;\r\n            latestValue = 'deathcountry';\r\n        }\r\n        const artistsWithClusters= await spectralClustering(latestArtists, latestRelationships, k);\r\n        return artistsWithClusters;\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n}\r\nasync function spectralClusteringMostExhibited(min, max, k) {\r\n    try {\r\n        if(latestMinLimit!=min || latestMaxLimit!=max  || latestValue !== 'mostexhibited')    {\r\n            const [artists, relationships] = await findAllMostExhibitedInTechniqueAmount(min, max);\r\n            latestArtists = artists;\r\n            latestRelationships = relationships;\r\n            latestMinLimit=min;\r\n            latestMaxLimit=max;\r\n            latestValue = 'mostexhibited';\r\n        }\r\n        const artistsWithClusters= await spectralClustering(latestArtists, latestRelationships, k);\r\n        return artistsWithClusters;\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nmodule.exports = {\r\n    findAllNationalityTechnique,\r\n    findAllBirthcountryTechnique,\r\n    findAllDeathcountryTechnique,\r\n    findAllMostExhibitedInTechnique,\r\n    findAllTechniques, \r\n    findAllNationalityTechniqueAmount, \r\n    findAllBirthcountryTechniqueAmount,\r\n    findAllDeathcountryTechniqueAmount,\r\n    findAllMostExhibitedInTechniqueAmount,\r\n    spectralClusteringNationality,\r\n    spectralClusteringBirthcountry,\r\n    spectralClusteringDeathcountry,\r\n    spectralClusteringMostExhibited\r\n};"],"mappings":"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","ignoreList":[]}},"mtime":1716382338119},"{\"assumptions\":{},\"sourceRoot\":\"C:\\\\Users\\\\karlh\\\\OneDrive\\\\Dokumente\\\\Studium\\\\Projekt\\\\BachelorProject\\\\backend\\\\src\\\\\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"C:\\\\Users\\\\karlh\\\\OneDrive\\\\Dokumente\\\\Studium\\\\Projekt\\\\BachelorProject\\\\backend\",\"filename\":\"C:\\\\Users\\\\karlh\\\\OneDrive\\\\Dokumente\\\\Studium\\\\Projekt\\\\BachelorProject\\\\backend\\\\src\\\\semaphoreHandler.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\karlh\\\\OneDrive\\\\Dokumente\\\\Studium\\\\Projekt\\\\BachelorProject\\\\backend\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-unicode-sets-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-class-static-block\",\"visitor\":{\"ClassBody\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-private-property-in-object\",\"visitor\":{\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":\"#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error\"},\"externalDependencies\":[]},{\"key\":\"transform-class-properties\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{\"loose\":\"#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error\"},\"externalDependencies\":[]},{\"key\":\"transform-private-methods\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{\"loose\":\"#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error\"},\"externalDependencies\":[]},{\"key\":\"transform-numeric-separator\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"BigIntLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-logical-assignment-operators\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-nullish-coalescing-operator\",\"visitor\":{\"LogicalExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-optional-chaining\",\"visitor\":{\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-json-strings\",\"visitor\":{\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-optional-catch-binding\",\"visitor\":{\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-async-generator-functions\",\"visitor\":{\"Program\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-object-rest-spread\",\"visitor\":{\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"DoWhileStatement\":{\"exit\":[null]},\"ForInStatement\":{\"exit\":[null]},\"ForStatement\":{\"exit\":[null]},\"WhileStatement\":{\"exit\":[null]},\"ForOfStatement\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null,null]},\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"StaticBlock\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-regenerator\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"CallExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-export-namespace-from\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"CallExpression\":{\"enter\":[null]},\"ImportExpression\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-dynamic-import\",\"visitor\":{\"Program\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-top-level-await\",\"visitor\":{\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-import-meta\",\"visitor\":{\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]}],\"presets\":[]}:7.24.4:development":{"value":{"code":"\"use strict\";\n\nvar _require = require('async-mutex'),\n  Semaphore = _require.Semaphore;\n\n// Create a semaphore with a count of 1 to act like a mutex\nvar dbSemaphore = new Semaphore(1);\nmodule.exports = dbSemaphore;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVxdWlyZSIsInJlcXVpcmUiLCJTZW1hcGhvcmUiLCJkYlNlbWFwaG9yZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IkM6XFxVc2Vyc1xca2FybGhcXE9uZURyaXZlXFxEb2t1bWVudGVcXFN0dWRpdW1cXFByb2pla3RcXEJhY2hlbG9yUHJvamVjdFxcYmFja2VuZFxcc3JjXFwiLCJzb3VyY2VzIjpbInNlbWFwaG9yZUhhbmRsZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBTZW1hcGhvcmUgfSA9IHJlcXVpcmUoJ2FzeW5jLW11dGV4Jyk7XHJcblxyXG4vLyBDcmVhdGUgYSBzZW1hcGhvcmUgd2l0aCBhIGNvdW50IG9mIDEgdG8gYWN0IGxpa2UgYSBtdXRleFxyXG5jb25zdCBkYlNlbWFwaG9yZSA9IG5ldyBTZW1hcGhvcmUoMSk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGRiU2VtYXBob3JlO1xyXG4iXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBQUEsUUFBQSxHQUFzQkMsT0FBTyxDQUFDLGFBQWEsQ0FBQztFQUFwQ0MsU0FBUyxHQUFBRixRQUFBLENBQVRFLFNBQVM7O0FBRWpCO0FBQ0EsSUFBTUMsV0FBVyxHQUFHLElBQUlELFNBQVMsQ0FBQyxDQUFDLENBQUM7QUFFcENFLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHRixXQUFXIiwiaWdub3JlTGlzdCI6W119","map":{"version":3,"names":["_require","require","Semaphore","dbSemaphore","module","exports"],"sourceRoot":"C:\\Users\\karlh\\OneDrive\\Dokumente\\Studium\\Projekt\\BachelorProject\\backend\\src\\","sources":["semaphoreHandler.js"],"sourcesContent":["const { Semaphore } = require('async-mutex');\r\n\r\n// Create a semaphore with a count of 1 to act like a mutex\r\nconst dbSemaphore = new Semaphore(1);\r\n\r\nmodule.exports = dbSemaphore;\r\n"],"mappings":";;AAAA,IAAAA,QAAA,GAAsBC,OAAO,CAAC,aAAa,CAAC;EAApCC,SAAS,GAAAF,QAAA,CAATE,SAAS;;AAEjB;AACA,IAAMC,WAAW,GAAG,IAAID,SAAS,CAAC,CAAC,CAAC;AAEpCE,MAAM,CAACC,OAAO,GAAGF,WAAW","ignoreList":[]}},"mtime":1715261084179},"{\"assumptions\":{},\"sourceRoot\":\"C:\\\\Users\\\\Luisa Müller\\\\Documents\\\\Studium\\\\Projekt\\\\BachelorProject\\\\backend\\\\\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"C:\\\\Users\\\\Luisa Müller\\\\Documents\\\\Studium\\\\Projekt\\\\BachelorProject\\\\backend\",\"filename\":\"C:\\\\Users\\\\Luisa Müller\\\\Documents\\\\Studium\\\\Projekt\\\\BachelorProject\\\\backend\\\\app.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\Luisa Müller\\\\Documents\\\\Studium\\\\Projekt\\\\BachelorProject\\\\backend\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-unicode-sets-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-class-static-block\",\"visitor\":{\"ClassBody\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-private-property-in-object\",\"visitor\":{\"BinaryExpression\":{\"enter\":[null]}},\"options\":{\"loose\":\"#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error\"},\"externalDependencies\":[]},{\"key\":\"transform-class-properties\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{\"loose\":\"#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error\"},\"externalDependencies\":[]},{\"key\":\"transform-private-methods\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{\"loose\":\"#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error\"},\"externalDependencies\":[]},{\"key\":\"transform-numeric-separator\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"BigIntLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-logical-assignment-operators\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-nullish-coalescing-operator\",\"visitor\":{\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-optional-chaining\",\"visitor\":{\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-json-strings\",\"visitor\":{\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-optional-catch-binding\",\"visitor\":{\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-async-generator-functions\",\"visitor\":{\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-object-rest-spread\",\"visitor\":{\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"DoWhileStatement\":{\"exit\":[null]},\"ForInStatement\":{\"exit\":[null]},\"ForStatement\":{\"exit\":[null]},\"WhileStatement\":{\"exit\":[null]},\"ForOfStatement\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null,null]},\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"StaticBlock\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-regenerator\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"CallExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-export-namespace-from\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"CallExpression\":{\"enter\":[null]},\"ImportExpression\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-dynamic-import\",\"visitor\":{\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-top-level-await\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-import-meta\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]}],\"presets\":[]}:7.24.4:development":{"value":{"code":"\"use strict\";\n\nvar _express = _interopRequireDefault(require(\"express\"));\nvar _cors = _interopRequireDefault(require(\"cors\"));\nvar _artist = _interopRequireDefault(require(\"./src/routes/artist\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\nrequire('dotenv').config();\nvar app = (0, _express[\"default\"])();\napp.use((0, _cors[\"default\"])({\n  origin: 'http://localhost:4200'\n}));\napp.use(_express[\"default\"].json());\napp.use(_express[\"default\"].urlencoded({\n  extended: true\n}));\napp.use('/artist/', _artist[\"default\"]);\napp.listen(process.env.PORT, function () {\n  return console.log(\"Server running on port \".concat(process.env.PORT, \" \\n Press CTRL-C to stop\\n\"));\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZXhwcmVzcyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2NvcnMiLCJfYXJ0aXN0Iiwib2JqIiwiX19lc01vZHVsZSIsImNvbmZpZyIsImFwcCIsImV4cHJlc3MiLCJ1c2UiLCJjb3JzIiwib3JpZ2luIiwianNvbiIsInVybGVuY29kZWQiLCJleHRlbmRlZCIsImFydGlzdCIsImxpc3RlbiIsInByb2Nlc3MiLCJlbnYiLCJQT1JUIiwiY29uc29sZSIsImxvZyIsImNvbmNhdCJdLCJzb3VyY2VSb290IjoiQzpcXFVzZXJzXFxMdWlzYSBNw7xsbGVyXFxEb2N1bWVudHNcXFN0dWRpdW1cXFByb2pla3RcXEJhY2hlbG9yUHJvamVjdFxcYmFja2VuZFxcIiwic291cmNlcyI6WyJhcHAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGV4cHJlc3MgZnJvbSAnZXhwcmVzcydcclxuaW1wb3J0IGNvcnMgZnJvbSAnY29ycydcclxuaW1wb3J0IGFydGlzdCBmcm9tICcuL3NyYy9yb3V0ZXMvYXJ0aXN0J1xyXG5yZXF1aXJlKCdkb3RlbnYnKS5jb25maWcoKVxyXG5cclxuY29uc3QgYXBwID0gZXhwcmVzcygpXHJcbmFwcC51c2UoY29ycyh7IG9yaWdpbjogJ2h0dHA6Ly9sb2NhbGhvc3Q6NDIwMCcgfSkpO1xyXG5hcHAudXNlKGV4cHJlc3MuanNvbigpKVxyXG5hcHAudXNlKGV4cHJlc3MudXJsZW5jb2RlZCh7IGV4dGVuZGVkOiB0cnVlIH0pKVxyXG5hcHAudXNlKCcvYXJ0aXN0LycsIGFydGlzdClcclxuXHJcbmFwcC5saXN0ZW4ocHJvY2Vzcy5lbnYuUE9SVCwgKCkgPT4gY29uc29sZS5sb2coYFNlcnZlciBydW5uaW5nIG9uIHBvcnQgJHtwcm9jZXNzLmVudi5QT1JUfSBcXG4gUHJlc3MgQ1RSTC1DIHRvIHN0b3BcXG5gKSk7XHJcbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFBQSxRQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxLQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRSxPQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFBd0MsU0FBQUQsdUJBQUFJLEdBQUEsV0FBQUEsR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUEsR0FBQUQsR0FBQSxnQkFBQUEsR0FBQTtBQUN4Q0gsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDSyxNQUFNLENBQUMsQ0FBQztBQUUxQixJQUFNQyxHQUFHLEdBQUcsSUFBQUMsbUJBQU8sRUFBQyxDQUFDO0FBQ3JCRCxHQUFHLENBQUNFLEdBQUcsQ0FBQyxJQUFBQyxnQkFBSSxFQUFDO0VBQUVDLE1BQU0sRUFBRTtBQUF3QixDQUFDLENBQUMsQ0FBQztBQUNsREosR0FBRyxDQUFDRSxHQUFHLENBQUNELG1CQUFPLENBQUNJLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDdkJMLEdBQUcsQ0FBQ0UsR0FBRyxDQUFDRCxtQkFBTyxDQUFDSyxVQUFVLENBQUM7RUFBRUMsUUFBUSxFQUFFO0FBQUssQ0FBQyxDQUFDLENBQUM7QUFDL0NQLEdBQUcsQ0FBQ0UsR0FBRyxDQUFDLFVBQVUsRUFBRU0sa0JBQU0sQ0FBQztBQUUzQlIsR0FBRyxDQUFDUyxNQUFNLENBQUNDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDQyxJQUFJLEVBQUU7RUFBQSxPQUFNQyxPQUFPLENBQUNDLEdBQUcsMkJBQUFDLE1BQUEsQ0FBMkJMLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDQyxJQUFJLCtCQUE0QixDQUFDO0FBQUEsRUFBQyIsImlnbm9yZUxpc3QiOltdfQ==","map":{"version":3,"names":["_express","_interopRequireDefault","require","_cors","_artist","obj","__esModule","config","app","express","use","cors","origin","json","urlencoded","extended","artist","listen","process","env","PORT","console","log","concat"],"sourceRoot":"C:\\Users\\Luisa Müller\\Documents\\Studium\\Projekt\\BachelorProject\\backend\\","sources":["app.js"],"sourcesContent":["import express from 'express'\r\nimport cors from 'cors'\r\nimport artist from './src/routes/artist'\r\nrequire('dotenv').config()\r\n\r\nconst app = express()\r\napp.use(cors({ origin: 'http://localhost:4200' }));\r\napp.use(express.json())\r\napp.use(express.urlencoded({ extended: true }))\r\napp.use('/artist/', artist)\r\n\r\napp.listen(process.env.PORT, () => console.log(`Server running on port ${process.env.PORT} \\n Press CTRL-C to stop\\n`));\r\n"],"mappings":";;AAAA,IAAAA,QAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,KAAA,GAAAF,sBAAA,CAAAC,OAAA;AACA,IAAAE,OAAA,GAAAH,sBAAA,CAAAC,OAAA;AAAwC,SAAAD,uBAAAI,GAAA,WAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA,gBAAAA,GAAA;AACxCH,OAAO,CAAC,QAAQ,CAAC,CAACK,MAAM,CAAC,CAAC;AAE1B,IAAMC,GAAG,GAAG,IAAAC,mBAAO,EAAC,CAAC;AACrBD,GAAG,CAACE,GAAG,CAAC,IAAAC,gBAAI,EAAC;EAAEC,MAAM,EAAE;AAAwB,CAAC,CAAC,CAAC;AAClDJ,GAAG,CAACE,GAAG,CAACD,mBAAO,CAACI,IAAI,CAAC,CAAC,CAAC;AACvBL,GAAG,CAACE,GAAG,CAACD,mBAAO,CAACK,UAAU,CAAC;EAAEC,QAAQ,EAAE;AAAK,CAAC,CAAC,CAAC;AAC/CP,GAAG,CAACE,GAAG,CAAC,UAAU,EAAEM,kBAAM,CAAC;AAE3BR,GAAG,CAACS,MAAM,CAACC,OAAO,CAACC,GAAG,CAACC,IAAI,EAAE;EAAA,OAAMC,OAAO,CAACC,GAAG,2BAAAC,MAAA,CAA2BL,OAAO,CAACC,GAAG,CAACC,IAAI,+BAA4B,CAAC;AAAA,EAAC","ignoreList":[]}},"mtime":1716656617585},"{\"assumptions\":{},\"sourceRoot\":\"C:\\\\Users\\\\Luisa Müller\\\\Documents\\\\Studium\\\\Projekt\\\\BachelorProject\\\\backend\\\\src\\\\routes\\\\\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"C:\\\\Users\\\\Luisa Müller\\\\Documents\\\\Studium\\\\Projekt\\\\BachelorProject\\\\backend\",\"filename\":\"C:\\\\Users\\\\Luisa Müller\\\\Documents\\\\Studium\\\\Projekt\\\\BachelorProject\\\\backend\\\\src\\\\routes\\\\artist.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\Luisa Müller\\\\Documents\\\\Studium\\\\Projekt\\\\BachelorProject\\\\backend\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-unicode-sets-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-class-static-block\",\"visitor\":{\"ClassBody\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-private-property-in-object\",\"visitor\":{\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":\"#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error\"},\"externalDependencies\":[]},{\"key\":\"transform-class-properties\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{\"loose\":\"#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error\"},\"externalDependencies\":[]},{\"key\":\"transform-private-methods\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{\"loose\":\"#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error\"},\"externalDependencies\":[]},{\"key\":\"transform-numeric-separator\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"BigIntLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-logical-assignment-operators\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-nullish-coalescing-operator\",\"visitor\":{\"LogicalExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-optional-chaining\",\"visitor\":{\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-json-strings\",\"visitor\":{\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-optional-catch-binding\",\"visitor\":{\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-async-generator-functions\",\"visitor\":{\"Program\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-object-rest-spread\",\"visitor\":{\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"DoWhileStatement\":{\"exit\":[null]},\"ForInStatement\":{\"exit\":[null]},\"ForStatement\":{\"exit\":[null]},\"WhileStatement\":{\"exit\":[null]},\"ForOfStatement\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null,null]},\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"StaticBlock\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-regenerator\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"CallExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-export-namespace-from\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"CallExpression\":{\"enter\":[null]},\"ImportExpression\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-dynamic-import\",\"visitor\":{\"Program\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-top-level-await\",\"visitor\":{\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-import-meta\",\"visitor\":{\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]}],\"presets\":[]}:7.24.4:development":{"value":{"code":"\"use strict\";\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _express = require(\"express\");\nvar _artist = _interopRequireDefault(require(\"../models/artist\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n// ROUTING\n/* app.METHOD(PATH, HANDLER)\r\nWhere:\r\n- `app` is an instance of `express`.\r\n- `METHOD` is an [HTTP request method], in lowercase.\r\n- `PATH` is a path on the server.\r\n- `HANDLER` is the function executed when the route is matched.\r\n*/\n\nvar artist = (0, _express.Router)();\nartist.get('/nationality/technique', /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(req, res) {\n    var result;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _artist[\"default\"].findAllNationalityTechnique();\n        case 3:\n          result = _context.sent;\n          res.json(result);\n          _context.next = 11;\n          break;\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          res.status(500).json({\n            message: \"Internal server error\"\n          });\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[0, 7]]);\n  }));\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}());\nartist.get('/birthcountry/technique', /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(req, res) {\n    var result;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return _artist[\"default\"].findAllBirthcountryTechnique();\n        case 3:\n          result = _context2.sent;\n          res.json(result);\n          _context2.next = 11;\n          break;\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.error(_context2.t0);\n          res.status(500).json({\n            message: \"Internal server error\"\n          });\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2, null, [[0, 7]]);\n  }));\n  return function (_x3, _x4) {\n    return _ref2.apply(this, arguments);\n  };\n}());\nartist.get('/deathcountry/technique', /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(req, res) {\n    var result;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return _artist[\"default\"].findAllDeathcountryTechnique();\n        case 3:\n          result = _context3.sent;\n          res.json(result);\n          _context3.next = 11;\n          break;\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error(_context3.t0);\n          res.status(500).json({\n            message: \"Internal server error\"\n          });\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3, null, [[0, 7]]);\n  }));\n  return function (_x5, _x6) {\n    return _ref3.apply(this, arguments);\n  };\n}());\nartist.get('/mostexhibitedincountry/technique', /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(req, res) {\n    var result;\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return _artist[\"default\"].findAllMostExhibitedInTechnique();\n        case 3:\n          result = _context4.sent;\n          res.json(result);\n          _context4.next = 11;\n          break;\n        case 7:\n          _context4.prev = 7;\n          _context4.t0 = _context4[\"catch\"](0);\n          console.error(_context4.t0);\n          res.status(500).json({\n            message: \"Internal server error\"\n          });\n        case 11:\n        case \"end\":\n          return _context4.stop();\n      }\n    }, _callee4, null, [[0, 7]]);\n  }));\n  return function (_x7, _x8) {\n    return _ref4.apply(this, arguments);\n  };\n}());\nartist.get('/technique', /*#__PURE__*/function () {\n  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(req, res) {\n    var result;\n    return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n      while (1) switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return _artist[\"default\"].findAllTechniques();\n        case 3:\n          result = _context5.sent;\n          res.json(result);\n          _context5.next = 11;\n          break;\n        case 7:\n          _context5.prev = 7;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.error(_context5.t0);\n          res.status(500).json({\n            message: \"Internal server error\"\n          });\n        case 11:\n        case \"end\":\n          return _context5.stop();\n      }\n    }, _callee5, null, [[0, 7]]);\n  }));\n  return function (_x9, _x10) {\n    return _ref5.apply(this, arguments);\n  };\n}());\nartist.get('/amount/nationality/technique', /*#__PURE__*/function () {\n  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(req, res) {\n    var minLimit, maxLimit, result;\n    return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n      while (1) switch (_context6.prev = _context6.next) {\n        case 0:\n          minLimit = req.query.minLimit;\n          maxLimit = req.query.maxLimit;\n          _context6.prev = 2;\n          _context6.next = 5;\n          return _artist[\"default\"].findAllNationalityTechniqueAmount(minLimit, maxLimit);\n        case 5:\n          result = _context6.sent;\n          res.json(result);\n          _context6.next = 13;\n          break;\n        case 9:\n          _context6.prev = 9;\n          _context6.t0 = _context6[\"catch\"](2);\n          console.error(_context6.t0);\n          res.status(500).json({\n            message: \"Internal server error\"\n          });\n        case 13:\n        case \"end\":\n          return _context6.stop();\n      }\n    }, _callee6, null, [[2, 9]]);\n  }));\n  return function (_x11, _x12) {\n    return _ref6.apply(this, arguments);\n  };\n}());\nartist.get('/amount/birthcountry/technique', /*#__PURE__*/function () {\n  var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(req, res) {\n    var minLimit, maxLimit, result;\n    return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n      while (1) switch (_context7.prev = _context7.next) {\n        case 0:\n          minLimit = req.query.minLimit;\n          maxLimit = req.query.maxLimit;\n          _context7.prev = 2;\n          _context7.next = 5;\n          return _artist[\"default\"].findAllBirthcountryTechniqueAmount(minLimit, maxLimit);\n        case 5:\n          result = _context7.sent;\n          res.json(result);\n          _context7.next = 13;\n          break;\n        case 9:\n          _context7.prev = 9;\n          _context7.t0 = _context7[\"catch\"](2);\n          console.error(_context7.t0);\n          res.status(500).json({\n            message: \"Internal server error\"\n          });\n        case 13:\n        case \"end\":\n          return _context7.stop();\n      }\n    }, _callee7, null, [[2, 9]]);\n  }));\n  return function (_x13, _x14) {\n    return _ref7.apply(this, arguments);\n  };\n}());\nartist.get('/amount/deathcountry/technique', /*#__PURE__*/function () {\n  var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(req, res) {\n    var minLimit, maxLimit, result;\n    return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n      while (1) switch (_context8.prev = _context8.next) {\n        case 0:\n          minLimit = req.query.minLimit;\n          maxLimit = req.query.maxLimit;\n          _context8.prev = 2;\n          _context8.next = 5;\n          return _artist[\"default\"].findAllDeathcountryTechniqueAmount(minLimit, maxLimit);\n        case 5:\n          result = _context8.sent;\n          res.json(result);\n          _context8.next = 13;\n          break;\n        case 9:\n          _context8.prev = 9;\n          _context8.t0 = _context8[\"catch\"](2);\n          console.error(_context8.t0);\n          res.status(500).json({\n            message: \"Internal server error\"\n          });\n        case 13:\n        case \"end\":\n          return _context8.stop();\n      }\n    }, _callee8, null, [[2, 9]]);\n  }));\n  return function (_x15, _x16) {\n    return _ref8.apply(this, arguments);\n  };\n}());\nartist.get('/amount/mostexhibitedincountry/technique', /*#__PURE__*/function () {\n  var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(req, res) {\n    var minLimit, maxLimit, result;\n    return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n      while (1) switch (_context9.prev = _context9.next) {\n        case 0:\n          minLimit = req.query.minLimit;\n          maxLimit = req.query.maxLimit;\n          _context9.prev = 2;\n          _context9.next = 5;\n          return _artist[\"default\"].findAllMostExhibitedInTechniqueAmount(minLimit, maxLimit);\n        case 5:\n          result = _context9.sent;\n          res.json(result);\n          _context9.next = 13;\n          break;\n        case 9:\n          _context9.prev = 9;\n          _context9.t0 = _context9[\"catch\"](2);\n          console.error(_context9.t0);\n          res.status(500).json({\n            message: \"Internal server error\"\n          });\n        case 13:\n        case \"end\":\n          return _context9.stop();\n      }\n    }, _callee9, null, [[2, 9]]);\n  }));\n  return function (_x17, _x18) {\n    return _ref9.apply(this, arguments);\n  };\n}());\nartist.get('/cluster/nationality', /*#__PURE__*/function () {\n  var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(req, res) {\n    var minLimit, maxLimit, k, result;\n    return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n      while (1) switch (_context10.prev = _context10.next) {\n        case 0:\n          minLimit = req.query.minLimit;\n          maxLimit = req.query.maxLimit;\n          k = parseInt(req.query.k); // Parse k parameter as integer\n          _context10.prev = 3;\n          _context10.next = 6;\n          return _artist[\"default\"].spectralClusteringNationality(minLimit, maxLimit, k);\n        case 6:\n          result = _context10.sent;\n          res.json(result);\n          _context10.next = 14;\n          break;\n        case 10:\n          _context10.prev = 10;\n          _context10.t0 = _context10[\"catch\"](3);\n          console.error(_context10.t0);\n          res.status(500).json({\n            message: \"Internal server error\"\n          });\n        case 14:\n        case \"end\":\n          return _context10.stop();\n      }\n    }, _callee10, null, [[3, 10]]);\n  }));\n  return function (_x19, _x20) {\n    return _ref10.apply(this, arguments);\n  };\n}());\nartist.get('/cluster/birthcountry', /*#__PURE__*/function () {\n  var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(req, res) {\n    var minLimit, maxLimit, k, result;\n    return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n      while (1) switch (_context11.prev = _context11.next) {\n        case 0:\n          minLimit = req.query.minLimit;\n          maxLimit = req.query.maxLimit;\n          k = parseInt(req.query.k); // Parse k parameter as integer\n          _context11.prev = 3;\n          _context11.next = 6;\n          return _artist[\"default\"].spectralClusteringBirthcountry(minLimit, maxLimit, k);\n        case 6:\n          result = _context11.sent;\n          res.json(result);\n          _context11.next = 14;\n          break;\n        case 10:\n          _context11.prev = 10;\n          _context11.t0 = _context11[\"catch\"](3);\n          console.error(_context11.t0);\n          res.status(500).json({\n            message: \"Internal server error\"\n          });\n        case 14:\n        case \"end\":\n          return _context11.stop();\n      }\n    }, _callee11, null, [[3, 10]]);\n  }));\n  return function (_x21, _x22) {\n    return _ref11.apply(this, arguments);\n  };\n}());\nartist.get('/cluster/deathcountry', /*#__PURE__*/function () {\n  var _ref12 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(req, res) {\n    var minLimit, maxLimit, k, result;\n    return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n      while (1) switch (_context12.prev = _context12.next) {\n        case 0:\n          minLimit = req.query.minLimit;\n          maxLimit = req.query.maxLimit;\n          k = parseInt(req.query.k); // Parse k parameter as integer\n          _context12.prev = 3;\n          _context12.next = 6;\n          return _artist[\"default\"].spectralClusteringDeathcountry(minLimit, maxLimit, k);\n        case 6:\n          result = _context12.sent;\n          res.json(result);\n          _context12.next = 14;\n          break;\n        case 10:\n          _context12.prev = 10;\n          _context12.t0 = _context12[\"catch\"](3);\n          console.error(_context12.t0);\n          res.status(500).json({\n            message: \"Internal server error\"\n          });\n        case 14:\n        case \"end\":\n          return _context12.stop();\n      }\n    }, _callee12, null, [[3, 10]]);\n  }));\n  return function (_x23, _x24) {\n    return _ref12.apply(this, arguments);\n  };\n}());\nartist.get('/cluster/mostexhibited', /*#__PURE__*/function () {\n  var _ref13 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(req, res) {\n    var minLimit, maxLimit, k, result;\n    return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n      while (1) switch (_context13.prev = _context13.next) {\n        case 0:\n          minLimit = req.query.minLimit;\n          maxLimit = req.query.maxLimit;\n          k = parseInt(req.query.k); // Parse k parameter as integer\n          _context13.prev = 3;\n          _context13.next = 6;\n          return _artist[\"default\"].spectralClusteringMostExhibited(minLimit, maxLimit, k);\n        case 6:\n          result = _context13.sent;\n          res.json(result);\n          _context13.next = 14;\n          break;\n        case 10:\n          _context13.prev = 10;\n          _context13.t0 = _context13[\"catch\"](3);\n          console.error(_context13.t0);\n          res.status(500).json({\n            message: \"Internal server error\"\n          });\n        case 14:\n        case \"end\":\n          return _context13.stop();\n      }\n    }, _callee13, null, [[3, 10]]);\n  }));\n  return function (_x25, _x26) {\n    return _ref13.apply(this, arguments);\n  };\n}());\nvar _default = exports[\"default\"] = artist;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":{"version":3,"names":["_express","require","_artist","_interopRequireDefault","obj","__esModule","_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","_catch","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","key","info","error","_asyncToGenerator","fn","self","args","arguments","apply","err","undefined","artist","Router","get","_ref","_callee","req","res","result","_callee$","_context","artistModel","findAllNationalityTechnique","json","t0","console","status","message","_x","_x2","_ref2","_callee2","_callee2$","_context2","findAllBirthcountryTechnique","_x3","_x4","_ref3","_callee3","_callee3$","_context3","findAllDeathcountryTechnique","_x5","_x6","_ref4","_callee4","_callee4$","_context4","findAllMostExhibitedInTechnique","_x7","_x8","_ref5","_callee5","_callee5$","_context5","findAllTechniques","_x9","_x10","_ref6","_callee6","minLimit","maxLimit","_callee6$","_context6","query","findAllNationalityTechniqueAmount","_x11","_x12","_ref7","_callee7","_callee7$","_context7","findAllBirthcountryTechniqueAmount","_x13","_x14","_ref8","_callee8","_callee8$","_context8","findAllDeathcountryTechniqueAmount","_x15","_x16","_ref9","_callee9","_callee9$","_context9","findAllMostExhibitedInTechniqueAmount","_x17","_x18","_ref10","_callee10","k","_callee10$","_context10","parseInt","spectralClusteringNationality","_x19","_x20","_ref11","_callee11","_callee11$","_context11","spectralClusteringBirthcountry","_x21","_x22","_ref12","_callee12","_callee12$","_context12","spectralClusteringDeathcountry","_x23","_x24","_ref13","_callee13","_callee13$","_context13","spectralClusteringMostExhibited","_x25","_x26","_default","exports"],"sourceRoot":"C:\\Users\\Luisa Müller\\Documents\\Studium\\Projekt\\BachelorProject\\backend\\src\\routes\\","sources":["artist.js"],"sourcesContent":["import { Router } from 'express';\r\nimport artistModel from '../models/artist';\r\n\r\n// ROUTING\r\n/* app.METHOD(PATH, HANDLER)\r\nWhere:\r\n- `app` is an instance of `express`.\r\n- `METHOD` is an [HTTP request method], in lowercase.\r\n- `PATH` is a path on the server.\r\n- `HANDLER` is the function executed when the route is matched.\r\n*/\r\n\r\n\r\nconst artist = Router();\r\n\r\n\r\n\r\nartist.get('/nationality/technique', async (req, res) => {\r\n    try {\r\n        const result = await artistModel.findAllNationalityTechnique();\r\n        res.json(result);\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ message: \"Internal server error\" });\r\n    }\r\n});\r\nartist.get('/birthcountry/technique', async (req, res) => {\r\n    try {\r\n        const result = await artistModel.findAllBirthcountryTechnique();\r\n        res.json(result);\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ message: \"Internal server error\" });\r\n    }\r\n});\r\nartist.get('/deathcountry/technique', async (req, res) => {\r\n    try {\r\n        const result = await artistModel.findAllDeathcountryTechnique();\r\n        res.json(result);\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ message: \"Internal server error\" });\r\n    }\r\n});\r\n\r\nartist.get('/mostexhibitedincountry/technique', async (req, res) => {\r\n    try {\r\n        const result = await artistModel.findAllMostExhibitedInTechnique();\r\n        res.json(result);\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ message: \"Internal server error\" });\r\n    }\r\n});\r\n\r\nartist.get('/technique', async (req, res) => {\r\n    try {\r\n        const result = await artistModel.findAllTechniques();\r\n        res.json(result);\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ message: \"Internal server error\" });\r\n    }\r\n});\r\nartist.get('/amount/nationality/technique', async (req, res) => {\r\n    const minLimit = req.query.minLimit;\r\n    const maxLimit = req.query.maxLimit;\r\n    \r\n    try {\r\n        const result = await artistModel.findAllNationalityTechniqueAmount(minLimit,maxLimit);\r\n        res.json(result);\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ message: \"Internal server error\" });\r\n    }\r\n});\r\n\r\nartist.get('/amount/birthcountry/technique', async (req, res) => {\r\n    const minLimit = req.query.minLimit;\r\n    const maxLimit = req.query.maxLimit;\r\n    \r\n    try {\r\n        const result = await artistModel.findAllBirthcountryTechniqueAmount(minLimit,maxLimit);\r\n        res.json(result);\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ message: \"Internal server error\" });\r\n    }\r\n});\r\nartist.get('/amount/deathcountry/technique', async (req, res) => {\r\n    const minLimit = req.query.minLimit;\r\n    const maxLimit = req.query.maxLimit;\r\n    \r\n    try {\r\n        const result = await artistModel.findAllDeathcountryTechniqueAmount(minLimit,maxLimit);\r\n        res.json(result);\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ message: \"Internal server error\" });\r\n    }\r\n});\r\nartist.get('/amount/mostexhibitedincountry/technique', async (req, res) => {\r\n    const minLimit = req.query.minLimit;\r\n    const maxLimit = req.query.maxLimit;\r\n    \r\n    try {\r\n        const result = await artistModel.findAllMostExhibitedInTechniqueAmount(minLimit,maxLimit);\r\n        res.json(result);\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ message: \"Internal server error\" });\r\n    }\r\n});\r\nartist.get('/cluster/nationality', async (req, res) => {\r\n    const minLimit = req.query.minLimit;\r\n    const maxLimit = req.query.maxLimit;\r\n    const k = parseInt(req.query.k); // Parse k parameter as integer\r\n\r\n    try {\r\n        const result = await artistModel.spectralClusteringNationality(minLimit, maxLimit, k);\r\n        res.json(result);\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ message: \"Internal server error\" });\r\n    }\r\n});\r\nartist.get('/cluster/birthcountry', async (req, res) => {\r\n    const minLimit = req.query.minLimit;\r\n    const maxLimit = req.query.maxLimit;\r\n    const k = parseInt(req.query.k); // Parse k parameter as integer\r\n\r\n    try {\r\n        const result = await artistModel.spectralClusteringBirthcountry(minLimit, maxLimit, k);\r\n        res.json(result);\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ message: \"Internal server error\" });\r\n    }\r\n});\r\nartist.get('/cluster/deathcountry', async (req, res) => {\r\n    const minLimit = req.query.minLimit;\r\n    const maxLimit = req.query.maxLimit;\r\n    const k = parseInt(req.query.k); // Parse k parameter as integer\r\n\r\n    try {\r\n        const result = await artistModel.spectralClusteringDeathcountry(minLimit, maxLimit, k);\r\n        res.json(result);\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ message: \"Internal server error\" });\r\n    }\r\n});\r\nartist.get('/cluster/mostexhibited', async (req, res) => {\r\n    const minLimit = req.query.minLimit;\r\n    const maxLimit = req.query.maxLimit;\r\n    const k = parseInt(req.query.k); // Parse k parameter as integer\r\n\r\n    try {\r\n        const result = await artistModel.spectralClusteringMostExhibited(minLimit, maxLimit, k);\r\n        res.json(result);\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ message: \"Internal server error\" });\r\n    }\r\n});\r\nexport default artist;\r\n"],"mappings":"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","ignoreList":[]}},"mtime":1716656749303},"{\"assumptions\":{},\"sourceRoot\":\"C:\\\\Users\\\\Luisa Müller\\\\Documents\\\\Studium\\\\Projekt\\\\BachelorProject\\\\backend\\\\src\\\\models\\\\\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"C:\\\\Users\\\\Luisa Müller\\\\Documents\\\\Studium\\\\Projekt\\\\BachelorProject\\\\backend\",\"filename\":\"C:\\\\Users\\\\Luisa Müller\\\\Documents\\\\Studium\\\\Projekt\\\\BachelorProject\\\\backend\\\\src\\\\models\\\\artist.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\Luisa Müller\\\\Documents\\\\Studium\\\\Projekt\\\\BachelorProject\\\\backend\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-unicode-sets-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-class-static-block\",\"visitor\":{\"ClassBody\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-private-property-in-object\",\"visitor\":{\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":\"#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error\"},\"externalDependencies\":[]},{\"key\":\"transform-class-properties\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{\"loose\":\"#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error\"},\"externalDependencies\":[]},{\"key\":\"transform-private-methods\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{\"loose\":\"#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error\"},\"externalDependencies\":[]},{\"key\":\"transform-numeric-separator\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"BigIntLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-logical-assignment-operators\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-nullish-coalescing-operator\",\"visitor\":{\"LogicalExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-optional-chaining\",\"visitor\":{\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-json-strings\",\"visitor\":{\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-optional-catch-binding\",\"visitor\":{\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-async-generator-functions\",\"visitor\":{\"Program\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-object-rest-spread\",\"visitor\":{\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"DoWhileStatement\":{\"exit\":[null]},\"ForInStatement\":{\"exit\":[null]},\"ForStatement\":{\"exit\":[null]},\"WhileStatement\":{\"exit\":[null]},\"ForOfStatement\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null,null]},\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"StaticBlock\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-regenerator\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"CallExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-export-namespace-from\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"CallExpression\":{\"enter\":[null]},\"ImportExpression\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-dynamic-import\",\"visitor\":{\"Program\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-top-level-await\",\"visitor\":{\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-import-meta\",\"visitor\":{\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]}],\"presets\":[]}:7.24.4:development":{"value":{"code":"\"use strict\";\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar dbSemaphore = require('../semaphoreHandler');\nvar math = require('mathjs');\nvar latestArtists = [];\nvar latestRelationships = [];\nvar latestMinLimit = -1;\nvar latestMaxLimit = -1;\nvar latestValue = '';\nvar Artist = /*#__PURE__*/function () {\n  function Artist(data) {\n    _classCallCheck(this, Artist);\n    this.id = Number(data.id);\n    this.firstname = data.firstname;\n    this.lastname = data.lastname;\n    this.birthyear = this.calculateYear(data.birthdate.toString());\n    this.birthplace = data.birthplace;\n    this.deathyear = this.calculateYear(data.deathdate.toString());\n    this.deathplace = data.deathplace;\n    this.nationality = data.country;\n    this.sex = data.sex;\n    this.title = data.title;\n    this.techniques = data.artForms;\n    this.amount_techniques = data.amountArtForms;\n    this.distinct_techniques = data.distinctArtForms;\n    this.europeanRegionNationality = this.determineRegion(data.country);\n    this.most_exhibited_in = data.mostExhibitedInCountry;\n    this.europeanRegionMostExhibited = this.determineRegion(data.mostExhibitedInCountry);\n    this.most_exhibited_in_amount = data.mostExhibitedInCountryAmount;\n    this.total_exhibited_artworks = data.TotalExhibitedArtworks;\n    this.deathcountry = data.deathCountry;\n    this.europeanRegionDeath = this.determineRegion(data.deathCountry);\n    this.birthcountry = data.birthCountry;\n    this.europeanRegionBirth = this.determineRegion(data.birthCountry);\n    this.total_exhibitions = data.TotalExhibitions;\n    this.techniques_freq = data.artFormsFreq;\n    this.cluster = -1; // Default value\n  }\n  return _createClass(Artist, [{\n    key: \"calculateYear\",\n    value: function calculateYear(date) {\n      if (!date) return null; // Handle cases where birthdate is not provided\n      var year = parseInt(date.split('-')[0]);\n      return year;\n    }\n  }, {\n    key: \"determineRegion\",\n    value: function determineRegion(countryCode) {\n      for (var region in europeanRegions) {\n        if (europeanRegions[region].includes(countryCode)) {\n          return region;\n        }\n      }\n      return '\\\\N'; // Return null if no region matches\n    }\n  }]);\n}(); // Define European regions based on country codes\nvar europeanRegions = {\n  \"North Europe\": [\"DK\", \"EE\", \"FI\", \"IE\", \"LT\", \"LV\", \"NO\", \"SE\", \"IS\"],\n  \"Western Europe\": [\"GB\", \"FR\", \"BE\", \"NL\", \"LU\", \"CH\", \"MC\", \"DE\", \"AT\"],\n  // Added DE, AT\n  \"Southern Europe\": [\"PT\", \"ES\", \"IT\", \"GR\", \"HR\", \"BA\", \"RS\", \"ME\", \"SI\", \"MA\", \"GI\"],\n  \"Eastern Europe\": [\"RU\", \"UA\", \"BY\", \"BG\", \"RO\", \"MD\", \"AZ\", \"PL\", \"CZ\", \"SK\", \"HU\"],\n  // Added PL, CZ, SK, HU\n  \"Others\": [\"US\", \"AU\", \"GE\", \"MX\", \"AM\", \"IL\", \"CL\", \"AR\", \"CA\", \"DO\", \"PE\", \"JP\", \"TR\", \"BR\", \"ZA\", \"NZ\", \"VE\", \"GT\", \"UY\", \"SV\", \"PY\", \"IN\", \"PF\", \"KZ\", \"UZ\", \"VN\", \"NA\", \"JO\", \"IR\", \"KH\", \"JM\", \"SA\", \"DZ\", \"CN\", \"EG\", \"VI\", \"ID\", \"CU\", \"TN\", \"MQ\", \"MU\", \"LK\", \"EC\", \"SG\", \"BL\", \"TH\", \"BO\"]\n};\n\n/*   const allCountries = [\r\n    \"GB\", \"ID\", \"UA\", \"CH\", \"RU\", \"NL\", \"DE\", \"BY\", \"IT\", \"LT\", \"US\", \"HU\", \"FR\", \"AU\", \"BE\", \"CZ\", \"AT\", \"NO\", \r\n    \"GR\", \"SE\", \"PL\", \"LV\", \"FI\", \"ES\", \"MD\", \"CA\", \"BG\", \"GE\", \"DZ\", \"MX\", \"AZ\", \"RO\", \"EE\", \"DK\", \"AR\", \"UY\", \r\n    \"CU\", \"PT\", \"HR\", \"SI\", \"TN\", \"EG\", \"SK\", \"TR\", \"VI\", \"RS\", \"IE\", \"DO\", \"JP\", \"MQ\", \"IN\", \"MU\", \"ME\", \"CL\", \r\n    \"ZA\", \"NZ\", \"KH\", \"LU\", \"GI\", \"VE\", \"GT\", \"SV\", \"PY\", \"LK\", \"BA\", \"EC\", \"BR\", \"SG\", \"BL\", \"PE\", \"TH\", \"PF\", \r\n    \"AM\", \"IL\", \"MC\", \"CN\", \"UZ\", \"KZ\", \"MA\", \"BO\", \"VN\", \"NA\", \"JO\", \"IR\", \"JM\", \"SA\"\r\n  ]\r\n  // Create a set of all countries in europeanRegions\r\nconst categorizedCountries = new Set();\r\nObject.values(europeanRegions).forEach(regionCountries => {\r\n  regionCountries.forEach(country => {\r\n    categorizedCountries.add(country);\r\n  });\r\n});\r\n\r\n// Find countries in allCountries that are not in categorizedCountries\r\nconst uncategorizedCountries = allCountries.filter(country => !categorizedCountries.has(country));\r\n\r\nconsole.log(uncategorizedCountries);\r\n   */\nvar exhibited_with = /*#__PURE__*/_createClass(function exhibited_with(startData, endData, relationshipData) {\n  _classCallCheck(this, exhibited_with);\n  this.startId = Math.min(startData.id, endData.id);\n  this.endId = Math.max(startData.id, endData.id);\n  this.sharedExhibitions = relationshipData.sharedExhibitions;\n  this.sharedExhibitionMinArtworks = relationshipData.sharedExhibitionMinArtworks;\n});\nvar findAllNationalityTechnique = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n    var _require, session;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          _require = require('../db'), session = _require.session;\n          _context2.next = 3;\n          return dbSemaphore.runExclusive( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n            var result;\n            return _regeneratorRuntime().wrap(function _callee$(_context) {\n              while (1) switch (_context.prev = _context.next) {\n                case 0:\n                  console.log('Semaphore acquired by normal');\n                  _context.next = 3;\n                  return session.run( // Collect 25 distinct artists based on some criteria\n                  \"MATCH (a:Artist)\\n    WHERE a.artForms <> [] AND a.country <> '\\\\N'\\n    WITH a\\n    LIMIT 25\\n    WITH collect(a) AS selectedArtists\\n\\n    // For each artist in the selected group, find all exhibited relationships within this group\\n    UNWIND selectedArtists AS a\\n    MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\\n    WHERE b IN selectedArtists\\n    RETURN p\\n    \");\n                case 3:\n                  result = _context.sent;\n                  _context.next = 6;\n                  return processResult(result);\n                case 6:\n                  return _context.abrupt(\"return\", _context.sent);\n                case 7:\n                case \"end\":\n                  return _context.stop();\n              }\n            }, _callee);\n          })));\n        case 3:\n          return _context2.abrupt(\"return\", _context2.sent);\n        case 4:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return function findAllNationalityTechnique() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\n/* const findAllNationalityTechniqueAmount = async (minLimit, maxLimit) => {\r\n    const { session } = require('../db');\r\n    return await dbSemaphore.runExclusive(async () => {\r\n        console.log('Semaphore acquired by amount')\r\n    const result = await session.run(\r\n   // Collect artists where total\r\n    `MATCH (a:Artist)\r\n    WHERE a.artForms <> [] AND a.country <> '\\\\N' AND a.TotalExhibitedArtworks >= $minLimit AND a.TotalExhibitedArtworks <= $maxLimit\r\n    WITH a\r\n    WITH collect(a) AS selectedArtists\r\n\r\n    // For each artist in the selected group, find all exhibited relationships within this group\r\n    UNWIND selectedArtists AS a\r\n    MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\r\n    WHERE b IN selectedArtists\r\n    RETURN p\r\n    `\r\n    ,{ minLimit: parseInt(minLimit), maxLimit: parseInt(maxLimit) } );// Ensure these are correctly passed as integers);\r\n    \r\n\r\n    return await processResult(result);\r\n});\r\n}; */\n\nvar findAllBirthcountryTechnique = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n    var _require2, session;\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) switch (_context4.prev = _context4.next) {\n        case 0:\n          _require2 = require('../db'), session = _require2.session;\n          _context4.next = 3;\n          return dbSemaphore.runExclusive( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n            var result;\n            return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n              while (1) switch (_context3.prev = _context3.next) {\n                case 0:\n                  _context3.next = 2;\n                  return session.run( // Collect 25 distinct artists based on some criteria\n                  \"MATCH (a:Artist)\\n    WHERE a.artForms <> [] AND a.birthCountry <> '\\\\N'\\n    WITH a\\n    LIMIT 25\\n    WITH collect(a) AS selectedArtists\\n\\n    // For each artist in the selected group, find all exhibited relationships within this group\\n    UNWIND selectedArtists AS a\\n    MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\\n    WHERE b IN selectedArtists\\n    RETURN p\\n    \");\n                case 2:\n                  result = _context3.sent;\n                  _context3.next = 5;\n                  return processResult(result);\n                case 5:\n                  return _context3.abrupt(\"return\", _context3.sent);\n                case 6:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }, _callee3);\n          })));\n        case 3:\n          return _context4.abrupt(\"return\", _context4.sent);\n        case 4:\n        case \"end\":\n          return _context4.stop();\n      }\n    }, _callee4);\n  }));\n  return function findAllBirthcountryTechnique() {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\n/* const findAllBirthcountryTechniqueAmount = async (minLimit,maxLimit) => {\r\n    const { session } = require('../db');\r\n    return await dbSemaphore.runExclusive(async () => {\r\n    const result = await session.run(\r\n   // Collect 25 distinct artists based on some criteria\r\n    `MATCH (a:Artist) \r\n    WHERE a.artForms <> [] AND a.birthCountry <> '\\\\N' AND a.TotalExhibitedArtworks >= $minLimit AND a.TotalExhibitedArtworks <= $maxLimit\r\n    WITH a\r\n    WITH collect(a) AS selectedArtists\r\n\r\n    // For each artist in the selected group, find all exhibited relationships within this group\r\n    UNWIND selectedArtists AS a\r\n    MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\r\n    WHERE b IN selectedArtists\r\n    RETURN p\r\n    `\r\n    ,{ minLimit: parseInt(minLimit), maxLimit: parseInt(maxLimit) } );// Ensure these are correctly passed as integers);\r\n    \r\n\r\n    return await processResult(result);\r\n});\r\n}; */\n\nvar findAllDeathcountryTechnique = /*#__PURE__*/function () {\n  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n    var _require3, session;\n    return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n      while (1) switch (_context6.prev = _context6.next) {\n        case 0:\n          _require3 = require('../db'), session = _require3.session;\n          _context6.next = 3;\n          return dbSemaphore.runExclusive( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n            var result;\n            return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n              while (1) switch (_context5.prev = _context5.next) {\n                case 0:\n                  _context5.next = 2;\n                  return session.run( // Collect 25 distinct artists based on some criteria\n                  \"MATCH (a:Artist)\\n    WHERE a.artForms <> [] AND a.deathCountry <> '\\\\N'\\n    WITH a\\n    LIMIT 25\\n    WITH collect(a) AS selectedArtists\\n\\n    // For each artist in the selected group, find all exhibited relationships within this group\\n    UNWIND selectedArtists AS a\\n    MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\\n    WHERE b IN selectedArtists\\n    RETURN p\\n    \");\n                case 2:\n                  result = _context5.sent;\n                  _context5.next = 5;\n                  return processResult(result);\n                case 5:\n                  return _context5.abrupt(\"return\", _context5.sent);\n                case 6:\n                case \"end\":\n                  return _context5.stop();\n              }\n            }, _callee5);\n          })));\n        case 3:\n          return _context6.abrupt(\"return\", _context6.sent);\n        case 4:\n        case \"end\":\n          return _context6.stop();\n      }\n    }, _callee6);\n  }));\n  return function findAllDeathcountryTechnique() {\n    return _ref5.apply(this, arguments);\n  };\n}();\n/* \r\nconst findAllDeathcountryTechniqueAmount = async (minLimit,maxLimit) => {\r\n    const { session } = require('../db');\r\n    return await dbSemaphore.runExclusive(async () => {\r\n    const result = await session.run(\r\n   // Collect 25 distinct artists based on some criteria\r\n    `MATCH (a:Artist)\r\n    WHERE a.artForms <> [] AND a.deathCountry <> '\\\\N'  AND a.TotalExhibitedArtworks >= $minLimit AND a.TotalExhibitedArtworks <= $maxLimit\r\n    WITH a\r\n    WITH collect(a) AS selectedArtists\r\n\r\n    // For each artist in the selected group, find all exhibited relationships within this group\r\n    UNWIND selectedArtists AS a\r\n    MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\r\n    WHERE b IN selectedArtists\r\n    RETURN p\r\n    `\r\n    ,{ minLimit: parseInt(minLimit), maxLimit: parseInt(maxLimit) } );// Ensure these are correctly passed as integers);\r\n    \r\n\r\n    return await processResult(result);\r\n\r\n});\r\n}; */\n\nvar findAllMostExhibitedInTechnique = /*#__PURE__*/function () {\n  var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n    var _require4, session;\n    return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n      while (1) switch (_context8.prev = _context8.next) {\n        case 0:\n          _require4 = require('../db'), session = _require4.session;\n          _context8.next = 3;\n          return dbSemaphore.runExclusive( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n            var result;\n            return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n              while (1) switch (_context7.prev = _context7.next) {\n                case 0:\n                  _context7.next = 2;\n                  return session.run( // Collect 25 distinct artists based on some criteria\n                  \"MATCH (a:Artist)\\n    WHERE a.artForms <> [] AND a.mostExhibitedInCountry <> '\\\\N' AND a.unclearMostExhibitedInCountry = FALSE \\n    WITH a\\n    LIMIT 25\\n    WITH collect(a) AS selectedArtists\\n\\n    // For each artist in the selected group, find all exhibited relationships within this group\\n    UNWIND selectedArtists AS a\\n    MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\\n    WHERE b IN selectedArtists\\n    RETURN p\\n    \");\n                case 2:\n                  result = _context7.sent;\n                  _context7.next = 5;\n                  return processResult(result);\n                case 5:\n                  return _context7.abrupt(\"return\", _context7.sent);\n                case 6:\n                case \"end\":\n                  return _context7.stop();\n              }\n            }, _callee7);\n          })));\n        case 3:\n          return _context8.abrupt(\"return\", _context8.sent);\n        case 4:\n        case \"end\":\n          return _context8.stop();\n      }\n    }, _callee8);\n  }));\n  return function findAllMostExhibitedInTechnique() {\n    return _ref7.apply(this, arguments);\n  };\n}();\n\n/* const findAllMostExhibitedInTechniqueAmount = async (minLimit,maxLimit) => {\r\n    const { session } = require('../db');\r\n    return await dbSemaphore.runExclusive(async () => {\r\n    const result = await session.run(\r\n   // Collect 25 distinct artists based on some criteria\r\n    `MATCH (a:Artist)\r\n    WHERE a.artForms <> [] AND a.mostExhibitedInCountry <> '\\\\N' AND a.unclearMostExhibitedInCountry = FALSE  AND a.TotalExhibitedArtworks >= $minLimit AND a.TotalExhibitedArtworks <= $maxLimit\r\n    WITH a\r\n    WITH collect(a) AS selectedArtists\r\n\r\n    // For each artist in the selected group, find all exhibited relationships within this group\r\n    UNWIND selectedArtists AS a\r\n    MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\r\n    WHERE b IN selectedArtists\r\n    RETURN p\r\n    `\r\n    ,{ minLimit: parseInt(minLimit), maxLimit: parseInt(maxLimit) } );// Ensure these are correctly passed as integers);\r\n    \r\n\r\n    return await processResult(result);\r\n\r\n});\r\n}; */\n\nvar findAllTechniques = /*#__PURE__*/function () {\n  var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n    var _require5, session;\n    return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n      while (1) switch (_context10.prev = _context10.next) {\n        case 0:\n          _require5 = require('../db'), session = _require5.session;\n          _context10.next = 3;\n          return dbSemaphore.runExclusive( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n            var result;\n            return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n              while (1) switch (_context9.prev = _context9.next) {\n                case 0:\n                  _context9.next = 2;\n                  return session.run( // Collect 25 distinct artists based on some criteria\n                  \"MATCH (a:Artist)\\n    WHERE a.artForms <> [] AND a.artFormsFreq <> '{}'\\n    WITH a\\n    LIMIT 25\\n    WITH collect(a) AS selectedArtists\\n\\n    // For each artist in the selected group, find all exhibited relationships within this group\\n    UNWIND selectedArtists AS a\\n    MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\\n    WHERE b IN selectedArtists\\n    RETURN p\\n    \");\n                case 2:\n                  result = _context9.sent;\n                  _context9.next = 5;\n                  return processResult(result);\n                case 5:\n                  return _context9.abrupt(\"return\", _context9.sent);\n                case 6:\n                case \"end\":\n                  return _context9.stop();\n              }\n            }, _callee9);\n          })));\n        case 3:\n          return _context10.abrupt(\"return\", _context10.sent);\n        case 4:\n        case \"end\":\n          return _context10.stop();\n      }\n    }, _callee10);\n  }));\n  return function findAllTechniques() {\n    return _ref9.apply(this, arguments);\n  };\n}();\n\n// Assuming 'artists' is an array of artist nodes and 'relationships' is an array of edges with weights\nvar normalizeLogarithmically = function normalizeLogarithmically(values) {\n  var logMaxValue = Math.log1p(Math.max.apply(Math, _toConsumableArray(values.values())));\n  var logMinValue = Math.log1p(Math.min.apply(Math, _toConsumableArray(values.values())));\n  var range = logMaxValue - logMinValue;\n  var normalized = new Map();\n  values.forEach(function (value, id) {\n    normalized.set(id, (Math.log1p(value) - logMinValue) / range); // Normalize by dividing by the max degree\n  });\n  return normalized;\n};\nfunction spectralClustering(_x, _x2, _x3) {\n  return _spectralClustering.apply(this, arguments);\n}\nfunction _spectralClustering() {\n  _spectralClustering = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17(artists, relationships, k) {\n    var sharedExhibitionValues, normalizedSharedExhibitionValues, size, adjacencyMatrix, degreeMatrix, laplacianMatrix, eigensystem, firstThreeEigenvectors, featureMatrixU, i, vector, featureMatrixUTransposed, clusters, clusterArray, clusterAssignments, clusteredArtists, clusterMap, intraClusterRelationships, singleInterClusterRelationships, interClusterRelationshipsMap, interClusterRelationships;\n    return _regeneratorRuntime().wrap(function _callee17$(_context17) {\n      while (1) switch (_context17.prev = _context17.next) {\n        case 0:\n          console.log('cluster');\n          // Step 0: Extract sharedExhibitionMinArtworks values for normalization\n          sharedExhibitionValues = new Map();\n          relationships.forEach(function (relationship) {\n            var id = relationship.startId;\n            var value = relationship.sharedExhibitionMinArtworks;\n            sharedExhibitionValues.set(id, value);\n          });\n\n          // Step 0.1: Normalize sharedExhibitionMinArtworks values\n          normalizedSharedExhibitionValues = normalizeLogarithmically(sharedExhibitionValues); // Step 1: Construct the adjacency matrix\n          size = artists.length;\n          adjacencyMatrix = math.zeros(size, size);\n          relationships.forEach(function (relationship) {\n            var i = artists.findIndex(function (artist) {\n              return artist.id === relationship.startId;\n            });\n            var j = artists.findIndex(function (artist) {\n              return artist.id === relationship.endId;\n            });\n            var weight = normalizedSharedExhibitionValues.get(relationship.startId);\n            adjacencyMatrix.set([i, j], Number(weight));\n            adjacencyMatrix.set([j, i], Number(weight)); // since it's an undirected graph\n          });\n\n          // Step 2: Construct the degree matrix\n          degreeMatrix = adjacencyMatrix.map(function (value, index, matrix) {\n            return index[0] === index[1] ? Number(math.sum(matrix._data[index[0]])) : 0;\n          }); // Step 3: Construct the Laplacian matrix\n          laplacianMatrix = math.subtract(degreeMatrix, adjacencyMatrix); // Step 4: Compute the eigenvalues and eigenvectors\n          eigensystem = math.eigs(laplacianMatrix); // Check if the eigenvalues and eigenvectors are defined and not empty\n          if (!(!eigensystem || eigensystem.values.length === 0)) {\n            _context17.next = 12;\n            break;\n          }\n          throw new Error(\"Eigenvectors are undefined or missing data.\");\n        case 12:\n          // Extract the first three eigenvectors\n          firstThreeEigenvectors = eigensystem.eigenvectors.slice(0, k); // Initialize the feature matrix\n          featureMatrixU = []; // Loop over the eigenvectors\n          for (i = 0; i < firstThreeEigenvectors.length; i++) {\n            vector = firstThreeEigenvectors[i].vector.toArray(); // Convert DenseMatrix to array\n            featureMatrixU.push(vector); // Push the vector as a column in the feature matrix\n          }\n\n          // Transpose the feature matrix to have columns as data points\n          featureMatrixUTransposed = math.transpose(featureMatrixU); // Perform initial kMeans Clustering\n          clusters = kMeansClustering(featureMatrixUTransposed, k, 1); // Assume minClusterSize = 1 for basic example\n          // Redistribute clusters here\n          clusters = redistributeClusters(featureMatrixUTransposed, clusters, k, 5, 15); // Example sizes\n\n          // Assuming kMeansClustering and other related functions are d\n\n          // Associate artists with their clusters\n          clusterArray = artists.map(function (artist, index) {\n            return _objectSpread(_objectSpread({}, artist), {}, {\n              cluster: clusters[index]\n            });\n          }); // Associate artists with their clusters\n          clusterAssignments = artists.map(function (artist, index) {\n            artist.cluster = clusters[index]; // Assign the cluster to the artist\n          }); // Initialize an array of k empty arrays for the clusters\n          clusteredArtists = Array.from({\n            length: k\n          }, function () {\n            return [];\n          }); // Populate the cluster arrays with artists\n          artists.forEach(function (artist, index) {\n            var clusterIndex = clusters[index]; // Retrieve the cluster index assigned to the artist\n            clusteredArtists[clusterIndex].push(artist); // Add the artist to the corresponding cluster\n          });\n          clusterMap = new Map();\n          artists.forEach(function (artist, index) {\n            clusterMap.set(artist.id, clusters[index]); // Correctly associate artist ID with cluster index\n          });\n          intraClusterRelationships = Array.from({\n            length: k\n          }, function () {\n            return [];\n          });\n          singleInterClusterRelationships = Array.from({\n            length: k\n          }, function () {\n            return [];\n          });\n          interClusterRelationshipsMap = new Map();\n          relationships.forEach(function (relationship) {\n            var clusterA = clusterMap.get(relationship.startId);\n            var clusterB = clusterMap.get(relationship.endId);\n            if (clusterA === clusterB) {\n              intraClusterRelationships[clusterA].push(relationship);\n            } else {\n              singleInterClusterRelationships[clusterA].push(relationship);\n              singleInterClusterRelationships[clusterB].push(relationship);\n              var key = \"\".concat(Math.min(clusterA, clusterB), \"-\").concat(Math.max(clusterA, clusterB));\n              if (!interClusterRelationshipsMap.has(key)) {\n                interClusterRelationshipsMap.set(key, {\n                  startId: Math.min(clusterA, clusterB),\n                  endId: Math.max(clusterA, clusterB),\n                  sharedExhibitions: 0,\n                  sharedExhibitionMinArtworks: 0\n                });\n              }\n              var aggregatedRelationship = interClusterRelationshipsMap.get(key);\n              aggregatedRelationship.sharedExhibitions += relationship.sharedExhibitions;\n              aggregatedRelationship.sharedExhibitionMinArtworks += relationship.sharedExhibitionMinArtworks;\n            }\n          });\n          interClusterRelationships = Array.from(interClusterRelationshipsMap.values()).map(function (rel) {\n            return new exhibited_with({\n              id: rel.startId\n            }, {\n              id: rel.endId\n            }, {\n              sharedExhibitions: rel.sharedExhibitions,\n              sharedExhibitionMinArtworks: rel.sharedExhibitionMinArtworks\n            });\n          });\n          console.log('cluster finished');\n          return _context17.abrupt(\"return\", [clusteredArtists, intraClusterRelationships, interClusterRelationships,\n          // You might want to further organize this by cluster pairs if needed\n          singleInterClusterRelationships]);\n        case 31:\n        case \"end\":\n          return _context17.stop();\n      }\n    }, _callee17);\n  }));\n  return _spectralClustering.apply(this, arguments);\n}\nfunction redistributeClusters(data, clusters, k, minClusterSize, maxClusterSize) {\n  var centroids = calculateCentroids(data, clusters, k);\n  var clusterSizes = new Array(k).fill(0);\n  clusters.forEach(function (cluster) {\n    return clusterSizes[cluster]++;\n  });\n  var needsHelp = clusterSizes.map(function (size, index) {\n    return {\n      index: index,\n      size: size,\n      type: size < minClusterSize ? 'undersized' : size > maxClusterSize ? 'oversized' : 'ok'\n    };\n  }).filter(function (stat) {\n    return stat.type !== 'ok';\n  });\n  needsHelp.forEach(function (need) {\n    if (need.type === 'oversized') {\n      data.forEach(function (point, idx) {\n        if (clusters[idx] === need.index) {\n          var currentClusterIndex = need.index;\n          var closest = {\n            index: -1,\n            distance: Infinity\n          };\n          centroids.forEach(function (centroid, index) {\n            if (index !== currentClusterIndex && clusterSizes[index] < maxClusterSize) {\n              var distance = euclideanDistance(point, centroid);\n              if (distance < closest.distance) {\n                closest = {\n                  index: index,\n                  distance: distance\n                };\n              }\n            }\n          });\n          if (closest.index !== -1) {\n            clusters[idx] = closest.index;\n            clusterSizes[currentClusterIndex]--;\n            clusterSizes[closest.index]++;\n          }\n        }\n      });\n    }\n  });\n  return clusters;\n}\nfunction calculateCentroids(data, clusters, k) {\n  var centroids = Array(k).fill(null).map(function () {\n    return [];\n  });\n  data.forEach(function (point, index) {\n    centroids[clusters[index]].push(point);\n  });\n  return centroids.map(function (cluster) {\n    return cluster.reduce(function (mean, point) {\n      return mean.map(function (m, idx) {\n        return m + point[idx] / cluster.length;\n      });\n    }, new Array(data[0].length).fill(0));\n  });\n}\nfunction kMeansClustering(data, k, minClusterSize) {\n  var maxIterations = 500;\n  var bestCentroids = [];\n  var bestClusterAssignments = [];\n  var minTotalDistance = Infinity;\n  for (var initialization = 0; initialization < 10; initialization++) {\n    // Try multiple random initializations\n    var centroids = initializeCentroids(data, k);\n    var clusterAssignments = [];\n    for (var iteration = 0; iteration < maxIterations; iteration++) {\n      var newClusterAssignments = assignPointsToCentroids(data, centroids);\n      var newCentroids = updateCentroids(data, newClusterAssignments, k);\n      if (centroidsEqual(newCentroids, centroids)) {\n        clusterAssignments = newClusterAssignments;\n        break;\n      }\n      centroids = newCentroids;\n    }\n    var totalDistance = calculateTotalDistance(data, centroids, clusterAssignments);\n    if (totalDistance < minTotalDistance) {\n      bestCentroids = centroids;\n      bestClusterAssignments = clusterAssignments;\n      minTotalDistance = totalDistance;\n    }\n  }\n\n  // Ensure each cluster meets the minimum size requirement\n  var clusterSizes = new Array(k).fill(0);\n  bestClusterAssignments.forEach(function (clusterIndex) {\n    clusterSizes[clusterIndex]++;\n  });\n\n  // Reassign points until each cluster has at least minClusterSize points\n  var _loop = function _loop(i) {\n    var _loop2 = function _loop2() {\n      // Find the point farthest from its centroid in cluster i\n      var farthestPointIndex = -1;\n      var maxDistance = -1;\n      data.forEach(function (point, index) {\n        if (bestClusterAssignments[index] === i) {\n          var distance = euclideanDistance(point, bestCentroids[i]);\n          if (distance > maxDistance) {\n            maxDistance = distance;\n            farthestPointIndex = index;\n          }\n        }\n      });\n\n      // Reassign the farthest point to the nearest cluster\n      var minDistance = Infinity;\n      var nearestClusterIndex = -1;\n      for (var j = 0; j < k; j++) {\n        if (j !== i) {\n          var distance = euclideanDistance(data[farthestPointIndex], bestCentroids[j]);\n          if (distance < minDistance) {\n            minDistance = distance;\n            nearestClusterIndex = j;\n          }\n        }\n      }\n\n      // Reassign the point to the nearest cluster\n      bestClusterAssignments[farthestPointIndex] = nearestClusterIndex;\n      clusterSizes[i]--;\n      clusterSizes[nearestClusterIndex]++;\n    };\n    while (clusterSizes[i] < minClusterSize) {\n      _loop2();\n    }\n  };\n  for (var i = 0; i < k; i++) {\n    _loop(i);\n  }\n  return bestClusterAssignments;\n}\nfunction initializeCentroids(data, k) {\n  var centroids = [data[Math.floor(Math.random() * data.length)]]; // Start with one random centroid\n  var _loop3 = function _loop3() {\n    var distances = data.map(function (point) {\n      return Math.min.apply(Math, _toConsumableArray(centroids.map(function (centroid) {\n        return euclideanDistance(point, centroid);\n      })));\n    });\n    var totalDistance = distances.reduce(function (a, b) {\n      return a + b;\n    }, 0);\n    var probabilities = distances.map(function (distance) {\n      return distance / totalDistance;\n    });\n    var cumulativeProbabilities = probabilities.reduce(function (acc, prob, index) {\n      if (index === 0) acc.push(prob);else acc.push(acc[index - 1] + prob);\n      return acc;\n    }, []);\n    var rand = Math.random();\n    var nextCentroidIndex = cumulativeProbabilities.findIndex(function (cumProb) {\n      return cumProb >= rand;\n    });\n    centroids.push(data[nextCentroidIndex]);\n  };\n  for (var i = 1; i < k; i++) {\n    _loop3();\n  }\n  return centroids;\n}\nfunction assignPointsToCentroids(data, centroids) {\n  var clusterAssignments = [];\n  var _iterator = _createForOfIteratorHelper(data),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var point = _step.value;\n      var minDistance = Infinity;\n      var closestCentroidIndex = -1;\n      for (var i = 0; i < centroids.length; i++) {\n        var distance = euclideanDistance(point, centroids[i]);\n        if (distance < minDistance) {\n          minDistance = distance;\n          closestCentroidIndex = i;\n        }\n      }\n      clusterAssignments.push(closestCentroidIndex);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return clusterAssignments;\n}\nfunction updateCentroids(data, clusterAssignments, k) {\n  var newCentroids = new Array(k).fill(0).map(function () {\n    return new Array(data[0].length).fill(0);\n  });\n  var clusterCounts = new Array(k).fill(0);\n  for (var i = 0; i < data.length; i++) {\n    var clusterIndex = clusterAssignments[i];\n    for (var j = 0; j < data[i].length; j++) {\n      newCentroids[clusterIndex][j] += data[i][j];\n    }\n    clusterCounts[clusterIndex]++;\n  }\n  for (var _i = 0; _i < k; _i++) {\n    if (clusterCounts[_i] !== 0) {\n      for (var _j = 0; _j < newCentroids[_i].length; _j++) {\n        newCentroids[_i][_j] /= clusterCounts[_i];\n      }\n    } else {\n      // If no points were assigned to this cluster, keep the centroid unchanged\n    }\n  }\n  return newCentroids;\n}\nfunction centroidsEqual(centroids1, centroids2) {\n  for (var i = 0; i < centroids1.length; i++) {\n    for (var j = 0; j < centroids1[i].length; j++) {\n      if (centroids1[i][j] !== centroids2[i][j]) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\nfunction euclideanDistance(point1, point2) {\n  var sum = 0;\n  for (var i = 0; i < point1.length; i++) {\n    sum += Math.pow(point1[i] - point2[i], 2);\n  }\n  return Math.sqrt(sum);\n}\nfunction calculateTotalDistance(data, centroids, clusterAssignments) {\n  var totalDistance = 0;\n  for (var i = 0; i < data.length; i++) {\n    totalDistance += euclideanDistance(data[i], centroids[clusterAssignments[i]]);\n  }\n  return totalDistance;\n}\nvar processResult = function processResult(result) {\n  var artistsId = new Set();\n  var relationships = [];\n  var artists = [];\n  result.records.forEach(function (record) {\n    var relationship = record.get('p');\n    var startData = relationship.start.properties;\n    var endData = relationship.end.properties;\n    var relationshipData = relationship.segments[0].relationship.properties;\n    var relation = new exhibited_with(startData, endData, relationshipData);\n    relationships.push(relation);\n\n    // Check if the artist with the same ID hasn't been created yet\n    var artistId = startData.id;\n    if (!artistsId.has(artistId)) {\n      var artist = new Artist(startData);\n      artistsId.add(artistId);\n      artists.push(artist);\n      // Store the artist object as needed\n    }\n    var otherArtistId = endData.id;\n    if (!artistsId.has(otherArtistId)) {\n      var otherArtist = new Artist(endData);\n      artistsId.add(otherArtistId);\n      artists.push(otherArtist);\n    }\n  });\n  return [artists, relationships];\n};\nfunction removeEmptyClusters(clusteredArtists) {\n  // Remove empty clusters and reassign IDs\n  var nonEmptyClusters = clusteredArtists.filter(function (cluster) {\n    return cluster.length > 0;\n  });\n  var newClusterMap = new Map();\n  nonEmptyClusters.forEach(function (cluster, newIndex) {\n    cluster.forEach(function (artist) {\n      newClusterMap.set(artist.id, newIndex);\n    });\n  });\n  var newClusteredArtists = Array.from({\n    length: nonEmptyClusters.length\n  }, function () {\n    return [];\n  });\n  clusteredArtists.forEach(function (cluster) {\n    cluster.forEach(function (artist) {\n      var newClusterId = newClusterMap.get(artist.id);\n      newClusteredArtists[newClusterId].push(artist);\n      artist.cluster = newClusterId; // Update the artist's cluster ID\n    });\n  });\n  return newClusteredArtists;\n}\nvar findAllNationalityTechniqueAmount = /*#__PURE__*/function () {\n  var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(minLimit, maxLimit) {\n    var query;\n    return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n      while (1) switch (_context11.prev = _context11.next) {\n        case 0:\n          query = \"\\n        MATCH (a:Artist)\\n        WHERE a.artForms <> [] AND a.country <> '\\\\N' AND a.TotalExhibitedArtworks >= $minLimit AND a.TotalExhibitedArtworks <= $maxLimit\\n        WITH a\\n        WITH collect(a) AS selectedArtists\\n\\n        UNWIND selectedArtists AS a\\n        MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\\n        WHERE b IN selectedArtists\\n        RETURN p\\n    \";\n          return _context11.abrupt(\"return\", streamQuery(query, {\n            minLimit: parseInt(minLimit),\n            maxLimit: parseInt(maxLimit)\n          }));\n        case 2:\n        case \"end\":\n          return _context11.stop();\n      }\n    }, _callee11);\n  }));\n  return function findAllNationalityTechniqueAmount(_x4, _x5) {\n    return _ref11.apply(this, arguments);\n  };\n}();\nvar findAllBirthcountryTechniqueAmount = /*#__PURE__*/function () {\n  var _ref12 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(minLimit, maxLimit) {\n    var query;\n    return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n      while (1) switch (_context12.prev = _context12.next) {\n        case 0:\n          query = \"\\n        MATCH (a:Artist)\\n        WHERE a.artForms <> [] AND a.birthCountry <> '\\\\N' AND a.TotalExhibitedArtworks >= $minLimit AND a.TotalExhibitedArtworks <= $maxLimit\\n        WITH a\\n        WITH collect(a) AS selectedArtists\\n\\n        UNWIND selectedArtists AS a\\n        MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\\n        WHERE b IN selectedArtists\\n        RETURN p\\n    \";\n          return _context12.abrupt(\"return\", streamQuery(query, {\n            minLimit: parseInt(minLimit),\n            maxLimit: parseInt(maxLimit)\n          }));\n        case 2:\n        case \"end\":\n          return _context12.stop();\n      }\n    }, _callee12);\n  }));\n  return function findAllBirthcountryTechniqueAmount(_x6, _x7) {\n    return _ref12.apply(this, arguments);\n  };\n}();\nvar findAllDeathcountryTechniqueAmount = /*#__PURE__*/function () {\n  var _ref13 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(minLimit, maxLimit) {\n    var query;\n    return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n      while (1) switch (_context13.prev = _context13.next) {\n        case 0:\n          query = \"\\n        MATCH (a:Artist)\\n        WHERE a.artForms <> [] AND a.deathCountry <> '\\\\N' AND a.TotalExhibitedArtworks >= $minLimit AND a.TotalExhibitedArtworks <= $maxLimit\\n        WITH a\\n        WITH collect(a) AS selectedArtists\\n\\n        UNWIND selectedArtists AS a\\n        MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\\n        WHERE b IN selectedArtists\\n        RETURN p\\n    \";\n          return _context13.abrupt(\"return\", streamQuery(query, {\n            minLimit: parseInt(minLimit),\n            maxLimit: parseInt(maxLimit)\n          }));\n        case 2:\n        case \"end\":\n          return _context13.stop();\n      }\n    }, _callee13);\n  }));\n  return function findAllDeathcountryTechniqueAmount(_x8, _x9) {\n    return _ref13.apply(this, arguments);\n  };\n}();\nvar findAllMostExhibitedInTechniqueAmount = /*#__PURE__*/function () {\n  var _ref14 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(minLimit, maxLimit) {\n    var query;\n    return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n      while (1) switch (_context14.prev = _context14.next) {\n        case 0:\n          query = \"\\n        MATCH (a:Artist)\\n        WHERE a.artForms <> [] AND a.mostExhibitedInCountry <> '\\\\N' AND a.unclearMostExhibitedInCountry = FALSE AND a.TotalExhibitedArtworks >= $minLimit AND a.TotalExhibitedArtworks <= $maxLimit\\n        WITH a\\n        WITH collect(a) AS selectedArtists\\n\\n        UNWIND selectedArtists AS a\\n        MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\\n        WHERE b IN selectedArtists\\n        RETURN p\\n    \";\n          return _context14.abrupt(\"return\", streamQuery(query, {\n            minLimit: parseInt(minLimit),\n            maxLimit: parseInt(maxLimit)\n          }));\n        case 2:\n        case \"end\":\n          return _context14.stop();\n      }\n    }, _callee14);\n  }));\n  return function findAllMostExhibitedInTechniqueAmount(_x10, _x11) {\n    return _ref14.apply(this, arguments);\n  };\n}();\nvar streamQuery = /*#__PURE__*/function () {\n  var _ref15 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16(query, params) {\n    var _require6, session;\n    return _regeneratorRuntime().wrap(function _callee16$(_context16) {\n      while (1) switch (_context16.prev = _context16.next) {\n        case 0:\n          _require6 = require('../db'), session = _require6.session;\n          _context16.next = 3;\n          return dbSemaphore.runExclusive( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15() {\n            var result, artistsId, relationships, artists;\n            return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n              while (1) switch (_context15.prev = _context15.next) {\n                case 0:\n                  result = session.run(query, params);\n                  artistsId = new Set();\n                  relationships = [];\n                  artists = [];\n                  _context15.next = 6;\n                  return new Promise(function (resolve, reject) {\n                    result.subscribe({\n                      onNext: function onNext(record) {\n                        var relationship = record.get('p');\n                        var startData = relationship.start.properties;\n                        var endData = relationship.end.properties;\n                        var relationshipData = relationship.segments[0].relationship.properties;\n                        var relation = new exhibited_with(startData, endData, relationshipData);\n                        relationships.push(relation);\n                        var artistId = startData.id;\n                        if (!artistsId.has(artistId)) {\n                          var artist = new Artist(startData);\n                          artistsId.add(artistId);\n                          artists.push(artist);\n                        }\n                        var otherArtistId = endData.id;\n                        if (!artistsId.has(otherArtistId)) {\n                          var otherArtist = new Artist(endData);\n                          artistsId.add(otherArtistId);\n                          artists.push(otherArtist);\n                        }\n                      },\n                      onCompleted: function onCompleted() {\n                        resolve([artists, relationships]);\n                      },\n                      onError: function onError(error) {\n                        reject(error);\n                      }\n                    });\n                  });\n                case 6:\n                  return _context15.abrupt(\"return\", [artists, relationships]);\n                case 7:\n                case \"end\":\n                  return _context15.stop();\n              }\n            }, _callee15);\n          })));\n        case 3:\n          return _context16.abrupt(\"return\", _context16.sent);\n        case 4:\n        case \"end\":\n          return _context16.stop();\n      }\n    }, _callee16);\n  }));\n  return function streamQuery(_x12, _x13) {\n    return _ref15.apply(this, arguments);\n  };\n}();\nfunction spectralClusteringNationality(_x14, _x15, _x16) {\n  return _spectralClusteringNationality.apply(this, arguments);\n}\nfunction _spectralClusteringNationality() {\n  _spectralClusteringNationality = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18(min, max, k) {\n    var _yield$findAllNationa, _yield$findAllNationa2, artists, relationships, artistsWithClusters;\n    return _regeneratorRuntime().wrap(function _callee18$(_context18) {\n      while (1) switch (_context18.prev = _context18.next) {\n        case 0:\n          _context18.prev = 0;\n          if (!(latestMinLimit != min || latestMaxLimit != max || latestValue !== 'nationality')) {\n            _context18.next = 14;\n            break;\n          }\n          _context18.next = 4;\n          return findAllNationalityTechniqueAmount(min, max);\n        case 4:\n          _yield$findAllNationa = _context18.sent;\n          _yield$findAllNationa2 = _slicedToArray(_yield$findAllNationa, 2);\n          artists = _yield$findAllNationa2[0];\n          relationships = _yield$findAllNationa2[1];\n          latestArtists = artists;\n          latestRelationships = relationships;\n          latestMinLimit = min;\n          latestMaxLimit = max;\n          latestValue = 'nationality';\n          console.log(latestMinLimit, latestMaxLimit);\n        case 14:\n          _context18.next = 16;\n          return spectralClustering(latestArtists, latestRelationships, k);\n        case 16:\n          artistsWithClusters = _context18.sent;\n          return _context18.abrupt(\"return\", artistsWithClusters);\n        case 20:\n          _context18.prev = 20;\n          _context18.t0 = _context18[\"catch\"](0);\n          console.error(_context18.t0);\n        case 23:\n        case \"end\":\n          return _context18.stop();\n      }\n    }, _callee18, null, [[0, 20]]);\n  }));\n  return _spectralClusteringNationality.apply(this, arguments);\n}\nfunction spectralClusteringBirthcountry(_x17, _x18, _x19) {\n  return _spectralClusteringBirthcountry.apply(this, arguments);\n}\nfunction _spectralClusteringBirthcountry() {\n  _spectralClusteringBirthcountry = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee19(min, max, k) {\n    var _yield$findAllBirthco, _yield$findAllBirthco2, artists, relationships, artistsWithClusters;\n    return _regeneratorRuntime().wrap(function _callee19$(_context19) {\n      while (1) switch (_context19.prev = _context19.next) {\n        case 0:\n          _context19.prev = 0;\n          if (!(latestMinLimit != min || latestMaxLimit != max || latestValue !== 'birthcountry')) {\n            _context19.next = 13;\n            break;\n          }\n          _context19.next = 4;\n          return findAllBirthcountryTechniqueAmount(min, max);\n        case 4:\n          _yield$findAllBirthco = _context19.sent;\n          _yield$findAllBirthco2 = _slicedToArray(_yield$findAllBirthco, 2);\n          artists = _yield$findAllBirthco2[0];\n          relationships = _yield$findAllBirthco2[1];\n          latestArtists = artists;\n          latestRelationships = relationships;\n          latestMinLimit = min;\n          latestMaxLimit = max;\n          latestValue = 'birthcountry';\n        case 13:\n          _context19.next = 15;\n          return spectralClustering(latestArtists, latestRelationships, k);\n        case 15:\n          artistsWithClusters = _context19.sent;\n          return _context19.abrupt(\"return\", artistsWithClusters);\n        case 19:\n          _context19.prev = 19;\n          _context19.t0 = _context19[\"catch\"](0);\n          console.error(_context19.t0);\n        case 22:\n        case \"end\":\n          return _context19.stop();\n      }\n    }, _callee19, null, [[0, 19]]);\n  }));\n  return _spectralClusteringBirthcountry.apply(this, arguments);\n}\nfunction spectralClusteringDeathcountry(_x20, _x21, _x22) {\n  return _spectralClusteringDeathcountry.apply(this, arguments);\n}\nfunction _spectralClusteringDeathcountry() {\n  _spectralClusteringDeathcountry = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee20(min, max, k) {\n    var _yield$findAllDeathco, _yield$findAllDeathco2, artists, relationships, artistsWithClusters;\n    return _regeneratorRuntime().wrap(function _callee20$(_context20) {\n      while (1) switch (_context20.prev = _context20.next) {\n        case 0:\n          _context20.prev = 0;\n          if (!(latestMinLimit != min || latestMaxLimit != max || latestValue !== 'deathcountry')) {\n            _context20.next = 13;\n            break;\n          }\n          _context20.next = 4;\n          return findAllDeathcountryTechniqueAmount(min, max);\n        case 4:\n          _yield$findAllDeathco = _context20.sent;\n          _yield$findAllDeathco2 = _slicedToArray(_yield$findAllDeathco, 2);\n          artists = _yield$findAllDeathco2[0];\n          relationships = _yield$findAllDeathco2[1];\n          latestArtists = artists;\n          latestRelationships = relationships;\n          latestMinLimit = min;\n          latestMaxLimit = max;\n          latestValue = 'deathcountry';\n        case 13:\n          _context20.next = 15;\n          return spectralClustering(latestArtists, latestRelationships, k);\n        case 15:\n          artistsWithClusters = _context20.sent;\n          return _context20.abrupt(\"return\", artistsWithClusters);\n        case 19:\n          _context20.prev = 19;\n          _context20.t0 = _context20[\"catch\"](0);\n          console.error(_context20.t0);\n        case 22:\n        case \"end\":\n          return _context20.stop();\n      }\n    }, _callee20, null, [[0, 19]]);\n  }));\n  return _spectralClusteringDeathcountry.apply(this, arguments);\n}\nfunction spectralClusteringMostExhibited(_x23, _x24, _x25) {\n  return _spectralClusteringMostExhibited.apply(this, arguments);\n}\nfunction _spectralClusteringMostExhibited() {\n  _spectralClusteringMostExhibited = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee21(min, max, k) {\n    var _yield$findAllMostExh, _yield$findAllMostExh2, artists, relationships, artistsWithClusters;\n    return _regeneratorRuntime().wrap(function _callee21$(_context21) {\n      while (1) switch (_context21.prev = _context21.next) {\n        case 0:\n          _context21.prev = 0;\n          if (!(latestMinLimit != min || latestMaxLimit != max || latestValue !== 'mostexhibited')) {\n            _context21.next = 13;\n            break;\n          }\n          _context21.next = 4;\n          return findAllMostExhibitedInTechniqueAmount(min, max);\n        case 4:\n          _yield$findAllMostExh = _context21.sent;\n          _yield$findAllMostExh2 = _slicedToArray(_yield$findAllMostExh, 2);\n          artists = _yield$findAllMostExh2[0];\n          relationships = _yield$findAllMostExh2[1];\n          latestArtists = artists;\n          latestRelationships = relationships;\n          latestMinLimit = min;\n          latestMaxLimit = max;\n          latestValue = 'mostexhibited';\n        case 13:\n          _context21.next = 15;\n          return spectralClustering(latestArtists, latestRelationships, k);\n        case 15:\n          artistsWithClusters = _context21.sent;\n          return _context21.abrupt(\"return\", artistsWithClusters);\n        case 19:\n          _context21.prev = 19;\n          _context21.t0 = _context21[\"catch\"](0);\n          console.error(_context21.t0);\n        case 22:\n        case \"end\":\n          return _context21.stop();\n      }\n    }, _callee21, null, [[0, 19]]);\n  }));\n  return _spectralClusteringMostExhibited.apply(this, arguments);\n}\nmodule.exports = {\n  findAllNationalityTechnique: findAllNationalityTechnique,\n  findAllBirthcountryTechnique: findAllBirthcountryTechnique,\n  findAllDeathcountryTechnique: findAllDeathcountryTechnique,\n  findAllMostExhibitedInTechnique: findAllMostExhibitedInTechnique,\n  findAllTechniques: findAllTechniques,\n  findAllNationalityTechniqueAmount: findAllNationalityTechniqueAmount,\n  findAllBirthcountryTechniqueAmount: findAllBirthcountryTechniqueAmount,\n  findAllDeathcountryTechniqueAmount: findAllDeathcountryTechniqueAmount,\n  findAllMostExhibitedInTechniqueAmount: findAllMostExhibitedInTechniqueAmount,\n  spectralClusteringNationality: spectralClusteringNationality,\n  spectralClusteringBirthcountry: spectralClusteringBirthcountry,\n  spectralClusteringDeathcountry: spectralClusteringDeathcountry,\n  spectralClusteringMostExhibited: spectralClusteringMostExhibited\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":{"version":3,"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","_catch","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","key","info","error","_asyncToGenerator","fn","self","args","arguments","apply","err","undefined","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","_toPropertyKey","_createClass","protoProps","staticProps","_toPrimitive","toPrimitive","String","Number","dbSemaphore","require","math","latestArtists","latestRelationships","latestMinLimit","latestMaxLimit","latestValue","Artist","data","id","firstname","lastname","birthyear","calculateYear","birthdate","toString","birthplace","deathyear","deathdate","deathplace","nationality","country","sex","title","techniques","artForms","amount_techniques","amountArtForms","distinct_techniques","distinctArtForms","europeanRegionNationality","determineRegion","most_exhibited_in","mostExhibitedInCountry","europeanRegionMostExhibited","most_exhibited_in_amount","mostExhibitedInCountryAmount","total_exhibited_artworks","TotalExhibitedArtworks","deathcountry","deathCountry","europeanRegionDeath","birthcountry","birthCountry","europeanRegionBirth","total_exhibitions","TotalExhibitions","techniques_freq","artFormsFreq","cluster","date","year","parseInt","split","countryCode","region","europeanRegions","includes","exhibited_with","startData","endData","relationshipData","startId","Math","min","endId","max","sharedExhibitions","sharedExhibitionMinArtworks","findAllNationalityTechnique","_ref","_callee2","_require","session","_callee2$","_context2","runExclusive","_callee","result","_callee$","_context","console","log","run","processResult","findAllBirthcountryTechnique","_ref3","_callee4","_require2","_callee4$","_context4","_callee3","_callee3$","_context3","findAllDeathcountryTechnique","_ref5","_callee6","_require3","_callee6$","_context6","_callee5","_callee5$","_context5","findAllMostExhibitedInTechnique","_ref7","_callee8","_require4","_callee8$","_context8","_callee7","_callee7$","_context7","findAllTechniques","_ref9","_callee10","_require5","_callee10$","_context10","_callee9","_callee9$","_context9","normalizeLogarithmically","logMaxValue","log1p","_toConsumableArray","logMinValue","range","normalized","Map","set","spectralClustering","_x","_x2","_x3","_spectralClustering","_callee17","artists","relationships","k","sharedExhibitionValues","normalizedSharedExhibitionValues","size","adjacencyMatrix","degreeMatrix","laplacianMatrix","eigensystem","firstThreeEigenvectors","featureMatrixU","vector","featureMatrixUTransposed","clusters","clusterArray","clusterAssignments","clusteredArtists","clusterMap","intraClusterRelationships","singleInterClusterRelationships","interClusterRelationshipsMap","interClusterRelationships","_callee17$","_context17","relationship","zeros","findIndex","artist","j","weight","get","map","index","matrix","sum","_data","subtract","eigs","eigenvectors","toArray","transpose","kMeansClustering","redistributeClusters","_objectSpread","Array","from","clusterIndex","clusterA","clusterB","concat","has","aggregatedRelationship","rel","minClusterSize","maxClusterSize","centroids","calculateCentroids","clusterSizes","fill","needsHelp","filter","stat","need","point","idx","currentClusterIndex","closest","distance","Infinity","centroid","euclideanDistance","reduce","mean","m","maxIterations","bestCentroids","bestClusterAssignments","minTotalDistance","initialization","initializeCentroids","iteration","newClusterAssignments","assignPointsToCentroids","newCentroids","updateCentroids","centroidsEqual","totalDistance","calculateTotalDistance","_loop","_loop2","farthestPointIndex","maxDistance","minDistance","nearestClusterIndex","floor","random","_loop3","distances","b","probabilities","cumulativeProbabilities","acc","prob","rand","nextCentroidIndex","cumProb","_iterator","_createForOfIteratorHelper","_step","closestCentroidIndex","clusterCounts","centroids1","centroids2","point1","point2","pow","sqrt","artistsId","Set","records","record","start","properties","end","segments","relation","artistId","add","otherArtistId","otherArtist","removeEmptyClusters","nonEmptyClusters","newClusterMap","newIndex","newClusteredArtists","newClusterId","findAllNationalityTechniqueAmount","_ref11","_callee11","minLimit","maxLimit","query","_callee11$","_context11","streamQuery","_x4","_x5","findAllBirthcountryTechniqueAmount","_ref12","_callee12","_callee12$","_context12","_x6","_x7","findAllDeathcountryTechniqueAmount","_ref13","_callee13","_callee13$","_context13","_x8","_x9","findAllMostExhibitedInTechniqueAmount","_ref14","_callee14","_callee14$","_context14","_x10","_x11","_ref15","_callee16","params","_require6","_callee16$","_context16","_callee15","_callee15$","_context15","subscribe","onNext","onCompleted","onError","_x12","_x13","spectralClusteringNationality","_x14","_x15","_x16","_spectralClusteringNationality","_callee18","_yield$findAllNationa","_yield$findAllNationa2","artistsWithClusters","_callee18$","_context18","_slicedToArray","t0","spectralClusteringBirthcountry","_x17","_x18","_x19","_spectralClusteringBirthcountry","_callee19","_yield$findAllBirthco","_yield$findAllBirthco2","_callee19$","_context19","spectralClusteringDeathcountry","_x20","_x21","_x22","_spectralClusteringDeathcountry","_callee20","_yield$findAllDeathco","_yield$findAllDeathco2","_callee20$","_context20","spectralClusteringMostExhibited","_x23","_x24","_x25","_spectralClusteringMostExhibited","_callee21","_yield$findAllMostExh","_yield$findAllMostExh2","_callee21$","_context21","module","exports"],"sourceRoot":"C:\\Users\\Luisa Müller\\Documents\\Studium\\Projekt\\BachelorProject\\backend\\src\\models\\","sources":["artist.js"],"sourcesContent":["const dbSemaphore = require('../semaphoreHandler');\r\nconst math = require('mathjs');\r\n\r\nlet latestArtists = [];\r\nlet latestRelationships = [];\r\nlet latestMinLimit = -1;\r\nlet latestMaxLimit = -1;\r\nlet latestValue = '';\r\n\r\n\r\nclass Artist {\r\n    constructor(data) {\r\n        this.id = Number(data.id); \r\n        this.firstname = data.firstname;\r\n        this.lastname = data.lastname;\r\n        this.birthyear = this.calculateYear(data.birthdate.toString());\r\n        this.birthplace = data.birthplace;\r\n        this.deathyear = this.calculateYear(data.deathdate.toString());\r\n        this.deathplace = data.deathplace;\r\n        this.nationality = data.country;\r\n        this.sex = data.sex;\r\n        this.title = data.title;\r\n        this.techniques = data.artForms;\r\n        this.amount_techniques=data.amountArtForms;\r\n        this.distinct_techniques=data.distinctArtForms;\r\n        this.europeanRegionNationality = this.determineRegion(data.country);\r\n        this.most_exhibited_in = data.mostExhibitedInCountry;\r\n        this.europeanRegionMostExhibited = this.determineRegion(data.mostExhibitedInCountry);\r\n        this.most_exhibited_in_amount = data.mostExhibitedInCountryAmount;\r\n        this.total_exhibited_artworks = data.TotalExhibitedArtworks;\r\n        this.deathcountry = data.deathCountry;\r\n        this.europeanRegionDeath = this.determineRegion(data.deathCountry);\r\n        this.birthcountry = data.birthCountry;\r\n        this.europeanRegionBirth = this.determineRegion(data.birthCountry);\r\n        this.total_exhibitions = data.TotalExhibitions;\r\n        this.techniques_freq = data.artFormsFreq;\r\n        this.cluster = -1; // Default value\r\n    }\r\n    calculateYear(date) {\r\n        if (!date) return null; // Handle cases where birthdate is not provided\r\n        const year = parseInt(date.split('-')[0]);\r\n        return year;\r\n    }\r\n    determineRegion(countryCode) {\r\n        for (const region in europeanRegions) {\r\n            if (europeanRegions[region].includes(countryCode)) {\r\n                return region;\r\n            }\r\n        }\r\n        return '\\\\N'; // Return null if no region matches\r\n    }\r\n\r\n}\r\n\r\n// Define European regions based on country codes\r\nconst europeanRegions = {\r\n    \"North Europe\": [\"DK\", \"EE\", \"FI\", \"IE\", \"LT\", \"LV\", \"NO\", \"SE\", \"IS\"],\r\n    \"Western Europe\": [\"GB\", \"FR\", \"BE\", \"NL\", \"LU\", \"CH\", \"MC\", \"DE\", \"AT\"], // Added DE, AT\r\n    \"Southern Europe\": [\"PT\", \"ES\", \"IT\", \"GR\", \"HR\", \"BA\", \"RS\", \"ME\", \"SI\", \"MA\", \"GI\"],\r\n    \"Eastern Europe\": [\"RU\", \"UA\", \"BY\", \"BG\", \"RO\", \"MD\", \"AZ\", \"PL\", \"CZ\", \"SK\", \"HU\"], // Added PL, CZ, SK, HU\r\n    \"Others\": [\r\n      \"US\", \"AU\", \"GE\", \"MX\", \"AM\", \"IL\", \"CL\", \"AR\", \"CA\", \"DO\", \"PE\", \"JP\", \"TR\",\r\n      \"BR\", \"ZA\", \"NZ\", \"VE\", \"GT\", \"UY\", \"SV\", \"PY\", \"IN\", \"PF\", \"KZ\", \"UZ\", \"VN\", \r\n      \"NA\", \"JO\", \"IR\", \"KH\", \"JM\", \"SA\", \"DZ\", \"CN\", \"EG\", \"VI\", \"ID\", \"CU\", \"TN\", \r\n      \"MQ\", \"MU\", \"LK\", \"EC\", \"SG\", \"BL\", \"TH\", \"BO\"\r\n    ]\r\n  };\r\n  \r\n/*   const allCountries = [\r\n    \"GB\", \"ID\", \"UA\", \"CH\", \"RU\", \"NL\", \"DE\", \"BY\", \"IT\", \"LT\", \"US\", \"HU\", \"FR\", \"AU\", \"BE\", \"CZ\", \"AT\", \"NO\", \r\n    \"GR\", \"SE\", \"PL\", \"LV\", \"FI\", \"ES\", \"MD\", \"CA\", \"BG\", \"GE\", \"DZ\", \"MX\", \"AZ\", \"RO\", \"EE\", \"DK\", \"AR\", \"UY\", \r\n    \"CU\", \"PT\", \"HR\", \"SI\", \"TN\", \"EG\", \"SK\", \"TR\", \"VI\", \"RS\", \"IE\", \"DO\", \"JP\", \"MQ\", \"IN\", \"MU\", \"ME\", \"CL\", \r\n    \"ZA\", \"NZ\", \"KH\", \"LU\", \"GI\", \"VE\", \"GT\", \"SV\", \"PY\", \"LK\", \"BA\", \"EC\", \"BR\", \"SG\", \"BL\", \"PE\", \"TH\", \"PF\", \r\n    \"AM\", \"IL\", \"MC\", \"CN\", \"UZ\", \"KZ\", \"MA\", \"BO\", \"VN\", \"NA\", \"JO\", \"IR\", \"JM\", \"SA\"\r\n  ]\r\n  // Create a set of all countries in europeanRegions\r\nconst categorizedCountries = new Set();\r\nObject.values(europeanRegions).forEach(regionCountries => {\r\n  regionCountries.forEach(country => {\r\n    categorizedCountries.add(country);\r\n  });\r\n});\r\n\r\n// Find countries in allCountries that are not in categorizedCountries\r\nconst uncategorizedCountries = allCountries.filter(country => !categorizedCountries.has(country));\r\n\r\nconsole.log(uncategorizedCountries);\r\n   */\r\n\r\nclass exhibited_with {\r\n    constructor(startData, endData, relationshipData) {\r\n        this.startId = Math.min(startData.id, endData.id);\r\n        this.endId = Math.max(startData.id, endData.id);\r\n        this.sharedExhibitions = relationshipData.sharedExhibitions;\r\n        this.sharedExhibitionMinArtworks = relationshipData.sharedExhibitionMinArtworks;\r\n    }\r\n} \r\n\r\nconst findAllNationalityTechnique = async () => {\r\n    const { session } = require('../db');\r\n    return await dbSemaphore.runExclusive(async () => {\r\n        console.log('Semaphore acquired by normal')\r\n    \r\n    const result = await session.run(\r\n   // Collect 25 distinct artists based on some criteria\r\n    `MATCH (a:Artist)\r\n    WHERE a.artForms <> [] AND a.country <> '\\\\N'\r\n    WITH a\r\n    LIMIT 25\r\n    WITH collect(a) AS selectedArtists\r\n\r\n    // For each artist in the selected group, find all exhibited relationships within this group\r\n    UNWIND selectedArtists AS a\r\n    MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\r\n    WHERE b IN selectedArtists\r\n    RETURN p\r\n    `);\r\n\r\n    return await processResult(result); \r\n});\r\n};\r\n\r\n/* const findAllNationalityTechniqueAmount = async (minLimit, maxLimit) => {\r\n    const { session } = require('../db');\r\n    return await dbSemaphore.runExclusive(async () => {\r\n        console.log('Semaphore acquired by amount')\r\n    const result = await session.run(\r\n   // Collect artists where total\r\n    `MATCH (a:Artist)\r\n    WHERE a.artForms <> [] AND a.country <> '\\\\N' AND a.TotalExhibitedArtworks >= $minLimit AND a.TotalExhibitedArtworks <= $maxLimit\r\n    WITH a\r\n    WITH collect(a) AS selectedArtists\r\n\r\n    // For each artist in the selected group, find all exhibited relationships within this group\r\n    UNWIND selectedArtists AS a\r\n    MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\r\n    WHERE b IN selectedArtists\r\n    RETURN p\r\n    `\r\n    ,{ minLimit: parseInt(minLimit), maxLimit: parseInt(maxLimit) } );// Ensure these are correctly passed as integers);\r\n    \r\n\r\n    return await processResult(result);\r\n});\r\n}; */\r\n\r\n\r\nconst findAllBirthcountryTechnique = async () => {\r\n    const { session } = require('../db');\r\n    return await dbSemaphore.runExclusive(async () => {\r\n    const result = await session.run(\r\n   // Collect 25 distinct artists based on some criteria\r\n    `MATCH (a:Artist)\r\n    WHERE a.artForms <> [] AND a.birthCountry <> '\\\\N'\r\n    WITH a\r\n    LIMIT 25\r\n    WITH collect(a) AS selectedArtists\r\n\r\n    // For each artist in the selected group, find all exhibited relationships within this group\r\n    UNWIND selectedArtists AS a\r\n    MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\r\n    WHERE b IN selectedArtists\r\n    RETURN p\r\n    `);\r\n\r\n    return await processResult(result);\r\n});\r\n};\r\n\r\n/* const findAllBirthcountryTechniqueAmount = async (minLimit,maxLimit) => {\r\n    const { session } = require('../db');\r\n    return await dbSemaphore.runExclusive(async () => {\r\n    const result = await session.run(\r\n   // Collect 25 distinct artists based on some criteria\r\n    `MATCH (a:Artist) \r\n    WHERE a.artForms <> [] AND a.birthCountry <> '\\\\N' AND a.TotalExhibitedArtworks >= $minLimit AND a.TotalExhibitedArtworks <= $maxLimit\r\n    WITH a\r\n    WITH collect(a) AS selectedArtists\r\n\r\n    // For each artist in the selected group, find all exhibited relationships within this group\r\n    UNWIND selectedArtists AS a\r\n    MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\r\n    WHERE b IN selectedArtists\r\n    RETURN p\r\n    `\r\n    ,{ minLimit: parseInt(minLimit), maxLimit: parseInt(maxLimit) } );// Ensure these are correctly passed as integers);\r\n    \r\n\r\n    return await processResult(result);\r\n});\r\n}; */\r\n\r\nconst findAllDeathcountryTechnique = async () => {\r\n    const { session } = require('../db');\r\n    return await dbSemaphore.runExclusive(async () => {\r\n    const result = await session.run(\r\n   // Collect 25 distinct artists based on some criteria\r\n    `MATCH (a:Artist)\r\n    WHERE a.artForms <> [] AND a.deathCountry <> '\\\\N'\r\n    WITH a\r\n    LIMIT 25\r\n    WITH collect(a) AS selectedArtists\r\n\r\n    // For each artist in the selected group, find all exhibited relationships within this group\r\n    UNWIND selectedArtists AS a\r\n    MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\r\n    WHERE b IN selectedArtists\r\n    RETURN p\r\n    `);\r\n\r\n    return await processResult(result);\r\n\r\n});\r\n};\r\n/* \r\nconst findAllDeathcountryTechniqueAmount = async (minLimit,maxLimit) => {\r\n    const { session } = require('../db');\r\n    return await dbSemaphore.runExclusive(async () => {\r\n    const result = await session.run(\r\n   // Collect 25 distinct artists based on some criteria\r\n    `MATCH (a:Artist)\r\n    WHERE a.artForms <> [] AND a.deathCountry <> '\\\\N'  AND a.TotalExhibitedArtworks >= $minLimit AND a.TotalExhibitedArtworks <= $maxLimit\r\n    WITH a\r\n    WITH collect(a) AS selectedArtists\r\n\r\n    // For each artist in the selected group, find all exhibited relationships within this group\r\n    UNWIND selectedArtists AS a\r\n    MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\r\n    WHERE b IN selectedArtists\r\n    RETURN p\r\n    `\r\n    ,{ minLimit: parseInt(minLimit), maxLimit: parseInt(maxLimit) } );// Ensure these are correctly passed as integers);\r\n    \r\n\r\n    return await processResult(result);\r\n\r\n});\r\n}; */\r\n\r\n\r\nconst findAllMostExhibitedInTechnique = async () => {\r\n    const { session } = require('../db');\r\n    return await dbSemaphore.runExclusive(async () => {\r\n    const result = await session.run(\r\n   // Collect 25 distinct artists based on some criteria\r\n    `MATCH (a:Artist)\r\n    WHERE a.artForms <> [] AND a.mostExhibitedInCountry <> '\\\\N' AND a.unclearMostExhibitedInCountry = FALSE \r\n    WITH a\r\n    LIMIT 25\r\n    WITH collect(a) AS selectedArtists\r\n\r\n    // For each artist in the selected group, find all exhibited relationships within this group\r\n    UNWIND selectedArtists AS a\r\n    MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\r\n    WHERE b IN selectedArtists\r\n    RETURN p\r\n    `);\r\n\r\n    return await processResult(result);\r\n});\r\n};\r\n\r\n/* const findAllMostExhibitedInTechniqueAmount = async (minLimit,maxLimit) => {\r\n    const { session } = require('../db');\r\n    return await dbSemaphore.runExclusive(async () => {\r\n    const result = await session.run(\r\n   // Collect 25 distinct artists based on some criteria\r\n    `MATCH (a:Artist)\r\n    WHERE a.artForms <> [] AND a.mostExhibitedInCountry <> '\\\\N' AND a.unclearMostExhibitedInCountry = FALSE  AND a.TotalExhibitedArtworks >= $minLimit AND a.TotalExhibitedArtworks <= $maxLimit\r\n    WITH a\r\n    WITH collect(a) AS selectedArtists\r\n\r\n    // For each artist in the selected group, find all exhibited relationships within this group\r\n    UNWIND selectedArtists AS a\r\n    MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\r\n    WHERE b IN selectedArtists\r\n    RETURN p\r\n    `\r\n    ,{ minLimit: parseInt(minLimit), maxLimit: parseInt(maxLimit) } );// Ensure these are correctly passed as integers);\r\n    \r\n\r\n    return await processResult(result);\r\n\r\n});\r\n}; */\r\n\r\n\r\nconst findAllTechniques = async () => {\r\n    const { session } = require('../db');\r\n    return await dbSemaphore.runExclusive(async () => {\r\n    const result = await session.run(\r\n   // Collect 25 distinct artists based on some criteria\r\n    `MATCH (a:Artist)\r\n    WHERE a.artForms <> [] AND a.artFormsFreq <> '{}'\r\n    WITH a\r\n    LIMIT 25\r\n    WITH collect(a) AS selectedArtists\r\n\r\n    // For each artist in the selected group, find all exhibited relationships within this group\r\n    UNWIND selectedArtists AS a\r\n    MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\r\n    WHERE b IN selectedArtists\r\n    RETURN p\r\n    `);\r\n\r\n    return await processResult(result);\r\n\r\n});\r\n};\r\n\r\n\r\n\r\n  // Assuming 'artists' is an array of artist nodes and 'relationships' is an array of edges with weights\r\nconst normalizeLogarithmically = (values) => {\r\n    const logMaxValue = Math.log1p(Math.max(...values.values()));\r\n    const logMinValue = Math.log1p(Math.min(...values.values()));\r\n    const range = logMaxValue - logMinValue;\r\n    const normalized = new Map();\r\n   \r\n    values.forEach((value, id) => {\r\n        normalized.set(id, (Math.log1p(value) - logMinValue) / range); // Normalize by dividing by the max degree\r\n    });\r\n    return normalized;\r\n};\r\n\r\nasync function spectralClustering(artists, relationships, k) {\r\n    console.log('cluster')\r\n    // Step 0: Extract sharedExhibitionMinArtworks values for normalization\r\n    const sharedExhibitionValues = new Map();\r\n    relationships.forEach(relationship => {\r\n        const id = relationship.startId;\r\n        const value = relationship.sharedExhibitionMinArtworks;\r\n        sharedExhibitionValues.set(id, value);\r\n    });\r\n\r\n    // Step 0.1: Normalize sharedExhibitionMinArtworks values\r\n    const normalizedSharedExhibitionValues = normalizeLogarithmically(sharedExhibitionValues);\r\n\r\n    // Step 1: Construct the adjacency matrix\r\n    const size = artists.length;\r\n    const adjacencyMatrix = math.zeros(size, size);\r\n\r\n    relationships.forEach(relationship => {\r\n        const i = artists.findIndex(artist => artist.id === relationship.startId);\r\n        const j = artists.findIndex(artist => artist.id === relationship.endId);\r\n        const weight = normalizedSharedExhibitionValues.get(relationship.startId);\r\n\r\n        adjacencyMatrix.set([i, j], Number(weight));\r\n        adjacencyMatrix.set([j, i], Number(weight)); // since it's an undirected graph\r\n    });   \r\n\r\n    // Step 2: Construct the degree matrix\r\n    const degreeMatrix = adjacencyMatrix.map((value, index, matrix) => {\r\n        return index[0] === index[1] ? Number(math.sum(matrix._data[index[0]])) : 0;\r\n    });\r\n\r\n    // Step 3: Construct the Laplacian matrix\r\n    const laplacianMatrix = math.subtract(degreeMatrix, adjacencyMatrix);\r\n\r\n   // Step 4: Compute the eigenvalues and eigenvectors\r\n   const eigensystem = math.eigs(laplacianMatrix);\r\n\r\n   // Check if the eigenvalues and eigenvectors are defined and not empty\r\n   if (!eigensystem || eigensystem.values.length === 0) {\r\n       throw new Error(\"Eigenvectors are undefined or missing data.\");\r\n   }\r\n \r\n\r\n   // Extract the first three eigenvectors\r\nconst firstThreeEigenvectors = eigensystem.eigenvectors.slice(0, k);\r\n\r\n// Initialize the feature matrix\r\nconst featureMatrixU = [];\r\n\r\n// Loop over the eigenvectors\r\nfor (let i = 0; i < firstThreeEigenvectors.length; i++) {\r\n    const vector = firstThreeEigenvectors[i].vector.toArray(); // Convert DenseMatrix to array\r\n    featureMatrixU.push(vector); // Push the vector as a column in the feature matrix\r\n}\r\n\r\n// Transpose the feature matrix to have columns as data points\r\nconst featureMatrixUTransposed = math.transpose(featureMatrixU);\r\n      // Perform initial kMeans Clustering\r\n      let clusters = kMeansClustering(featureMatrixUTransposed, k, 1); // Assume minClusterSize = 1 for basic example\r\n\r\n      // Redistribute clusters here\r\n      clusters = redistributeClusters(featureMatrixUTransposed, clusters, k, 5, 15); // Example sizes\r\n  \r\n   // Assuming kMeansClustering and other related functions are d\r\n   \r\n    // Associate artists with their clusters\r\n    const clusterArray = artists.map((artist, index) => ({\r\n        ...artist,\r\n        cluster: clusters[index]\r\n    }));\r\n    // Associate artists with their clusters\r\n    const clusterAssignments = artists.map((artist, index) => {\r\n    artist.cluster = clusters[index]; // Assign the cluster to the artist\r\n        \r\n});\r\n   \r\n    // Initialize an array of k empty arrays for the clusters\r\nconst clusteredArtists = Array.from({ length: k }, () => []);\r\n\r\n// Populate the cluster arrays with artists\r\nartists.forEach((artist, index) => {\r\n  const clusterIndex = clusters[index]; // Retrieve the cluster index assigned to the artist\r\n  clusteredArtists[clusterIndex].push(artist); // Add the artist to the corresponding cluster\r\n});\r\n\r\nconst clusterMap = new Map();\r\nartists.forEach((artist, index) => {\r\n    clusterMap.set(artist.id, clusters[index]); // Correctly associate artist ID with cluster index\r\n});\r\n\r\n\r\nconst intraClusterRelationships = Array.from({ length: k }, () => []);\r\nconst singleInterClusterRelationships = Array.from({ length: k }, () => []);\r\nconst interClusterRelationshipsMap = new Map();\r\n\r\nrelationships.forEach(relationship => {\r\n    const clusterA = clusterMap.get(relationship.startId);\r\n    const clusterB = clusterMap.get(relationship.endId);\r\n\r\n    if (clusterA === clusterB) {\r\n        intraClusterRelationships[clusterA].push(relationship);\r\n    } else {\r\n        singleInterClusterRelationships[clusterA].push(relationship);\r\n        singleInterClusterRelationships[clusterB].push(relationship);\r\n        const key = `${Math.min(clusterA, clusterB)}-${Math.max(clusterA, clusterB)}`;\r\n        if (!interClusterRelationshipsMap.has(key)) {\r\n            interClusterRelationshipsMap.set(key, { \r\n                startId: Math.min(clusterA, clusterB), \r\n                endId: Math.max(clusterA, clusterB), \r\n                sharedExhibitions: 0, \r\n                sharedExhibitionMinArtworks: 0 \r\n            });\r\n        }\r\n        const aggregatedRelationship = interClusterRelationshipsMap.get(key);\r\n        aggregatedRelationship.sharedExhibitions += relationship.sharedExhibitions;\r\n        aggregatedRelationship.sharedExhibitionMinArtworks += relationship.sharedExhibitionMinArtworks;\r\n    }\r\n});\r\n\r\nconst interClusterRelationships = Array.from(interClusterRelationshipsMap.values()).map(rel => \r\n    new exhibited_with(\r\n        { id: rel.startId }, \r\n        { id: rel.endId }, \r\n        { sharedExhibitions: rel.sharedExhibitions, sharedExhibitionMinArtworks: rel.sharedExhibitionMinArtworks }\r\n    )\r\n);\r\n\r\nconsole.log('cluster finished')\r\nreturn [\r\n    clusteredArtists,\r\n    intraClusterRelationships,\r\n    interClusterRelationships,  // You might want to further organize this by cluster pairs if needed\r\n    singleInterClusterRelationships\r\n];\r\n\r\n}\r\n\r\nfunction redistributeClusters(data, clusters, k, minClusterSize, maxClusterSize) {\r\n    const centroids = calculateCentroids(data, clusters, k);\r\n    let clusterSizes = new Array(k).fill(0);\r\n    clusters.forEach(cluster => clusterSizes[cluster]++);\r\n\r\n    const needsHelp = clusterSizes.map((size, index) => ({\r\n        index,\r\n        size,\r\n        type: size < minClusterSize ? 'undersized' : (size > maxClusterSize ? 'oversized' : 'ok')\r\n    })).filter(stat => stat.type !== 'ok');\r\n\r\n    needsHelp.forEach(need => {\r\n        if (need.type === 'oversized') {\r\n            data.forEach((point, idx) => {\r\n                if (clusters[idx] === need.index) {\r\n                    const currentClusterIndex = need.index;\r\n                    let closest = { index: -1, distance: Infinity };\r\n                    \r\n                    centroids.forEach((centroid, index) => {\r\n                        if (index !== currentClusterIndex && clusterSizes[index] < maxClusterSize) {\r\n                            const distance = euclideanDistance(point, centroid);\r\n                            if (distance < closest.distance) {\r\n                                closest = { index, distance };\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    if (closest.index !== -1) {\r\n                        clusters[idx] = closest.index;\r\n                        clusterSizes[currentClusterIndex]--;\r\n                        clusterSizes[closest.index]++;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    });\r\n\r\n    return clusters;\r\n}\r\n\r\nfunction calculateCentroids(data, clusters, k) {\r\n    const centroids = Array(k).fill(null).map(() => []);\r\n    data.forEach((point, index) => {\r\n        centroids[clusters[index]].push(point);\r\n    });\r\n    return centroids.map(cluster => cluster.reduce((mean, point) => \r\n        mean.map((m, idx) => m + point[idx] / cluster.length), new Array(data[0].length).fill(0))\r\n    );\r\n}\r\n\r\nfunction kMeansClustering(data, k, minClusterSize) {\r\n    const maxIterations = 500;\r\n    let bestCentroids = [];\r\n    let bestClusterAssignments = [];\r\n    let minTotalDistance = Infinity;\r\n\r\n    for (let initialization = 0; initialization < 10; initialization++) { // Try multiple random initializations\r\n        let centroids = initializeCentroids(data, k);\r\n        let clusterAssignments = [];\r\n\r\n        for (let iteration = 0; iteration < maxIterations; iteration++) {\r\n            const newClusterAssignments = assignPointsToCentroids(data, centroids);\r\n            const newCentroids = updateCentroids(data, newClusterAssignments, k);\r\n\r\n            if (centroidsEqual(newCentroids, centroids)) {\r\n                clusterAssignments = newClusterAssignments;\r\n                break;\r\n            }\r\n\r\n            centroids = newCentroids;\r\n        }\r\n\r\n        const totalDistance = calculateTotalDistance(data, centroids, clusterAssignments);\r\n        if (totalDistance < minTotalDistance) {\r\n            bestCentroids = centroids;\r\n            bestClusterAssignments = clusterAssignments;\r\n            minTotalDistance = totalDistance;\r\n        }\r\n    }\r\n\r\n    // Ensure each cluster meets the minimum size requirement\r\n    let clusterSizes = new Array(k).fill(0);\r\n    bestClusterAssignments.forEach(clusterIndex => {\r\n        clusterSizes[clusterIndex]++;\r\n    });\r\n\r\n    // Reassign points until each cluster has at least minClusterSize points\r\n    for (let i = 0; i < k; i++) {\r\n        while (clusterSizes[i] < minClusterSize) {\r\n            // Find the point farthest from its centroid in cluster i\r\n            let farthestPointIndex = -1;\r\n            let maxDistance = -1;\r\n\r\n            data.forEach((point, index) => {\r\n                if (bestClusterAssignments[index] === i) {\r\n                    const distance = euclideanDistance(point, bestCentroids[i]);\r\n                    if (distance > maxDistance) {\r\n                        maxDistance = distance;\r\n                        farthestPointIndex = index;\r\n                    }\r\n                }\r\n            });\r\n\r\n            // Reassign the farthest point to the nearest cluster\r\n            let minDistance = Infinity;\r\n            let nearestClusterIndex = -1;\r\n            for (let j = 0; j < k; j++) {\r\n                if (j !== i) {\r\n                    const distance = euclideanDistance(data[farthestPointIndex], bestCentroids[j]);\r\n                    if (distance < minDistance) {\r\n                        minDistance = distance;\r\n                        nearestClusterIndex = j;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Reassign the point to the nearest cluster\r\n            bestClusterAssignments[farthestPointIndex] = nearestClusterIndex;\r\n            clusterSizes[i]--;\r\n            clusterSizes[nearestClusterIndex]++;\r\n        }\r\n    }\r\n\r\n    return bestClusterAssignments;\r\n}\r\n\r\nfunction initializeCentroids(data, k) {\r\n    const centroids = [data[Math.floor(Math.random() * data.length)]]; // Start with one random centroid\r\n    for (let i = 1; i < k; i++) {\r\n        const distances = data.map(point => Math.min(...centroids.map(centroid => euclideanDistance(point, centroid))));\r\n        const totalDistance = distances.reduce((a, b) => a + b, 0);\r\n        const probabilities = distances.map(distance => distance / totalDistance);\r\n        const cumulativeProbabilities = probabilities.reduce((acc, prob, index) => {\r\n            if (index === 0) acc.push(prob);\r\n            else acc.push(acc[index - 1] + prob);\r\n            return acc;\r\n        }, []);\r\n        \r\n        const rand = Math.random();\r\n        const nextCentroidIndex = cumulativeProbabilities.findIndex(cumProb => cumProb >= rand);\r\n        centroids.push(data[nextCentroidIndex]);\r\n    }\r\n    return centroids;\r\n}\r\n\r\nfunction assignPointsToCentroids(data, centroids) {\r\n    const clusterAssignments = [];\r\n    for (const point of data) {\r\n        let minDistance = Infinity;\r\n        let closestCentroidIndex = -1;\r\n        for (let i = 0; i < centroids.length; i++) {\r\n            const distance = euclideanDistance(point, centroids[i]);\r\n            if (distance < minDistance) {\r\n                minDistance = distance;\r\n                closestCentroidIndex = i;\r\n            }\r\n        }\r\n        clusterAssignments.push(closestCentroidIndex);\r\n    }\r\n    return clusterAssignments;\r\n}\r\n\r\nfunction updateCentroids(data, clusterAssignments, k) {\r\n    const newCentroids = new Array(k).fill(0).map(() => new Array(data[0].length).fill(0));\r\n    const clusterCounts = new Array(k).fill(0);\r\n\r\n    for (let i = 0; i < data.length; i++) {\r\n        const clusterIndex = clusterAssignments[i];\r\n        for (let j = 0; j < data[i].length; j++) {\r\n            newCentroids[clusterIndex][j] += data[i][j];\r\n        }\r\n        clusterCounts[clusterIndex]++;\r\n    }\r\n\r\n    for (let i = 0; i < k; i++) {\r\n        if (clusterCounts[i] !== 0) {\r\n            for (let j = 0; j < newCentroids[i].length; j++) {\r\n                newCentroids[i][j] /= clusterCounts[i];\r\n            }\r\n        } else {\r\n            // If no points were assigned to this cluster, keep the centroid unchanged\r\n        }\r\n    }\r\n\r\n    return newCentroids;\r\n}\r\n\r\nfunction centroidsEqual(centroids1, centroids2) {\r\n    for (let i = 0; i < centroids1.length; i++) {\r\n        for (let j = 0; j < centroids1[i].length; j++) {\r\n            if (centroids1[i][j] !== centroids2[i][j]) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction euclideanDistance(point1, point2) {\r\n    let sum = 0;\r\n    for (let i = 0; i < point1.length; i++) {\r\n        sum += (point1[i] - point2[i]) ** 2;\r\n    }\r\n    return Math.sqrt(sum);\r\n}\r\n\r\nfunction calculateTotalDistance(data, centroids, clusterAssignments) {\r\n    let totalDistance = 0;\r\n    for (let i = 0; i < data.length; i++) {\r\n        totalDistance += euclideanDistance(data[i], centroids[clusterAssignments[i]]);\r\n    }\r\n    return totalDistance;\r\n}\r\n\r\nconst processResult = (result) => {\r\n    const artistsId = new Set();\r\n    const relationships = [];\r\n    const artists = [];\r\n    \r\n    result.records.forEach(record => {\r\n        const relationship = record.get('p');\r\n\r\n        const startData = relationship.start.properties;\r\n        const endData = relationship.end.properties;\r\n        const relationshipData = relationship.segments[0].relationship.properties;\r\n        const relation = new exhibited_with(startData, endData, relationshipData);\r\n        \r\n        relationships.push(relation);\r\n    \r\n        // Check if the artist with the same ID hasn't been created yet\r\n        const artistId = startData.id;\r\n        if (!artistsId.has(artistId)) {\r\n            const artist = new Artist(startData);\r\n            artistsId.add(artistId);\r\n            artists.push(artist);\r\n            // Store the artist object as needed\r\n        }\r\n    \r\n        const otherArtistId = endData.id;\r\n        if (!artistsId.has(otherArtistId)) {\r\n            const otherArtist = new Artist(endData);\r\n            artistsId.add(otherArtistId);\r\n            artists.push(otherArtist);\r\n        }\r\n    });\r\n\r\n    return [artists, relationships];\r\n};\r\n\r\nfunction removeEmptyClusters(clusteredArtists) {\r\n    // Remove empty clusters and reassign IDs\r\n    const nonEmptyClusters = clusteredArtists.filter(cluster => cluster.length > 0);\r\n    const newClusterMap = new Map();\r\n\r\n    nonEmptyClusters.forEach((cluster, newIndex) => {\r\n        cluster.forEach(artist => {\r\n            newClusterMap.set(artist.id, newIndex);\r\n        });\r\n    });\r\n\r\n    const newClusteredArtists = Array.from({ length: nonEmptyClusters.length }, () => []);\r\n\r\n    clusteredArtists.forEach(cluster => {\r\n        cluster.forEach(artist => {\r\n            const newClusterId = newClusterMap.get(artist.id);\r\n            newClusteredArtists[newClusterId].push(artist);\r\n            artist.cluster = newClusterId; // Update the artist's cluster ID\r\n        });\r\n    });\r\n\r\n    return newClusteredArtists;\r\n}\r\n\r\n\r\n\r\nconst findAllNationalityTechniqueAmount = async (minLimit, maxLimit) => {\r\n    const query = `\r\n        MATCH (a:Artist)\r\n        WHERE a.artForms <> [] AND a.country <> '\\\\N' AND a.TotalExhibitedArtworks >= $minLimit AND a.TotalExhibitedArtworks <= $maxLimit\r\n        WITH a\r\n        WITH collect(a) AS selectedArtists\r\n\r\n        UNWIND selectedArtists AS a\r\n        MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\r\n        WHERE b IN selectedArtists\r\n        RETURN p\r\n    `;\r\n    return streamQuery(query, { minLimit: parseInt(minLimit), maxLimit: parseInt(maxLimit) });\r\n};\r\n\r\nconst findAllBirthcountryTechniqueAmount = async (minLimit, maxLimit) => {\r\n    const query = `\r\n        MATCH (a:Artist)\r\n        WHERE a.artForms <> [] AND a.birthCountry <> '\\\\N' AND a.TotalExhibitedArtworks >= $minLimit AND a.TotalExhibitedArtworks <= $maxLimit\r\n        WITH a\r\n        WITH collect(a) AS selectedArtists\r\n\r\n        UNWIND selectedArtists AS a\r\n        MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\r\n        WHERE b IN selectedArtists\r\n        RETURN p\r\n    `;\r\n    return streamQuery(query, { minLimit: parseInt(minLimit), maxLimit: parseInt(maxLimit) });\r\n};\r\n\r\nconst findAllDeathcountryTechniqueAmount = async (minLimit, maxLimit) => {\r\n    const query = `\r\n        MATCH (a:Artist)\r\n        WHERE a.artForms <> [] AND a.deathCountry <> '\\\\N' AND a.TotalExhibitedArtworks >= $minLimit AND a.TotalExhibitedArtworks <= $maxLimit\r\n        WITH a\r\n        WITH collect(a) AS selectedArtists\r\n\r\n        UNWIND selectedArtists AS a\r\n        MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\r\n        WHERE b IN selectedArtists\r\n        RETURN p\r\n    `;\r\n    return streamQuery(query, { minLimit: parseInt(minLimit), maxLimit: parseInt(maxLimit) });\r\n};\r\n\r\nconst findAllMostExhibitedInTechniqueAmount = async (minLimit, maxLimit) => {\r\n    const query = `\r\n        MATCH (a:Artist)\r\n        WHERE a.artForms <> [] AND a.mostExhibitedInCountry <> '\\\\N' AND a.unclearMostExhibitedInCountry = FALSE AND a.TotalExhibitedArtworks >= $minLimit AND a.TotalExhibitedArtworks <= $maxLimit\r\n        WITH a\r\n        WITH collect(a) AS selectedArtists\r\n\r\n        UNWIND selectedArtists AS a\r\n        MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\r\n        WHERE b IN selectedArtists\r\n        RETURN p\r\n    `;\r\n    return streamQuery(query, { minLimit: parseInt(minLimit), maxLimit: parseInt(maxLimit) });\r\n};\r\nconst streamQuery = async (query, params) => {\r\n    const { session } = require('../db');\r\n    return await dbSemaphore.runExclusive(async () => {\r\n        const result = session.run(query, params);\r\n\r\n        const artistsId = new Set();\r\n        const relationships = [];\r\n        const artists = [];\r\n\r\n        await new Promise((resolve, reject) => {\r\n            result.subscribe({\r\n                onNext: record => {\r\n                    const relationship = record.get('p');\r\n\r\n                    const startData = relationship.start.properties;\r\n                    const endData = relationship.end.properties;\r\n                    const relationshipData = relationship.segments[0].relationship.properties;\r\n                    const relation = new exhibited_with(startData, endData, relationshipData);\r\n\r\n                    relationships.push(relation);\r\n\r\n                    const artistId = startData.id;\r\n                    if (!artistsId.has(artistId)) {\r\n                        const artist = new Artist(startData);\r\n                        artistsId.add(artistId);\r\n                        artists.push(artist);\r\n                    }\r\n\r\n                    const otherArtistId = endData.id;\r\n                    if (!artistsId.has(otherArtistId)) {\r\n                        const otherArtist = new Artist(endData);\r\n                        artistsId.add(otherArtistId);\r\n                        artists.push(otherArtist);\r\n                    }\r\n                },\r\n                onCompleted: () => {\r\n                    resolve([artists, relationships]);\r\n                },\r\n                onError: error => {\r\n                    reject(error);\r\n                },\r\n            });\r\n        });\r\n\r\n        return [artists, relationships];\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\nasync function spectralClusteringNationality(min, max, k) {\r\n    try {\r\n        // To only retrieve the artists, when min/max got changed\r\n        if(latestMinLimit!=min || latestMaxLimit!=max  || latestValue !== 'nationality')    {\r\n            const [artists, relationships] = await findAllNationalityTechniqueAmount(min, max);\r\n            latestArtists = artists;\r\n            latestRelationships = relationships;\r\n            latestMinLimit=min;\r\n            latestMaxLimit=max;\r\n            latestValue = 'nationality';\r\n            console.log( latestMinLimit, latestMaxLimit)\r\n        }\r\n        const artistsWithClusters= await spectralClustering(latestArtists, latestRelationships, k);\r\n\r\n        return artistsWithClusters;\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n}\r\nasync function spectralClusteringBirthcountry(min, max, k) {\r\n    try {\r\n        if(latestMinLimit!=min || latestMaxLimit!=max  || latestValue !== 'birthcountry')    {\r\n            const [artists, relationships] = await findAllBirthcountryTechniqueAmount(min, max);\r\n            latestArtists = artists;\r\n            latestRelationships = relationships;\r\n            latestMinLimit=min;\r\n            latestMaxLimit=max;\r\n            latestValue = 'birthcountry';\r\n        }\r\n        const artistsWithClusters= await spectralClustering(latestArtists, latestRelationships, k);\r\n        return artistsWithClusters;\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n}\r\nasync function spectralClusteringDeathcountry(min, max, k) \r\n{\r\n    try {\r\n        if(latestMinLimit!=min || latestMaxLimit!=max  || latestValue !== 'deathcountry')    {\r\n            const [artists, relationships] = await findAllDeathcountryTechniqueAmount(min, max);\r\n            latestArtists = artists;\r\n            latestRelationships = relationships;\r\n            latestMinLimit=min;\r\n            latestMaxLimit=max;\r\n            latestValue = 'deathcountry';\r\n        }\r\n        const artistsWithClusters= await spectralClustering(latestArtists, latestRelationships, k);\r\n        return artistsWithClusters;\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n}\r\nasync function spectralClusteringMostExhibited(min, max, k) {\r\n    try {\r\n        if(latestMinLimit!=min || latestMaxLimit!=max  || latestValue !== 'mostexhibited')    {\r\n            const [artists, relationships] = await findAllMostExhibitedInTechniqueAmount(min, max);\r\n            latestArtists = artists;\r\n            latestRelationships = relationships;\r\n            latestMinLimit=min;\r\n            latestMaxLimit=max;\r\n            latestValue = 'mostexhibited';\r\n        }\r\n        const artistsWithClusters= await spectralClustering(latestArtists, latestRelationships, k);\r\n        return artistsWithClusters;\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nmodule.exports = {\r\n    findAllNationalityTechnique,\r\n    findAllBirthcountryTechnique,\r\n    findAllDeathcountryTechnique,\r\n    findAllMostExhibitedInTechnique,\r\n    findAllTechniques, \r\n    findAllNationalityTechniqueAmount, \r\n    findAllBirthcountryTechniqueAmount,\r\n    findAllDeathcountryTechniqueAmount,\r\n    findAllMostExhibitedInTechniqueAmount,\r\n    spectralClusteringNationality,\r\n    spectralClusteringBirthcountry,\r\n    spectralClusteringDeathcountry,\r\n    spectralClusteringMostExhibited\r\n};"],"mappings":"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","ignoreList":[]}},"mtime":1716656749296},"{\"assumptions\":{},\"sourceRoot\":\"C:\\\\Users\\\\Luisa Müller\\\\Documents\\\\Studium\\\\Projekt\\\\BachelorProject\\\\backend\\\\src\\\\\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"C:\\\\Users\\\\Luisa Müller\\\\Documents\\\\Studium\\\\Projekt\\\\BachelorProject\\\\backend\",\"filename\":\"C:\\\\Users\\\\Luisa Müller\\\\Documents\\\\Studium\\\\Projekt\\\\BachelorProject\\\\backend\\\\src\\\\semaphoreHandler.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\Luisa Müller\\\\Documents\\\\Studium\\\\Projekt\\\\BachelorProject\\\\backend\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-unicode-sets-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-class-static-block\",\"visitor\":{\"ClassBody\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-private-property-in-object\",\"visitor\":{\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":\"#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error\"},\"externalDependencies\":[]},{\"key\":\"transform-class-properties\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{\"loose\":\"#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error\"},\"externalDependencies\":[]},{\"key\":\"transform-private-methods\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{\"loose\":\"#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error\"},\"externalDependencies\":[]},{\"key\":\"transform-numeric-separator\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"BigIntLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-logical-assignment-operators\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-nullish-coalescing-operator\",\"visitor\":{\"LogicalExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-optional-chaining\",\"visitor\":{\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-json-strings\",\"visitor\":{\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-optional-catch-binding\",\"visitor\":{\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-async-generator-functions\",\"visitor\":{\"Program\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-object-rest-spread\",\"visitor\":{\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"DoWhileStatement\":{\"exit\":[null]},\"ForInStatement\":{\"exit\":[null]},\"ForStatement\":{\"exit\":[null]},\"WhileStatement\":{\"exit\":[null]},\"ForOfStatement\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null,null]},\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"StaticBlock\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-regenerator\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"CallExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-export-namespace-from\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"CallExpression\":{\"enter\":[null]},\"ImportExpression\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-dynamic-import\",\"visitor\":{\"Program\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-top-level-await\",\"visitor\":{\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-import-meta\",\"visitor\":{\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]}],\"presets\":[]}:7.24.4:development":{"value":{"code":"\"use strict\";\n\nvar _require = require('async-mutex'),\n  Semaphore = _require.Semaphore;\n\n// Create a semaphore with a count of 1 to act like a mutex\nvar dbSemaphore = new Semaphore(1);\nmodule.exports = dbSemaphore;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVxdWlyZSIsInJlcXVpcmUiLCJTZW1hcGhvcmUiLCJkYlNlbWFwaG9yZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IkM6XFxVc2Vyc1xcTHVpc2EgTcO8bGxlclxcRG9jdW1lbnRzXFxTdHVkaXVtXFxQcm9qZWt0XFxCYWNoZWxvclByb2plY3RcXGJhY2tlbmRcXHNyY1xcIiwic291cmNlcyI6WyJzZW1hcGhvcmVIYW5kbGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgU2VtYXBob3JlIH0gPSByZXF1aXJlKCdhc3luYy1tdXRleCcpO1xyXG5cclxuLy8gQ3JlYXRlIGEgc2VtYXBob3JlIHdpdGggYSBjb3VudCBvZiAxIHRvIGFjdCBsaWtlIGEgbXV0ZXhcclxuY29uc3QgZGJTZW1hcGhvcmUgPSBuZXcgU2VtYXBob3JlKDEpO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBkYlNlbWFwaG9yZTtcclxuIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUFBLFFBQUEsR0FBc0JDLE9BQU8sQ0FBQyxhQUFhLENBQUM7RUFBcENDLFNBQVMsR0FBQUYsUUFBQSxDQUFURSxTQUFTOztBQUVqQjtBQUNBLElBQU1DLFdBQVcsR0FBRyxJQUFJRCxTQUFTLENBQUMsQ0FBQyxDQUFDO0FBRXBDRSxNQUFNLENBQUNDLE9BQU8sR0FBR0YsV0FBVyIsImlnbm9yZUxpc3QiOltdfQ==","map":{"version":3,"names":["_require","require","Semaphore","dbSemaphore","module","exports"],"sourceRoot":"C:\\Users\\Luisa Müller\\Documents\\Studium\\Projekt\\BachelorProject\\backend\\src\\","sources":["semaphoreHandler.js"],"sourcesContent":["const { Semaphore } = require('async-mutex');\r\n\r\n// Create a semaphore with a count of 1 to act like a mutex\r\nconst dbSemaphore = new Semaphore(1);\r\n\r\nmodule.exports = dbSemaphore;\r\n"],"mappings":";;AAAA,IAAAA,QAAA,GAAsBC,OAAO,CAAC,aAAa,CAAC;EAApCC,SAAS,GAAAF,QAAA,CAATE,SAAS;;AAEjB;AACA,IAAMC,WAAW,GAAG,IAAID,SAAS,CAAC,CAAC,CAAC;AAEpCE,MAAM,CAACC,OAAO,GAAGF,WAAW","ignoreList":[]}},"mtime":1716656749303},"{\"assumptions\":{},\"sourceRoot\":\"C:\\\\Users\\\\Luisa Müller\\\\Documents\\\\Studium\\\\Projekt\\\\BachelorProject\\\\backend\\\\src\\\\routes\\\\\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"C:\\\\Users\\\\Luisa Müller\\\\Documents\\\\Studium\\\\Projekt\\\\BachelorProject\\\\backend\",\"filename\":\"C:\\\\Users\\\\Luisa Müller\\\\Documents\\\\Studium\\\\Projekt\\\\BachelorProject\\\\backend\\\\src\\\\routes\\\\artist.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\Luisa Müller\\\\Documents\\\\Studium\\\\Projekt\\\\BachelorProject\\\\backend\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-unicode-sets-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-class-static-block\",\"visitor\":{\"ClassBody\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-private-property-in-object\",\"visitor\":{\"BinaryExpression\":{\"enter\":[null]}},\"options\":{\"loose\":\"#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error\"},\"externalDependencies\":[]},{\"key\":\"transform-class-properties\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{\"loose\":\"#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error\"},\"externalDependencies\":[]},{\"key\":\"transform-private-methods\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{\"loose\":\"#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error\"},\"externalDependencies\":[]},{\"key\":\"transform-numeric-separator\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"BigIntLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-logical-assignment-operators\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-nullish-coalescing-operator\",\"visitor\":{\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-optional-chaining\",\"visitor\":{\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-json-strings\",\"visitor\":{\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-optional-catch-binding\",\"visitor\":{\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-async-generator-functions\",\"visitor\":{\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-object-rest-spread\",\"visitor\":{\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"DoWhileStatement\":{\"exit\":[null]},\"ForInStatement\":{\"exit\":[null]},\"ForStatement\":{\"exit\":[null]},\"WhileStatement\":{\"exit\":[null]},\"ForOfStatement\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null,null]},\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"StaticBlock\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-regenerator\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"CallExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-export-namespace-from\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"CallExpression\":{\"enter\":[null]},\"ImportExpression\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-dynamic-import\",\"visitor\":{\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-top-level-await\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-import-meta\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]}],\"presets\":[]}:7.24.4:development":{"value":{"code":"\"use strict\";\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _express = require(\"express\");\nvar _artist = _interopRequireDefault(require(\"../models/artist\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n// ROUTING\n/* app.METHOD(PATH, HANDLER)\r\nWhere:\r\n- `app` is an instance of `express`.\r\n- `METHOD` is an [HTTP request method], in lowercase.\r\n- `PATH` is a path on the server.\r\n- `HANDLER` is the function executed when the route is matched.\r\n*/\n\nvar artist = (0, _express.Router)();\nartist.get('/nationality/technique', /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(req, res) {\n    var result;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _artist[\"default\"].findAllNationalityTechnique();\n        case 3:\n          result = _context.sent;\n          res.json(result);\n          _context.next = 11;\n          break;\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          res.status(500).json({\n            message: \"Internal server error\"\n          });\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[0, 7]]);\n  }));\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}());\nartist.get('/birthcountry/technique', /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(req, res) {\n    var result;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return _artist[\"default\"].findAllBirthcountryTechnique();\n        case 3:\n          result = _context2.sent;\n          res.json(result);\n          _context2.next = 11;\n          break;\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.error(_context2.t0);\n          res.status(500).json({\n            message: \"Internal server error\"\n          });\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2, null, [[0, 7]]);\n  }));\n  return function (_x3, _x4) {\n    return _ref2.apply(this, arguments);\n  };\n}());\nartist.get('/deathcountry/technique', /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(req, res) {\n    var result;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return _artist[\"default\"].findAllDeathcountryTechnique();\n        case 3:\n          result = _context3.sent;\n          res.json(result);\n          _context3.next = 11;\n          break;\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error(_context3.t0);\n          res.status(500).json({\n            message: \"Internal server error\"\n          });\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3, null, [[0, 7]]);\n  }));\n  return function (_x5, _x6) {\n    return _ref3.apply(this, arguments);\n  };\n}());\nartist.get('/mostexhibitedincountry/technique', /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(req, res) {\n    var result;\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return _artist[\"default\"].findAllMostExhibitedInTechnique();\n        case 3:\n          result = _context4.sent;\n          res.json(result);\n          _context4.next = 11;\n          break;\n        case 7:\n          _context4.prev = 7;\n          _context4.t0 = _context4[\"catch\"](0);\n          console.error(_context4.t0);\n          res.status(500).json({\n            message: \"Internal server error\"\n          });\n        case 11:\n        case \"end\":\n          return _context4.stop();\n      }\n    }, _callee4, null, [[0, 7]]);\n  }));\n  return function (_x7, _x8) {\n    return _ref4.apply(this, arguments);\n  };\n}());\nartist.get('/technique', /*#__PURE__*/function () {\n  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(req, res) {\n    var result;\n    return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n      while (1) switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return _artist[\"default\"].findAllTechniques();\n        case 3:\n          result = _context5.sent;\n          res.json(result);\n          _context5.next = 11;\n          break;\n        case 7:\n          _context5.prev = 7;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.error(_context5.t0);\n          res.status(500).json({\n            message: \"Internal server error\"\n          });\n        case 11:\n        case \"end\":\n          return _context5.stop();\n      }\n    }, _callee5, null, [[0, 7]]);\n  }));\n  return function (_x9, _x10) {\n    return _ref5.apply(this, arguments);\n  };\n}());\nartist.get('/amount/nationality/technique', /*#__PURE__*/function () {\n  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(req, res) {\n    var minLimit, maxLimit, result;\n    return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n      while (1) switch (_context6.prev = _context6.next) {\n        case 0:\n          minLimit = req.query.minLimit;\n          maxLimit = req.query.maxLimit;\n          _context6.prev = 2;\n          _context6.next = 5;\n          return _artist[\"default\"].findAllNationalityTechniqueAmount(minLimit, maxLimit);\n        case 5:\n          result = _context6.sent;\n          res.json(result);\n          _context6.next = 13;\n          break;\n        case 9:\n          _context6.prev = 9;\n          _context6.t0 = _context6[\"catch\"](2);\n          console.error(_context6.t0);\n          res.status(500).json({\n            message: \"Internal server error\"\n          });\n        case 13:\n        case \"end\":\n          return _context6.stop();\n      }\n    }, _callee6, null, [[2, 9]]);\n  }));\n  return function (_x11, _x12) {\n    return _ref6.apply(this, arguments);\n  };\n}());\nartist.get('/amount/birthcountry/technique', /*#__PURE__*/function () {\n  var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(req, res) {\n    var minLimit, maxLimit, result;\n    return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n      while (1) switch (_context7.prev = _context7.next) {\n        case 0:\n          minLimit = req.query.minLimit;\n          maxLimit = req.query.maxLimit;\n          _context7.prev = 2;\n          _context7.next = 5;\n          return _artist[\"default\"].findAllBirthcountryTechniqueAmount(minLimit, maxLimit);\n        case 5:\n          result = _context7.sent;\n          res.json(result);\n          _context7.next = 13;\n          break;\n        case 9:\n          _context7.prev = 9;\n          _context7.t0 = _context7[\"catch\"](2);\n          console.error(_context7.t0);\n          res.status(500).json({\n            message: \"Internal server error\"\n          });\n        case 13:\n        case \"end\":\n          return _context7.stop();\n      }\n    }, _callee7, null, [[2, 9]]);\n  }));\n  return function (_x13, _x14) {\n    return _ref7.apply(this, arguments);\n  };\n}());\nartist.get('/amount/deathcountry/technique', /*#__PURE__*/function () {\n  var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(req, res) {\n    var minLimit, maxLimit, result;\n    return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n      while (1) switch (_context8.prev = _context8.next) {\n        case 0:\n          minLimit = req.query.minLimit;\n          maxLimit = req.query.maxLimit;\n          _context8.prev = 2;\n          _context8.next = 5;\n          return _artist[\"default\"].findAllDeathcountryTechniqueAmount(minLimit, maxLimit);\n        case 5:\n          result = _context8.sent;\n          res.json(result);\n          _context8.next = 13;\n          break;\n        case 9:\n          _context8.prev = 9;\n          _context8.t0 = _context8[\"catch\"](2);\n          console.error(_context8.t0);\n          res.status(500).json({\n            message: \"Internal server error\"\n          });\n        case 13:\n        case \"end\":\n          return _context8.stop();\n      }\n    }, _callee8, null, [[2, 9]]);\n  }));\n  return function (_x15, _x16) {\n    return _ref8.apply(this, arguments);\n  };\n}());\nartist.get('/amount/mostexhibitedincountry/technique', /*#__PURE__*/function () {\n  var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(req, res) {\n    var minLimit, maxLimit, result;\n    return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n      while (1) switch (_context9.prev = _context9.next) {\n        case 0:\n          minLimit = req.query.minLimit;\n          maxLimit = req.query.maxLimit;\n          _context9.prev = 2;\n          _context9.next = 5;\n          return _artist[\"default\"].findAllMostExhibitedInTechniqueAmount(minLimit, maxLimit);\n        case 5:\n          result = _context9.sent;\n          res.json(result);\n          _context9.next = 13;\n          break;\n        case 9:\n          _context9.prev = 9;\n          _context9.t0 = _context9[\"catch\"](2);\n          console.error(_context9.t0);\n          res.status(500).json({\n            message: \"Internal server error\"\n          });\n        case 13:\n        case \"end\":\n          return _context9.stop();\n      }\n    }, _callee9, null, [[2, 9]]);\n  }));\n  return function (_x17, _x18) {\n    return _ref9.apply(this, arguments);\n  };\n}());\nartist.get('/cluster/nationality', /*#__PURE__*/function () {\n  var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(req, res) {\n    var minLimit, maxLimit, k, result;\n    return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n      while (1) switch (_context10.prev = _context10.next) {\n        case 0:\n          minLimit = req.query.minLimit;\n          maxLimit = req.query.maxLimit;\n          k = parseInt(req.query.k); // Parse k parameter as integer\n          _context10.prev = 3;\n          _context10.next = 6;\n          return _artist[\"default\"].spectralClusteringNationality(minLimit, maxLimit, k);\n        case 6:\n          result = _context10.sent;\n          res.json(result);\n          _context10.next = 14;\n          break;\n        case 10:\n          _context10.prev = 10;\n          _context10.t0 = _context10[\"catch\"](3);\n          console.error(_context10.t0);\n          res.status(500).json({\n            message: \"Internal server error\"\n          });\n        case 14:\n        case \"end\":\n          return _context10.stop();\n      }\n    }, _callee10, null, [[3, 10]]);\n  }));\n  return function (_x19, _x20) {\n    return _ref10.apply(this, arguments);\n  };\n}());\nartist.get('/cluster/birthcountry', /*#__PURE__*/function () {\n  var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(req, res) {\n    var minLimit, maxLimit, k, result;\n    return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n      while (1) switch (_context11.prev = _context11.next) {\n        case 0:\n          minLimit = req.query.minLimit;\n          maxLimit = req.query.maxLimit;\n          k = parseInt(req.query.k); // Parse k parameter as integer\n          _context11.prev = 3;\n          _context11.next = 6;\n          return _artist[\"default\"].spectralClusteringBirthcountry(minLimit, maxLimit, k);\n        case 6:\n          result = _context11.sent;\n          res.json(result);\n          _context11.next = 14;\n          break;\n        case 10:\n          _context11.prev = 10;\n          _context11.t0 = _context11[\"catch\"](3);\n          console.error(_context11.t0);\n          res.status(500).json({\n            message: \"Internal server error\"\n          });\n        case 14:\n        case \"end\":\n          return _context11.stop();\n      }\n    }, _callee11, null, [[3, 10]]);\n  }));\n  return function (_x21, _x22) {\n    return _ref11.apply(this, arguments);\n  };\n}());\nartist.get('/cluster/deathcountry', /*#__PURE__*/function () {\n  var _ref12 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(req, res) {\n    var minLimit, maxLimit, k, result;\n    return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n      while (1) switch (_context12.prev = _context12.next) {\n        case 0:\n          minLimit = req.query.minLimit;\n          maxLimit = req.query.maxLimit;\n          k = parseInt(req.query.k); // Parse k parameter as integer\n          _context12.prev = 3;\n          _context12.next = 6;\n          return _artist[\"default\"].spectralClusteringDeathcountry(minLimit, maxLimit, k);\n        case 6:\n          result = _context12.sent;\n          res.json(result);\n          _context12.next = 14;\n          break;\n        case 10:\n          _context12.prev = 10;\n          _context12.t0 = _context12[\"catch\"](3);\n          console.error(_context12.t0);\n          res.status(500).json({\n            message: \"Internal server error\"\n          });\n        case 14:\n        case \"end\":\n          return _context12.stop();\n      }\n    }, _callee12, null, [[3, 10]]);\n  }));\n  return function (_x23, _x24) {\n    return _ref12.apply(this, arguments);\n  };\n}());\nartist.get('/cluster/mostexhibited', /*#__PURE__*/function () {\n  var _ref13 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(req, res) {\n    var minLimit, maxLimit, k, result;\n    return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n      while (1) switch (_context13.prev = _context13.next) {\n        case 0:\n          minLimit = req.query.minLimit;\n          maxLimit = req.query.maxLimit;\n          k = parseInt(req.query.k); // Parse k parameter as integer\n          _context13.prev = 3;\n          _context13.next = 6;\n          return _artist[\"default\"].spectralClusteringMostExhibited(minLimit, maxLimit, k);\n        case 6:\n          result = _context13.sent;\n          res.json(result);\n          _context13.next = 14;\n          break;\n        case 10:\n          _context13.prev = 10;\n          _context13.t0 = _context13[\"catch\"](3);\n          console.error(_context13.t0);\n          res.status(500).json({\n            message: \"Internal server error\"\n          });\n        case 14:\n        case \"end\":\n          return _context13.stop();\n      }\n    }, _callee13, null, [[3, 10]]);\n  }));\n  return function (_x25, _x26) {\n    return _ref13.apply(this, arguments);\n  };\n}());\nvar _default = exports[\"default\"] = artist;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":{"version":3,"names":["_express","require","_artist","_interopRequireDefault","obj","__esModule","_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","_catch","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","key","info","error","_asyncToGenerator","fn","self","args","arguments","apply","err","undefined","artist","Router","get","_ref","_callee","req","res","result","_callee$","_context","artistModel","findAllNationalityTechnique","json","t0","console","status","message","_x","_x2","_ref2","_callee2","_callee2$","_context2","findAllBirthcountryTechnique","_x3","_x4","_ref3","_callee3","_callee3$","_context3","findAllDeathcountryTechnique","_x5","_x6","_ref4","_callee4","_callee4$","_context4","findAllMostExhibitedInTechnique","_x7","_x8","_ref5","_callee5","_callee5$","_context5","findAllTechniques","_x9","_x10","_ref6","_callee6","minLimit","maxLimit","_callee6$","_context6","query","findAllNationalityTechniqueAmount","_x11","_x12","_ref7","_callee7","_callee7$","_context7","findAllBirthcountryTechniqueAmount","_x13","_x14","_ref8","_callee8","_callee8$","_context8","findAllDeathcountryTechniqueAmount","_x15","_x16","_ref9","_callee9","_callee9$","_context9","findAllMostExhibitedInTechniqueAmount","_x17","_x18","_ref10","_callee10","k","_callee10$","_context10","parseInt","spectralClusteringNationality","_x19","_x20","_ref11","_callee11","_callee11$","_context11","spectralClusteringBirthcountry","_x21","_x22","_ref12","_callee12","_callee12$","_context12","spectralClusteringDeathcountry","_x23","_x24","_ref13","_callee13","_callee13$","_context13","spectralClusteringMostExhibited","_x25","_x26","_default","exports"],"sourceRoot":"C:\\Users\\Luisa Müller\\Documents\\Studium\\Projekt\\BachelorProject\\backend\\src\\routes\\","sources":["artist.js"],"sourcesContent":["import { Router } from 'express';\r\nimport artistModel from '../models/artist';\r\n\r\n// ROUTING\r\n/* app.METHOD(PATH, HANDLER)\r\nWhere:\r\n- `app` is an instance of `express`.\r\n- `METHOD` is an [HTTP request method], in lowercase.\r\n- `PATH` is a path on the server.\r\n- `HANDLER` is the function executed when the route is matched.\r\n*/\r\n\r\n\r\nconst artist = Router();\r\n\r\n\r\n\r\nartist.get('/nationality/technique', async (req, res) => {\r\n    try {\r\n        const result = await artistModel.findAllNationalityTechnique();\r\n        res.json(result);\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ message: \"Internal server error\" });\r\n    }\r\n});\r\nartist.get('/birthcountry/technique', async (req, res) => {\r\n    try {\r\n        const result = await artistModel.findAllBirthcountryTechnique();\r\n        res.json(result);\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ message: \"Internal server error\" });\r\n    }\r\n});\r\nartist.get('/deathcountry/technique', async (req, res) => {\r\n    try {\r\n        const result = await artistModel.findAllDeathcountryTechnique();\r\n        res.json(result);\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ message: \"Internal server error\" });\r\n    }\r\n});\r\n\r\nartist.get('/mostexhibitedincountry/technique', async (req, res) => {\r\n    try {\r\n        const result = await artistModel.findAllMostExhibitedInTechnique();\r\n        res.json(result);\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ message: \"Internal server error\" });\r\n    }\r\n});\r\n\r\nartist.get('/technique', async (req, res) => {\r\n    try {\r\n        const result = await artistModel.findAllTechniques();\r\n        res.json(result);\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ message: \"Internal server error\" });\r\n    }\r\n});\r\nartist.get('/amount/nationality/technique', async (req, res) => {\r\n    const minLimit = req.query.minLimit;\r\n    const maxLimit = req.query.maxLimit;\r\n    \r\n    try {\r\n        const result = await artistModel.findAllNationalityTechniqueAmount(minLimit,maxLimit);\r\n        res.json(result);\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ message: \"Internal server error\" });\r\n    }\r\n});\r\n\r\nartist.get('/amount/birthcountry/technique', async (req, res) => {\r\n    const minLimit = req.query.minLimit;\r\n    const maxLimit = req.query.maxLimit;\r\n    \r\n    try {\r\n        const result = await artistModel.findAllBirthcountryTechniqueAmount(minLimit,maxLimit);\r\n        res.json(result);\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ message: \"Internal server error\" });\r\n    }\r\n});\r\nartist.get('/amount/deathcountry/technique', async (req, res) => {\r\n    const minLimit = req.query.minLimit;\r\n    const maxLimit = req.query.maxLimit;\r\n    \r\n    try {\r\n        const result = await artistModel.findAllDeathcountryTechniqueAmount(minLimit,maxLimit);\r\n        res.json(result);\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ message: \"Internal server error\" });\r\n    }\r\n});\r\nartist.get('/amount/mostexhibitedincountry/technique', async (req, res) => {\r\n    const minLimit = req.query.minLimit;\r\n    const maxLimit = req.query.maxLimit;\r\n    \r\n    try {\r\n        const result = await artistModel.findAllMostExhibitedInTechniqueAmount(minLimit,maxLimit);\r\n        res.json(result);\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ message: \"Internal server error\" });\r\n    }\r\n});\r\nartist.get('/cluster/nationality', async (req, res) => {\r\n    const minLimit = req.query.minLimit;\r\n    const maxLimit = req.query.maxLimit;\r\n    const k = parseInt(req.query.k); // Parse k parameter as integer\r\n\r\n    try {\r\n        const result = await artistModel.spectralClusteringNationality(minLimit, maxLimit, k);\r\n        res.json(result);\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ message: \"Internal server error\" });\r\n    }\r\n});\r\nartist.get('/cluster/birthcountry', async (req, res) => {\r\n    const minLimit = req.query.minLimit;\r\n    const maxLimit = req.query.maxLimit;\r\n    const k = parseInt(req.query.k); // Parse k parameter as integer\r\n\r\n    try {\r\n        const result = await artistModel.spectralClusteringBirthcountry(minLimit, maxLimit, k);\r\n        res.json(result);\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ message: \"Internal server error\" });\r\n    }\r\n});\r\nartist.get('/cluster/deathcountry', async (req, res) => {\r\n    const minLimit = req.query.minLimit;\r\n    const maxLimit = req.query.maxLimit;\r\n    const k = parseInt(req.query.k); // Parse k parameter as integer\r\n\r\n    try {\r\n        const result = await artistModel.spectralClusteringDeathcountry(minLimit, maxLimit, k);\r\n        res.json(result);\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ message: \"Internal server error\" });\r\n    }\r\n});\r\nartist.get('/cluster/mostexhibited', async (req, res) => {\r\n    const minLimit = req.query.minLimit;\r\n    const maxLimit = req.query.maxLimit;\r\n    const k = parseInt(req.query.k); // Parse k parameter as integer\r\n\r\n    try {\r\n        const result = await artistModel.spectralClusteringMostExhibited(minLimit, maxLimit, k);\r\n        res.json(result);\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ message: \"Internal server error\" });\r\n    }\r\n});\r\nexport default artist;\r\n"],"mappings":";;;;;;;AAAA,IAAAA,QAAA,GAAAC,OAAA;AACA,IAAAC,OAAA,GAAAC,sBAAA,CAAAF,OAAA;AAA2C,SAAAE,uBAAAC,GAAA,WAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA,gBAAAA,GAAA;AAAA,SAAAE,oBAAA,kBAA3C,qJAAAA,mBAAA,YAAAA,oBAAA,WAAAC,CAAA,SAAAC,CAAA,EAAAD,CAAA,OAAAE,CAAA,GAAAC,MAAA,CAAAC,SAAA,EAAAC,CAAA,GAAAH,CAAA,CAAAI,cAAA,EAAAC,CAAA,GAAAJ,MAAA,CAAAK,cAAA,cAAAP,CAAA,EAAAD,CAAA,EAAAE,CAAA,IAAAD,CAAA,CAAAD,CAAA,IAAAE,CAAA,CAAAO,KAAA,KAAAC,CAAA,wBAAAC,MAAA,GAAAA,MAAA,OAAAC,CAAA,GAAAF,CAAA,CAAAG,QAAA,kBAAAC,CAAA,GAAAJ,CAAA,CAAAK,aAAA,uBAAAC,CAAA,GAAAN,CAAA,CAAAO,WAAA,8BAAAC,OAAAjB,CAAA,EAAAD,CAAA,EAAAE,CAAA,WAAAC,MAAA,CAAAK,cAAA,CAAAP,CAAA,EAAAD,CAAA,IAAAS,KAAA,EAAAP,CAAA,EAAAiB,UAAA,MAAAC,YAAA,MAAAC,QAAA,SAAApB,CAAA,CAAAD,CAAA,WAAAkB,MAAA,mBAAAjB,CAAA,IAAAiB,MAAA,YAAAA,OAAAjB,CAAA,EAAAD,CAAA,EAAAE,CAAA,WAAAD,CAAA,CAAAD,CAAA,IAAAE,CAAA,gBAAAoB,KAAArB,CAAA,EAAAD,CAAA,EAAAE,CAAA,EAAAG,CAAA,QAAAK,CAAA,GAAAV,CAAA,IAAAA,CAAA,CAAAI,SAAA,YAAAmB,SAAA,GAAAvB,CAAA,GAAAuB,SAAA,EAAAX,CAAA,GAAAT,MAAA,CAAAqB,MAAA,CAAAd,CAAA,CAAAN,SAAA,GAAAU,CAAA,OAAAW,OAAA,CAAApB,CAAA,gBAAAE,CAAA,CAAAK,CAAA,eAAAH,KAAA,EAAAiB,gBAAA,CAAAzB,CAAA,EAAAC,CAAA,EAAAY,CAAA,MAAAF,CAAA,aAAAe,SAAA1B,CAAA,EAAAD,CAAA,EAAAE,CAAA,mBAAA0B,IAAA,YAAAC,GAAA,EAAA5B,CAAA,CAAA6B,IAAA,CAAA9B,CAAA,EAAAE,CAAA,cAAAD,CAAA,aAAA2B,IAAA,WAAAC,GAAA,EAAA5B,CAAA,QAAAD,CAAA,CAAAsB,IAAA,GAAAA,IAAA,MAAAS,CAAA,qBAAAC,CAAA,qBAAAC,CAAA,gBAAAC,CAAA,gBAAAC,CAAA,gBAAAZ,UAAA,cAAAa,kBAAA,cAAAC,2BAAA,SAAAC,CAAA,OAAApB,MAAA,CAAAoB,CAAA,EAAA1B,CAAA,qCAAA2B,CAAA,GAAApC,MAAA,CAAAqC,cAAA,EAAAC,CAAA,GAAAF,CAAA,IAAAA,CAAA,CAAAA,CAAA,CAAAG,MAAA,QAAAD,CAAA,IAAAA,CAAA,KAAAvC,CAAA,IAAAG,CAAA,CAAAyB,IAAA,CAAAW,CAAA,EAAA7B,CAAA,MAAA0B,CAAA,GAAAG,CAAA,OAAAE,CAAA,GAAAN,0BAAA,CAAAjC,SAAA,GAAAmB,SAAA,CAAAnB,SAAA,GAAAD,MAAA,CAAAqB,MAAA,CAAAc,CAAA,YAAAM,sBAAA3C,CAAA,gCAAA4C,OAAA,WAAA7C,CAAA,IAAAkB,MAAA,CAAAjB,CAAA,EAAAD,CAAA,YAAAC,CAAA,gBAAA6C,OAAA,CAAA9C,CAAA,EAAAC,CAAA,sBAAA8C,cAAA9C,CAAA,EAAAD,CAAA,aAAAgD,OAAA9C,CAAA,EAAAK,CAAA,EAAAG,CAAA,EAAAE,CAAA,QAAAE,CAAA,GAAAa,QAAA,CAAA1B,CAAA,CAAAC,CAAA,GAAAD,CAAA,EAAAM,CAAA,mBAAAO,CAAA,CAAAc,IAAA,QAAAZ,CAAA,GAAAF,CAAA,CAAAe,GAAA,EAAAE,CAAA,GAAAf,CAAA,CAAAP,KAAA,SAAAsB,CAAA,gBAAAkB,OAAA,CAAAlB,CAAA,KAAA1B,CAAA,CAAAyB,IAAA,CAAAC,CAAA,eAAA/B,CAAA,CAAAkD,OAAA,CAAAnB,CAAA,CAAAoB,OAAA,EAAAC,IAAA,WAAAnD,CAAA,IAAA+C,MAAA,SAAA/C,CAAA,EAAAS,CAAA,EAAAE,CAAA,gBAAAX,CAAA,IAAA+C,MAAA,UAAA/C,CAAA,EAAAS,CAAA,EAAAE,CAAA,QAAAZ,CAAA,CAAAkD,OAAA,CAAAnB,CAAA,EAAAqB,IAAA,WAAAnD,CAAA,IAAAe,CAAA,CAAAP,KAAA,GAAAR,CAAA,EAAAS,CAAA,CAAAM,CAAA,gBAAAf,CAAA,WAAA+C,MAAA,UAAA/C,CAAA,EAAAS,CAAA,EAAAE,CAAA,SAAAA,CAAA,CAAAE,CAAA,CAAAe,GAAA,SAAA3B,CAAA,EAAAK,CAAA,oBAAAE,KAAA,WAAAA,MAAAR,CAAA,EAAAI,CAAA,aAAAgD,2BAAA,eAAArD,CAAA,WAAAA,CAAA,EAAAE,CAAA,IAAA8C,MAAA,CAAA/C,CAAA,EAAAI,CAAA,EAAAL,CAAA,EAAAE,CAAA,gBAAAA,CAAA,GAAAA,CAAA,GAAAA,CAAA,CAAAkD,IAAA,CAAAC,0BAAA,EAAAA,0BAAA,IAAAA,0BAAA,qBAAA3B,iBAAA1B,CAAA,EAAAE,CAAA,EAAAG,CAAA,QAAAE,CAAA,GAAAwB,CAAA,mBAAArB,CAAA,EAAAE,CAAA,QAAAL,CAAA,KAAA0B,CAAA,QAAAqB,KAAA,sCAAA/C,CAAA,KAAA2B,CAAA,oBAAAxB,CAAA,QAAAE,CAAA,WAAAH,KAAA,EAAAR,CAAA,EAAAsD,IAAA,eAAAlD,CAAA,CAAAmD,MAAA,GAAA9C,CAAA,EAAAL,CAAA,CAAAwB,GAAA,GAAAjB,CAAA,UAAAE,CAAA,GAAAT,CAAA,CAAAoD,QAAA,MAAA3C,CAAA,QAAAE,CAAA,GAAA0C,mBAAA,CAAA5C,CAAA,EAAAT,CAAA,OAAAW,CAAA,QAAAA,CAAA,KAAAmB,CAAA,mBAAAnB,CAAA,qBAAAX,CAAA,CAAAmD,MAAA,EAAAnD,CAAA,CAAAsD,IAAA,GAAAtD,CAAA,CAAAuD,KAAA,GAAAvD,CAAA,CAAAwB,GAAA,sBAAAxB,CAAA,CAAAmD,MAAA,QAAAjD,CAAA,KAAAwB,CAAA,QAAAxB,CAAA,GAAA2B,CAAA,EAAA7B,CAAA,CAAAwB,GAAA,EAAAxB,CAAA,CAAAwD,iBAAA,CAAAxD,CAAA,CAAAwB,GAAA,uBAAAxB,CAAA,CAAAmD,MAAA,IAAAnD,CAAA,CAAAyD,MAAA,WAAAzD,CAAA,CAAAwB,GAAA,GAAAtB,CAAA,GAAA0B,CAAA,MAAAK,CAAA,GAAAX,QAAA,CAAA3B,CAAA,EAAAE,CAAA,EAAAG,CAAA,oBAAAiC,CAAA,CAAAV,IAAA,QAAArB,CAAA,GAAAF,CAAA,CAAAkD,IAAA,GAAArB,CAAA,GAAAF,CAAA,EAAAM,CAAA,CAAAT,GAAA,KAAAM,CAAA,qBAAA1B,KAAA,EAAA6B,CAAA,CAAAT,GAAA,EAAA0B,IAAA,EAAAlD,CAAA,CAAAkD,IAAA,kBAAAjB,CAAA,CAAAV,IAAA,KAAArB,CAAA,GAAA2B,CAAA,EAAA7B,CAAA,CAAAmD,MAAA,YAAAnD,CAAA,CAAAwB,GAAA,GAAAS,CAAA,CAAAT,GAAA,mBAAA6B,oBAAA1D,CAAA,EAAAE,CAAA,QAAAG,CAAA,GAAAH,CAAA,CAAAsD,MAAA,EAAAjD,CAAA,GAAAP,CAAA,CAAAa,QAAA,CAAAR,CAAA,OAAAE,CAAA,KAAAN,CAAA,SAAAC,CAAA,CAAAuD,QAAA,qBAAApD,CAAA,IAAAL,CAAA,CAAAa,QAAA,eAAAX,CAAA,CAAAsD,MAAA,aAAAtD,CAAA,CAAA2B,GAAA,GAAA5B,CAAA,EAAAyD,mBAAA,CAAA1D,CAAA,EAAAE,CAAA,eAAAA,CAAA,CAAAsD,MAAA,kBAAAnD,CAAA,KAAAH,CAAA,CAAAsD,MAAA,YAAAtD,CAAA,CAAA2B,GAAA,OAAAkC,SAAA,uCAAA1D,CAAA,iBAAA8B,CAAA,MAAAzB,CAAA,GAAAiB,QAAA,CAAApB,CAAA,EAAAP,CAAA,CAAAa,QAAA,EAAAX,CAAA,CAAA2B,GAAA,mBAAAnB,CAAA,CAAAkB,IAAA,SAAA1B,CAAA,CAAAsD,MAAA,YAAAtD,CAAA,CAAA2B,GAAA,GAAAnB,CAAA,CAAAmB,GAAA,EAAA3B,CAAA,CAAAuD,QAAA,SAAAtB,CAAA,MAAAvB,CAAA,GAAAF,CAAA,CAAAmB,GAAA,SAAAjB,CAAA,GAAAA,CAAA,CAAA2C,IAAA,IAAArD,CAAA,CAAAF,CAAA,CAAAgE,UAAA,IAAApD,CAAA,CAAAH,KAAA,EAAAP,CAAA,CAAA+D,IAAA,GAAAjE,CAAA,CAAAkE,OAAA,eAAAhE,CAAA,CAAAsD,MAAA,KAAAtD,CAAA,CAAAsD,MAAA,WAAAtD,CAAA,CAAA2B,GAAA,GAAA5B,CAAA,GAAAC,CAAA,CAAAuD,QAAA,SAAAtB,CAAA,IAAAvB,CAAA,IAAAV,CAAA,CAAAsD,MAAA,YAAAtD,CAAA,CAAA2B,GAAA,OAAAkC,SAAA,sCAAA7D,CAAA,CAAAuD,QAAA,SAAAtB,CAAA,cAAAgC,aAAAlE,CAAA,QAAAD,CAAA,KAAAoE,MAAA,EAAAnE,CAAA,YAAAA,CAAA,KAAAD,CAAA,CAAAqE,QAAA,GAAApE,CAAA,WAAAA,CAAA,KAAAD,CAAA,CAAAsE,UAAA,GAAArE,CAAA,KAAAD,CAAA,CAAAuE,QAAA,GAAAtE,CAAA,WAAAuE,UAAA,CAAAC,IAAA,CAAAzE,CAAA,cAAA0E,cAAAzE,CAAA,QAAAD,CAAA,GAAAC,CAAA,CAAA0E,UAAA,QAAA3E,CAAA,CAAA4B,IAAA,oBAAA5B,CAAA,CAAA6B,GAAA,EAAA5B,CAAA,CAAA0E,UAAA,GAAA3E,CAAA,aAAAyB,QAAAxB,CAAA,SAAAuE,UAAA,MAAAJ,MAAA,aAAAnE,CAAA,CAAA4C,OAAA,CAAAsB,YAAA,cAAAS,KAAA,iBAAAlC,OAAA1C,CAAA,QAAAA,CAAA,WAAAA,CAAA,QAAAE,CAAA,GAAAF,CAAA,CAAAY,CAAA,OAAAV,CAAA,SAAAA,CAAA,CAAA4B,IAAA,CAAA9B,CAAA,4BAAAA,CAAA,CAAAiE,IAAA,SAAAjE,CAAA,OAAA6E,KAAA,CAAA7E,CAAA,CAAA8E,MAAA,SAAAvE,CAAA,OAAAG,CAAA,YAAAuD,KAAA,aAAA1D,CAAA,GAAAP,CAAA,CAAA8E,MAAA,OAAAzE,CAAA,CAAAyB,IAAA,CAAA9B,CAAA,EAAAO,CAAA,UAAA0D,IAAA,CAAAxD,KAAA,GAAAT,CAAA,CAAAO,CAAA,GAAA0D,IAAA,CAAAV,IAAA,OAAAU,IAAA,SAAAA,IAAA,CAAAxD,KAAA,GAAAR,CAAA,EAAAgE,IAAA,CAAAV,IAAA,OAAAU,IAAA,YAAAvD,CAAA,CAAAuD,IAAA,GAAAvD,CAAA,gBAAAqD,SAAA,CAAAd,OAAA,CAAAjD,CAAA,kCAAAoC,iBAAA,CAAAhC,SAAA,GAAAiC,0BAAA,EAAA9B,CAAA,CAAAoC,CAAA,mBAAAlC,KAAA,EAAA4B,0BAAA,EAAAjB,YAAA,SAAAb,CAAA,CAAA8B,0BAAA,mBAAA5B,KAAA,EAAA2B,iBAAA,EAAAhB,YAAA,SAAAgB,iBAAA,CAAA2C,WAAA,GAAA7D,MAAA,CAAAmB,0BAAA,EAAArB,CAAA,wBAAAhB,CAAA,CAAAgF,mBAAA,aAAA/E,CAAA,QAAAD,CAAA,wBAAAC,CAAA,IAAAA,CAAA,CAAAgF,WAAA,WAAAjF,CAAA,KAAAA,CAAA,KAAAoC,iBAAA,6BAAApC,CAAA,CAAA+E,WAAA,IAAA/E,CAAA,CAAAkF,IAAA,OAAAlF,CAAA,CAAAmF,IAAA,aAAAlF,CAAA,WAAAE,MAAA,CAAAiF,cAAA,GAAAjF,MAAA,CAAAiF,cAAA,CAAAnF,CAAA,EAAAoC,0BAAA,KAAApC,CAAA,CAAAoF,SAAA,GAAAhD,0BAAA,EAAAnB,MAAA,CAAAjB,CAAA,EAAAe,CAAA,yBAAAf,CAAA,CAAAG,SAAA,GAAAD,MAAA,CAAAqB,MAAA,CAAAmB,CAAA,GAAA1C,CAAA,KAAAD,CAAA,CAAAsF,KAAA,aAAArF,CAAA,aAAAkD,OAAA,EAAAlD,CAAA,OAAA2C,qBAAA,CAAAG,aAAA,CAAA3C,SAAA,GAAAc,MAAA,CAAA6B,aAAA,CAAA3C,SAAA,EAAAU,CAAA,iCAAAd,CAAA,CAAA+C,aAAA,GAAAA,aAAA,EAAA/C,CAAA,CAAAuF,KAAA,aAAAtF,CAAA,EAAAC,CAAA,EAAAG,CAAA,EAAAE,CAAA,EAAAG,CAAA,eAAAA,CAAA,KAAAA,CAAA,GAAA8E,OAAA,OAAA5E,CAAA,OAAAmC,aAAA,CAAAzB,IAAA,CAAArB,CAAA,EAAAC,CAAA,EAAAG,CAAA,EAAAE,CAAA,GAAAG,CAAA,UAAAV,CAAA,CAAAgF,mBAAA,CAAA9E,CAAA,IAAAU,CAAA,GAAAA,CAAA,CAAAqD,IAAA,GAAAb,IAAA,WAAAnD,CAAA,WAAAA,CAAA,CAAAsD,IAAA,GAAAtD,CAAA,CAAAQ,KAAA,GAAAG,CAAA,CAAAqD,IAAA,WAAArB,qBAAA,CAAAD,CAAA,GAAAzB,MAAA,CAAAyB,CAAA,EAAA3B,CAAA,gBAAAE,MAAA,CAAAyB,CAAA,EAAA/B,CAAA,iCAAAM,MAAA,CAAAyB,CAAA,6DAAA3C,CAAA,CAAAyF,IAAA,aAAAxF,CAAA,QAAAD,CAAA,GAAAG,MAAA,CAAAF,CAAA,GAAAC,CAAA,gBAAAG,CAAA,IAAAL,CAAA,EAAAE,CAAA,CAAAuE,IAAA,CAAApE,CAAA,UAAAH,CAAA,CAAAwF,OAAA,aAAAzB,KAAA,WAAA/D,CAAA,CAAA4E,MAAA,SAAA7E,CAAA,GAAAC,CAAA,CAAAyF,GAAA,QAAA1F,CAAA,IAAAD,CAAA,SAAAiE,IAAA,CAAAxD,KAAA,GAAAR,CAAA,EAAAgE,IAAA,CAAAV,IAAA,OAAAU,IAAA,WAAAA,IAAA,CAAAV,IAAA,OAAAU,IAAA,QAAAjE,CAAA,CAAA0C,MAAA,GAAAA,MAAA,EAAAjB,OAAA,CAAArB,SAAA,KAAA6E,WAAA,EAAAxD,OAAA,EAAAmD,KAAA,WAAAA,MAAA5E,CAAA,aAAA4F,IAAA,WAAA3B,IAAA,WAAAN,IAAA,QAAAC,KAAA,GAAA3D,CAAA,OAAAsD,IAAA,YAAAE,QAAA,cAAAD,MAAA,gBAAA3B,GAAA,GAAA5B,CAAA,OAAAuE,UAAA,CAAA3B,OAAA,CAAA6B,aAAA,IAAA1E,CAAA,WAAAE,CAAA,kBAAAA,CAAA,CAAA2F,MAAA,OAAAxF,CAAA,CAAAyB,IAAA,OAAA5B,CAAA,MAAA2E,KAAA,EAAA3E,CAAA,CAAA4F,KAAA,cAAA5F,CAAA,IAAAD,CAAA,MAAA8F,IAAA,WAAAA,KAAA,SAAAxC,IAAA,WAAAtD,CAAA,QAAAuE,UAAA,IAAAG,UAAA,kBAAA1E,CAAA,CAAA2B,IAAA,QAAA3B,CAAA,CAAA4B,GAAA,cAAAmE,IAAA,KAAAnC,iBAAA,WAAAA,kBAAA7D,CAAA,aAAAuD,IAAA,QAAAvD,CAAA,MAAAE,CAAA,kBAAA+F,OAAA5F,CAAA,EAAAE,CAAA,WAAAK,CAAA,CAAAgB,IAAA,YAAAhB,CAAA,CAAAiB,GAAA,GAAA7B,CAAA,EAAAE,CAAA,CAAA+D,IAAA,GAAA5D,CAAA,EAAAE,CAAA,KAAAL,CAAA,CAAAsD,MAAA,WAAAtD,CAAA,CAAA2B,GAAA,GAAA5B,CAAA,KAAAM,CAAA,aAAAA,CAAA,QAAAiE,UAAA,CAAAM,MAAA,MAAAvE,CAAA,SAAAA,CAAA,QAAAG,CAAA,QAAA8D,UAAA,CAAAjE,CAAA,GAAAK,CAAA,GAAAF,CAAA,CAAAiE,UAAA,iBAAAjE,CAAA,CAAA0D,MAAA,SAAA6B,MAAA,aAAAvF,CAAA,CAAA0D,MAAA,SAAAwB,IAAA,QAAA9E,CAAA,GAAAT,CAAA,CAAAyB,IAAA,CAAApB,CAAA,eAAAM,CAAA,GAAAX,CAAA,CAAAyB,IAAA,CAAApB,CAAA,qBAAAI,CAAA,IAAAE,CAAA,aAAA4E,IAAA,GAAAlF,CAAA,CAAA2D,QAAA,SAAA4B,MAAA,CAAAvF,CAAA,CAAA2D,QAAA,gBAAAuB,IAAA,GAAAlF,CAAA,CAAA4D,UAAA,SAAA2B,MAAA,CAAAvF,CAAA,CAAA4D,UAAA,cAAAxD,CAAA,aAAA8E,IAAA,GAAAlF,CAAA,CAAA2D,QAAA,SAAA4B,MAAA,CAAAvF,CAAA,CAAA2D,QAAA,qBAAArD,CAAA,QAAAsC,KAAA,qDAAAsC,IAAA,GAAAlF,CAAA,CAAA4D,UAAA,SAAA2B,MAAA,CAAAvF,CAAA,CAAA4D,UAAA,YAAAR,MAAA,WAAAA,OAAA7D,CAAA,EAAAD,CAAA,aAAAE,CAAA,QAAAsE,UAAA,CAAAM,MAAA,MAAA5E,CAAA,SAAAA,CAAA,QAAAK,CAAA,QAAAiE,UAAA,CAAAtE,CAAA,OAAAK,CAAA,CAAA6D,MAAA,SAAAwB,IAAA,IAAAvF,CAAA,CAAAyB,IAAA,CAAAvB,CAAA,wBAAAqF,IAAA,GAAArF,CAAA,CAAA+D,UAAA,QAAA5D,CAAA,GAAAH,CAAA,aAAAG,CAAA,iBAAAT,CAAA,mBAAAA,CAAA,KAAAS,CAAA,CAAA0D,MAAA,IAAApE,CAAA,IAAAA,CAAA,IAAAU,CAAA,CAAA4D,UAAA,KAAA5D,CAAA,cAAAE,CAAA,GAAAF,CAAA,GAAAA,CAAA,CAAAiE,UAAA,cAAA/D,CAAA,CAAAgB,IAAA,GAAA3B,CAAA,EAAAW,CAAA,CAAAiB,GAAA,GAAA7B,CAAA,EAAAU,CAAA,SAAA8C,MAAA,gBAAAS,IAAA,GAAAvD,CAAA,CAAA4D,UAAA,EAAAnC,CAAA,SAAA+D,QAAA,CAAAtF,CAAA,MAAAsF,QAAA,WAAAA,SAAAjG,CAAA,EAAAD,CAAA,oBAAAC,CAAA,CAAA2B,IAAA,QAAA3B,CAAA,CAAA4B,GAAA,qBAAA5B,CAAA,CAAA2B,IAAA,mBAAA3B,CAAA,CAAA2B,IAAA,QAAAqC,IAAA,GAAAhE,CAAA,CAAA4B,GAAA,gBAAA5B,CAAA,CAAA2B,IAAA,SAAAoE,IAAA,QAAAnE,GAAA,GAAA5B,CAAA,CAAA4B,GAAA,OAAA2B,MAAA,kBAAAS,IAAA,yBAAAhE,CAAA,CAAA2B,IAAA,IAAA5B,CAAA,UAAAiE,IAAA,GAAAjE,CAAA,GAAAmC,CAAA,KAAAgE,MAAA,WAAAA,OAAAlG,CAAA,aAAAD,CAAA,QAAAwE,UAAA,CAAAM,MAAA,MAAA9E,CAAA,SAAAA,CAAA,QAAAE,CAAA,QAAAsE,UAAA,CAAAxE,CAAA,OAAAE,CAAA,CAAAoE,UAAA,KAAArE,CAAA,cAAAiG,QAAA,CAAAhG,CAAA,CAAAyE,UAAA,EAAAzE,CAAA,CAAAqE,QAAA,GAAAG,aAAA,CAAAxE,CAAA,GAAAiC,CAAA,yBAAAiE,OAAAnG,CAAA,aAAAD,CAAA,QAAAwE,UAAA,CAAAM,MAAA,MAAA9E,CAAA,SAAAA,CAAA,QAAAE,CAAA,QAAAsE,UAAA,CAAAxE,CAAA,OAAAE,CAAA,CAAAkE,MAAA,KAAAnE,CAAA,QAAAI,CAAA,GAAAH,CAAA,CAAAyE,UAAA,kBAAAtE,CAAA,CAAAuB,IAAA,QAAArB,CAAA,GAAAF,CAAA,CAAAwB,GAAA,EAAA6C,aAAA,CAAAxE,CAAA,YAAAK,CAAA,YAAA+C,KAAA,8BAAA+C,aAAA,WAAAA,cAAArG,CAAA,EAAAE,CAAA,EAAAG,CAAA,gBAAAoD,QAAA,KAAA5C,QAAA,EAAA6B,MAAA,CAAA1C,CAAA,GAAAgE,UAAA,EAAA9D,CAAA,EAAAgE,OAAA,EAAA7D,CAAA,oBAAAmD,MAAA,UAAA3B,GAAA,GAAA5B,CAAA,GAAAkC,CAAA,OAAAnC,CAAA;AAAA,SAAAsG,mBAAAC,GAAA,EAAArD,OAAA,EAAAsD,MAAA,EAAAC,KAAA,EAAAC,MAAA,EAAAC,GAAA,EAAA9E,GAAA,cAAA+E,IAAA,GAAAL,GAAA,CAAAI,GAAA,EAAA9E,GAAA,OAAApB,KAAA,GAAAmG,IAAA,CAAAnG,KAAA,WAAAoG,KAAA,IAAAL,MAAA,CAAAK,KAAA,iBAAAD,IAAA,CAAArD,IAAA,IAAAL,OAAA,CAAAzC,KAAA,YAAA+E,OAAA,CAAAtC,OAAA,CAAAzC,KAAA,EAAA2C,IAAA,CAAAqD,KAAA,EAAAC,MAAA;AAAA,SAAAI,kBAAAC,EAAA,6BAAAC,IAAA,SAAAC,IAAA,GAAAC,SAAA,aAAA1B,OAAA,WAAAtC,OAAA,EAAAsD,MAAA,QAAAD,GAAA,GAAAQ,EAAA,CAAAI,KAAA,CAAAH,IAAA,EAAAC,IAAA,YAAAR,MAAAhG,KAAA,IAAA6F,kBAAA,CAAAC,GAAA,EAAArD,OAAA,EAAAsD,MAAA,EAAAC,KAAA,EAAAC,MAAA,UAAAjG,KAAA,cAAAiG,OAAAU,GAAA,IAAAd,kBAAA,CAAAC,GAAA,EAAArD,OAAA,EAAAsD,MAAA,EAAAC,KAAA,EAAAC,MAAA,WAAAU,GAAA,KAAAX,KAAA,CAAAY,SAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,IAAMC,MAAM,GAAG,IAAAC,eAAM,EAAC,CAAC;AAIvBD,MAAM,CAACE,GAAG,CAAC,wBAAwB;EAAA,IAAAC,IAAA,GAAAX,iBAAA,eAAA/G,mBAAA,GAAAoF,IAAA,CAAE,SAAAuC,QAAOC,GAAG,EAAEC,GAAG;IAAA,IAAAC,MAAA;IAAA,OAAA9H,mBAAA,GAAAuB,IAAA,UAAAwG,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAnC,IAAA,GAAAmC,QAAA,CAAA9D,IAAA;QAAA;UAAA8D,QAAA,CAAAnC,IAAA;UAAAmC,QAAA,CAAA9D,IAAA;UAAA,OAEvB+D,kBAAW,CAACC,2BAA2B,CAAC,CAAC;QAAA;UAAxDJ,MAAM,GAAAE,QAAA,CAAApE,IAAA;UACZiE,GAAG,CAACM,IAAI,CAACL,MAAM,CAAC;UAACE,QAAA,CAAA9D,IAAA;UAAA;QAAA;UAAA8D,QAAA,CAAAnC,IAAA;UAAAmC,QAAA,CAAAI,EAAA,GAAAJ,QAAA;UAEjBK,OAAO,CAACvB,KAAK,CAAAkB,QAAA,CAAAI,EAAM,CAAC;UACpBP,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACH,IAAI,CAAC;YAAEI,OAAO,EAAE;UAAwB,CAAC,CAAC;QAAC;QAAA;UAAA,OAAAP,QAAA,CAAAhC,IAAA;MAAA;IAAA,GAAA2B,OAAA;EAAA,CAElE;EAAA,iBAAAa,EAAA,EAAAC,GAAA;IAAA,OAAAf,IAAA,CAAAN,KAAA,OAAAD,SAAA;EAAA;AAAA,IAAC;AACFI,MAAM,CAACE,GAAG,CAAC,yBAAyB;EAAA,IAAAiB,KAAA,GAAA3B,iBAAA,eAAA/G,mBAAA,GAAAoF,IAAA,CAAE,SAAAuD,SAAOf,GAAG,EAAEC,GAAG;IAAA,IAAAC,MAAA;IAAA,OAAA9H,mBAAA,GAAAuB,IAAA,UAAAqH,UAAAC,SAAA;MAAA,kBAAAA,SAAA,CAAAhD,IAAA,GAAAgD,SAAA,CAAA3E,IAAA;QAAA;UAAA2E,SAAA,CAAAhD,IAAA;UAAAgD,SAAA,CAAA3E,IAAA;UAAA,OAExB+D,kBAAW,CAACa,4BAA4B,CAAC,CAAC;QAAA;UAAzDhB,MAAM,GAAAe,SAAA,CAAAjF,IAAA;UACZiE,GAAG,CAACM,IAAI,CAACL,MAAM,CAAC;UAACe,SAAA,CAAA3E,IAAA;UAAA;QAAA;UAAA2E,SAAA,CAAAhD,IAAA;UAAAgD,SAAA,CAAAT,EAAA,GAAAS,SAAA;UAEjBR,OAAO,CAACvB,KAAK,CAAA+B,SAAA,CAAAT,EAAM,CAAC;UACpBP,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACH,IAAI,CAAC;YAAEI,OAAO,EAAE;UAAwB,CAAC,CAAC;QAAC;QAAA;UAAA,OAAAM,SAAA,CAAA7C,IAAA;MAAA;IAAA,GAAA2C,QAAA;EAAA,CAElE;EAAA,iBAAAI,GAAA,EAAAC,GAAA;IAAA,OAAAN,KAAA,CAAAtB,KAAA,OAAAD,SAAA;EAAA;AAAA,IAAC;AACFI,MAAM,CAACE,GAAG,CAAC,yBAAyB;EAAA,IAAAwB,KAAA,GAAAlC,iBAAA,eAAA/G,mBAAA,GAAAoF,IAAA,CAAE,SAAA8D,SAAOtB,GAAG,EAAEC,GAAG;IAAA,IAAAC,MAAA;IAAA,OAAA9H,mBAAA,GAAAuB,IAAA,UAAA4H,UAAAC,SAAA;MAAA,kBAAAA,SAAA,CAAAvD,IAAA,GAAAuD,SAAA,CAAAlF,IAAA;QAAA;UAAAkF,SAAA,CAAAvD,IAAA;UAAAuD,SAAA,CAAAlF,IAAA;UAAA,OAExB+D,kBAAW,CAACoB,4BAA4B,CAAC,CAAC;QAAA;UAAzDvB,MAAM,GAAAsB,SAAA,CAAAxF,IAAA;UACZiE,GAAG,CAACM,IAAI,CAACL,MAAM,CAAC;UAACsB,SAAA,CAAAlF,IAAA;UAAA;QAAA;UAAAkF,SAAA,CAAAvD,IAAA;UAAAuD,SAAA,CAAAhB,EAAA,GAAAgB,SAAA;UAEjBf,OAAO,CAACvB,KAAK,CAAAsC,SAAA,CAAAhB,EAAM,CAAC;UACpBP,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACH,IAAI,CAAC;YAAEI,OAAO,EAAE;UAAwB,CAAC,CAAC;QAAC;QAAA;UAAA,OAAAa,SAAA,CAAApD,IAAA;MAAA;IAAA,GAAAkD,QAAA;EAAA,CAElE;EAAA,iBAAAI,GAAA,EAAAC,GAAA;IAAA,OAAAN,KAAA,CAAA7B,KAAA,OAAAD,SAAA;EAAA;AAAA,IAAC;AAEFI,MAAM,CAACE,GAAG,CAAC,mCAAmC;EAAA,IAAA+B,KAAA,GAAAzC,iBAAA,eAAA/G,mBAAA,GAAAoF,IAAA,CAAE,SAAAqE,SAAO7B,GAAG,EAAEC,GAAG;IAAA,IAAAC,MAAA;IAAA,OAAA9H,mBAAA,GAAAuB,IAAA,UAAAmI,UAAAC,SAAA;MAAA,kBAAAA,SAAA,CAAA9D,IAAA,GAAA8D,SAAA,CAAAzF,IAAA;QAAA;UAAAyF,SAAA,CAAA9D,IAAA;UAAA8D,SAAA,CAAAzF,IAAA;UAAA,OAElC+D,kBAAW,CAAC2B,+BAA+B,CAAC,CAAC;QAAA;UAA5D9B,MAAM,GAAA6B,SAAA,CAAA/F,IAAA;UACZiE,GAAG,CAACM,IAAI,CAACL,MAAM,CAAC;UAAC6B,SAAA,CAAAzF,IAAA;UAAA;QAAA;UAAAyF,SAAA,CAAA9D,IAAA;UAAA8D,SAAA,CAAAvB,EAAA,GAAAuB,SAAA;UAEjBtB,OAAO,CAACvB,KAAK,CAAA6C,SAAA,CAAAvB,EAAM,CAAC;UACpBP,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACH,IAAI,CAAC;YAAEI,OAAO,EAAE;UAAwB,CAAC,CAAC;QAAC;QAAA;UAAA,OAAAoB,SAAA,CAAA3D,IAAA;MAAA;IAAA,GAAAyD,QAAA;EAAA,CAElE;EAAA,iBAAAI,GAAA,EAAAC,GAAA;IAAA,OAAAN,KAAA,CAAApC,KAAA,OAAAD,SAAA;EAAA;AAAA,IAAC;AAEFI,MAAM,CAACE,GAAG,CAAC,YAAY;EAAA,IAAAsC,KAAA,GAAAhD,iBAAA,eAAA/G,mBAAA,GAAAoF,IAAA,CAAE,SAAA4E,SAAOpC,GAAG,EAAEC,GAAG;IAAA,IAAAC,MAAA;IAAA,OAAA9H,mBAAA,GAAAuB,IAAA,UAAA0I,UAAAC,SAAA;MAAA,kBAAAA,SAAA,CAAArE,IAAA,GAAAqE,SAAA,CAAAhG,IAAA;QAAA;UAAAgG,SAAA,CAAArE,IAAA;UAAAqE,SAAA,CAAAhG,IAAA;UAAA,OAEX+D,kBAAW,CAACkC,iBAAiB,CAAC,CAAC;QAAA;UAA9CrC,MAAM,GAAAoC,SAAA,CAAAtG,IAAA;UACZiE,GAAG,CAACM,IAAI,CAACL,MAAM,CAAC;UAACoC,SAAA,CAAAhG,IAAA;UAAA;QAAA;UAAAgG,SAAA,CAAArE,IAAA;UAAAqE,SAAA,CAAA9B,EAAA,GAAA8B,SAAA;UAEjB7B,OAAO,CAACvB,KAAK,CAAAoD,SAAA,CAAA9B,EAAM,CAAC;UACpBP,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACH,IAAI,CAAC;YAAEI,OAAO,EAAE;UAAwB,CAAC,CAAC;QAAC;QAAA;UAAA,OAAA2B,SAAA,CAAAlE,IAAA;MAAA;IAAA,GAAAgE,QAAA;EAAA,CAElE;EAAA,iBAAAI,GAAA,EAAAC,IAAA;IAAA,OAAAN,KAAA,CAAA3C,KAAA,OAAAD,SAAA;EAAA;AAAA,IAAC;AACFI,MAAM,CAACE,GAAG,CAAC,+BAA+B;EAAA,IAAA6C,KAAA,GAAAvD,iBAAA,eAAA/G,mBAAA,GAAAoF,IAAA,CAAE,SAAAmF,SAAO3C,GAAG,EAAEC,GAAG;IAAA,IAAA2C,QAAA,EAAAC,QAAA,EAAA3C,MAAA;IAAA,OAAA9H,mBAAA,GAAAuB,IAAA,UAAAmJ,UAAAC,SAAA;MAAA,kBAAAA,SAAA,CAAA9E,IAAA,GAAA8E,SAAA,CAAAzG,IAAA;QAAA;UACjDsG,QAAQ,GAAG5C,GAAG,CAACgD,KAAK,CAACJ,QAAQ;UAC7BC,QAAQ,GAAG7C,GAAG,CAACgD,KAAK,CAACH,QAAQ;UAAAE,SAAA,CAAA9E,IAAA;UAAA8E,SAAA,CAAAzG,IAAA;UAAA,OAGV+D,kBAAW,CAAC4C,iCAAiC,CAACL,QAAQ,EAACC,QAAQ,CAAC;QAAA;UAA/E3C,MAAM,GAAA6C,SAAA,CAAA/G,IAAA;UACZiE,GAAG,CAACM,IAAI,CAACL,MAAM,CAAC;UAAC6C,SAAA,CAAAzG,IAAA;UAAA;QAAA;UAAAyG,SAAA,CAAA9E,IAAA;UAAA8E,SAAA,CAAAvC,EAAA,GAAAuC,SAAA;UAEjBtC,OAAO,CAACvB,KAAK,CAAA6D,SAAA,CAAAvC,EAAM,CAAC;UACpBP,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACH,IAAI,CAAC;YAAEI,OAAO,EAAE;UAAwB,CAAC,CAAC;QAAC;QAAA;UAAA,OAAAoC,SAAA,CAAA3E,IAAA;MAAA;IAAA,GAAAuE,QAAA;EAAA,CAElE;EAAA,iBAAAO,IAAA,EAAAC,IAAA;IAAA,OAAAT,KAAA,CAAAlD,KAAA,OAAAD,SAAA;EAAA;AAAA,IAAC;AAEFI,MAAM,CAACE,GAAG,CAAC,gCAAgC;EAAA,IAAAuD,KAAA,GAAAjE,iBAAA,eAAA/G,mBAAA,GAAAoF,IAAA,CAAE,SAAA6F,SAAOrD,GAAG,EAAEC,GAAG;IAAA,IAAA2C,QAAA,EAAAC,QAAA,EAAA3C,MAAA;IAAA,OAAA9H,mBAAA,GAAAuB,IAAA,UAAA2J,UAAAC,SAAA;MAAA,kBAAAA,SAAA,CAAAtF,IAAA,GAAAsF,SAAA,CAAAjH,IAAA;QAAA;UAClDsG,QAAQ,GAAG5C,GAAG,CAACgD,KAAK,CAACJ,QAAQ;UAC7BC,QAAQ,GAAG7C,GAAG,CAACgD,KAAK,CAACH,QAAQ;UAAAU,SAAA,CAAAtF,IAAA;UAAAsF,SAAA,CAAAjH,IAAA;UAAA,OAGV+D,kBAAW,CAACmD,kCAAkC,CAACZ,QAAQ,EAACC,QAAQ,CAAC;QAAA;UAAhF3C,MAAM,GAAAqD,SAAA,CAAAvH,IAAA;UACZiE,GAAG,CAACM,IAAI,CAACL,MAAM,CAAC;UAACqD,SAAA,CAAAjH,IAAA;UAAA;QAAA;UAAAiH,SAAA,CAAAtF,IAAA;UAAAsF,SAAA,CAAA/C,EAAA,GAAA+C,SAAA;UAEjB9C,OAAO,CAACvB,KAAK,CAAAqE,SAAA,CAAA/C,EAAM,CAAC;UACpBP,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACH,IAAI,CAAC;YAAEI,OAAO,EAAE;UAAwB,CAAC,CAAC;QAAC;QAAA;UAAA,OAAA4C,SAAA,CAAAnF,IAAA;MAAA;IAAA,GAAAiF,QAAA;EAAA,CAElE;EAAA,iBAAAI,IAAA,EAAAC,IAAA;IAAA,OAAAN,KAAA,CAAA5D,KAAA,OAAAD,SAAA;EAAA;AAAA,IAAC;AACFI,MAAM,CAACE,GAAG,CAAC,gCAAgC;EAAA,IAAA8D,KAAA,GAAAxE,iBAAA,eAAA/G,mBAAA,GAAAoF,IAAA,CAAE,SAAAoG,SAAO5D,GAAG,EAAEC,GAAG;IAAA,IAAA2C,QAAA,EAAAC,QAAA,EAAA3C,MAAA;IAAA,OAAA9H,mBAAA,GAAAuB,IAAA,UAAAkK,UAAAC,SAAA;MAAA,kBAAAA,SAAA,CAAA7F,IAAA,GAAA6F,SAAA,CAAAxH,IAAA;QAAA;UAClDsG,QAAQ,GAAG5C,GAAG,CAACgD,KAAK,CAACJ,QAAQ;UAC7BC,QAAQ,GAAG7C,GAAG,CAACgD,KAAK,CAACH,QAAQ;UAAAiB,SAAA,CAAA7F,IAAA;UAAA6F,SAAA,CAAAxH,IAAA;UAAA,OAGV+D,kBAAW,CAAC0D,kCAAkC,CAACnB,QAAQ,EAACC,QAAQ,CAAC;QAAA;UAAhF3C,MAAM,GAAA4D,SAAA,CAAA9H,IAAA;UACZiE,GAAG,CAACM,IAAI,CAACL,MAAM,CAAC;UAAC4D,SAAA,CAAAxH,IAAA;UAAA;QAAA;UAAAwH,SAAA,CAAA7F,IAAA;UAAA6F,SAAA,CAAAtD,EAAA,GAAAsD,SAAA;UAEjBrD,OAAO,CAACvB,KAAK,CAAA4E,SAAA,CAAAtD,EAAM,CAAC;UACpBP,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACH,IAAI,CAAC;YAAEI,OAAO,EAAE;UAAwB,CAAC,CAAC;QAAC;QAAA;UAAA,OAAAmD,SAAA,CAAA1F,IAAA;MAAA;IAAA,GAAAwF,QAAA;EAAA,CAElE;EAAA,iBAAAI,IAAA,EAAAC,IAAA;IAAA,OAAAN,KAAA,CAAAnE,KAAA,OAAAD,SAAA;EAAA;AAAA,IAAC;AACFI,MAAM,CAACE,GAAG,CAAC,0CAA0C;EAAA,IAAAqE,KAAA,GAAA/E,iBAAA,eAAA/G,mBAAA,GAAAoF,IAAA,CAAE,SAAA2G,SAAOnE,GAAG,EAAEC,GAAG;IAAA,IAAA2C,QAAA,EAAAC,QAAA,EAAA3C,MAAA;IAAA,OAAA9H,mBAAA,GAAAuB,IAAA,UAAAyK,UAAAC,SAAA;MAAA,kBAAAA,SAAA,CAAApG,IAAA,GAAAoG,SAAA,CAAA/H,IAAA;QAAA;UAC5DsG,QAAQ,GAAG5C,GAAG,CAACgD,KAAK,CAACJ,QAAQ;UAC7BC,QAAQ,GAAG7C,GAAG,CAACgD,KAAK,CAACH,QAAQ;UAAAwB,SAAA,CAAApG,IAAA;UAAAoG,SAAA,CAAA/H,IAAA;UAAA,OAGV+D,kBAAW,CAACiE,qCAAqC,CAAC1B,QAAQ,EAACC,QAAQ,CAAC;QAAA;UAAnF3C,MAAM,GAAAmE,SAAA,CAAArI,IAAA;UACZiE,GAAG,CAACM,IAAI,CAACL,MAAM,CAAC;UAACmE,SAAA,CAAA/H,IAAA;UAAA;QAAA;UAAA+H,SAAA,CAAApG,IAAA;UAAAoG,SAAA,CAAA7D,EAAA,GAAA6D,SAAA;UAEjB5D,OAAO,CAACvB,KAAK,CAAAmF,SAAA,CAAA7D,EAAM,CAAC;UACpBP,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACH,IAAI,CAAC;YAAEI,OAAO,EAAE;UAAwB,CAAC,CAAC;QAAC;QAAA;UAAA,OAAA0D,SAAA,CAAAjG,IAAA;MAAA;IAAA,GAAA+F,QAAA;EAAA,CAElE;EAAA,iBAAAI,IAAA,EAAAC,IAAA;IAAA,OAAAN,KAAA,CAAA1E,KAAA,OAAAD,SAAA;EAAA;AAAA,IAAC;AACFI,MAAM,CAACE,GAAG,CAAC,sBAAsB;EAAA,IAAA4E,MAAA,GAAAtF,iBAAA,eAAA/G,mBAAA,GAAAoF,IAAA,CAAE,SAAAkH,UAAO1E,GAAG,EAAEC,GAAG;IAAA,IAAA2C,QAAA,EAAAC,QAAA,EAAA8B,CAAA,EAAAzE,MAAA;IAAA,OAAA9H,mBAAA,GAAAuB,IAAA,UAAAiL,WAAAC,UAAA;MAAA,kBAAAA,UAAA,CAAA5G,IAAA,GAAA4G,UAAA,CAAAvI,IAAA;QAAA;UACxCsG,QAAQ,GAAG5C,GAAG,CAACgD,KAAK,CAACJ,QAAQ;UAC7BC,QAAQ,GAAG7C,GAAG,CAACgD,KAAK,CAACH,QAAQ;UAC7B8B,CAAC,GAAGG,QAAQ,CAAC9E,GAAG,CAACgD,KAAK,CAAC2B,CAAC,CAAC,EAAE;UAAAE,UAAA,CAAA5G,IAAA;UAAA4G,UAAA,CAAAvI,IAAA;UAAA,OAGR+D,kBAAW,CAAC0E,6BAA6B,CAACnC,QAAQ,EAAEC,QAAQ,EAAE8B,CAAC,CAAC;QAAA;UAA/EzE,MAAM,GAAA2E,UAAA,CAAA7I,IAAA;UACZiE,GAAG,CAACM,IAAI,CAACL,MAAM,CAAC;UAAC2E,UAAA,CAAAvI,IAAA;UAAA;QAAA;UAAAuI,UAAA,CAAA5G,IAAA;UAAA4G,UAAA,CAAArE,EAAA,GAAAqE,UAAA;UAEjBpE,OAAO,CAACvB,KAAK,CAAA2F,UAAA,CAAArE,EAAM,CAAC;UACpBP,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACH,IAAI,CAAC;YAAEI,OAAO,EAAE;UAAwB,CAAC,CAAC;QAAC;QAAA;UAAA,OAAAkE,UAAA,CAAAzG,IAAA;MAAA;IAAA,GAAAsG,SAAA;EAAA,CAElE;EAAA,iBAAAM,IAAA,EAAAC,IAAA;IAAA,OAAAR,MAAA,CAAAjF,KAAA,OAAAD,SAAA;EAAA;AAAA,IAAC;AACFI,MAAM,CAACE,GAAG,CAAC,uBAAuB;EAAA,IAAAqF,MAAA,GAAA/F,iBAAA,eAAA/G,mBAAA,GAAAoF,IAAA,CAAE,SAAA2H,UAAOnF,GAAG,EAAEC,GAAG;IAAA,IAAA2C,QAAA,EAAAC,QAAA,EAAA8B,CAAA,EAAAzE,MAAA;IAAA,OAAA9H,mBAAA,GAAAuB,IAAA,UAAAyL,WAAAC,UAAA;MAAA,kBAAAA,UAAA,CAAApH,IAAA,GAAAoH,UAAA,CAAA/I,IAAA;QAAA;UACzCsG,QAAQ,GAAG5C,GAAG,CAACgD,KAAK,CAACJ,QAAQ;UAC7BC,QAAQ,GAAG7C,GAAG,CAACgD,KAAK,CAACH,QAAQ;UAC7B8B,CAAC,GAAGG,QAAQ,CAAC9E,GAAG,CAACgD,KAAK,CAAC2B,CAAC,CAAC,EAAE;UAAAU,UAAA,CAAApH,IAAA;UAAAoH,UAAA,CAAA/I,IAAA;UAAA,OAGR+D,kBAAW,CAACiF,8BAA8B,CAAC1C,QAAQ,EAAEC,QAAQ,EAAE8B,CAAC,CAAC;QAAA;UAAhFzE,MAAM,GAAAmF,UAAA,CAAArJ,IAAA;UACZiE,GAAG,CAACM,IAAI,CAACL,MAAM,CAAC;UAACmF,UAAA,CAAA/I,IAAA;UAAA;QAAA;UAAA+I,UAAA,CAAApH,IAAA;UAAAoH,UAAA,CAAA7E,EAAA,GAAA6E,UAAA;UAEjB5E,OAAO,CAACvB,KAAK,CAAAmG,UAAA,CAAA7E,EAAM,CAAC;UACpBP,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACH,IAAI,CAAC;YAAEI,OAAO,EAAE;UAAwB,CAAC,CAAC;QAAC;QAAA;UAAA,OAAA0E,UAAA,CAAAjH,IAAA;MAAA;IAAA,GAAA+G,SAAA;EAAA,CAElE;EAAA,iBAAAI,IAAA,EAAAC,IAAA;IAAA,OAAAN,MAAA,CAAA1F,KAAA,OAAAD,SAAA;EAAA;AAAA,IAAC;AACFI,MAAM,CAACE,GAAG,CAAC,uBAAuB;EAAA,IAAA4F,MAAA,GAAAtG,iBAAA,eAAA/G,mBAAA,GAAAoF,IAAA,CAAE,SAAAkI,UAAO1F,GAAG,EAAEC,GAAG;IAAA,IAAA2C,QAAA,EAAAC,QAAA,EAAA8B,CAAA,EAAAzE,MAAA;IAAA,OAAA9H,mBAAA,GAAAuB,IAAA,UAAAgM,WAAAC,UAAA;MAAA,kBAAAA,UAAA,CAAA3H,IAAA,GAAA2H,UAAA,CAAAtJ,IAAA;QAAA;UACzCsG,QAAQ,GAAG5C,GAAG,CAACgD,KAAK,CAACJ,QAAQ;UAC7BC,QAAQ,GAAG7C,GAAG,CAACgD,KAAK,CAACH,QAAQ;UAC7B8B,CAAC,GAAGG,QAAQ,CAAC9E,GAAG,CAACgD,KAAK,CAAC2B,CAAC,CAAC,EAAE;UAAAiB,UAAA,CAAA3H,IAAA;UAAA2H,UAAA,CAAAtJ,IAAA;UAAA,OAGR+D,kBAAW,CAACwF,8BAA8B,CAACjD,QAAQ,EAAEC,QAAQ,EAAE8B,CAAC,CAAC;QAAA;UAAhFzE,MAAM,GAAA0F,UAAA,CAAA5J,IAAA;UACZiE,GAAG,CAACM,IAAI,CAACL,MAAM,CAAC;UAAC0F,UAAA,CAAAtJ,IAAA;UAAA;QAAA;UAAAsJ,UAAA,CAAA3H,IAAA;UAAA2H,UAAA,CAAApF,EAAA,GAAAoF,UAAA;UAEjBnF,OAAO,CAACvB,KAAK,CAAA0G,UAAA,CAAApF,EAAM,CAAC;UACpBP,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACH,IAAI,CAAC;YAAEI,OAAO,EAAE;UAAwB,CAAC,CAAC;QAAC;QAAA;UAAA,OAAAiF,UAAA,CAAAxH,IAAA;MAAA;IAAA,GAAAsH,SAAA;EAAA,CAElE;EAAA,iBAAAI,IAAA,EAAAC,IAAA;IAAA,OAAAN,MAAA,CAAAjG,KAAA,OAAAD,SAAA;EAAA;AAAA,IAAC;AACFI,MAAM,CAACE,GAAG,CAAC,wBAAwB;EAAA,IAAAmG,MAAA,GAAA7G,iBAAA,eAAA/G,mBAAA,GAAAoF,IAAA,CAAE,SAAAyI,UAAOjG,GAAG,EAAEC,GAAG;IAAA,IAAA2C,QAAA,EAAAC,QAAA,EAAA8B,CAAA,EAAAzE,MAAA;IAAA,OAAA9H,mBAAA,GAAAuB,IAAA,UAAAuM,WAAAC,UAAA;MAAA,kBAAAA,UAAA,CAAAlI,IAAA,GAAAkI,UAAA,CAAA7J,IAAA;QAAA;UAC1CsG,QAAQ,GAAG5C,GAAG,CAACgD,KAAK,CAACJ,QAAQ;UAC7BC,QAAQ,GAAG7C,GAAG,CAACgD,KAAK,CAACH,QAAQ;UAC7B8B,CAAC,GAAGG,QAAQ,CAAC9E,GAAG,CAACgD,KAAK,CAAC2B,CAAC,CAAC,EAAE;UAAAwB,UAAA,CAAAlI,IAAA;UAAAkI,UAAA,CAAA7J,IAAA;UAAA,OAGR+D,kBAAW,CAAC+F,+BAA+B,CAACxD,QAAQ,EAAEC,QAAQ,EAAE8B,CAAC,CAAC;QAAA;UAAjFzE,MAAM,GAAAiG,UAAA,CAAAnK,IAAA;UACZiE,GAAG,CAACM,IAAI,CAACL,MAAM,CAAC;UAACiG,UAAA,CAAA7J,IAAA;UAAA;QAAA;UAAA6J,UAAA,CAAAlI,IAAA;UAAAkI,UAAA,CAAA3F,EAAA,GAAA2F,UAAA;UAEjB1F,OAAO,CAACvB,KAAK,CAAAiH,UAAA,CAAA3F,EAAM,CAAC;UACpBP,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACH,IAAI,CAAC;YAAEI,OAAO,EAAE;UAAwB,CAAC,CAAC;QAAC;QAAA;UAAA,OAAAwF,UAAA,CAAA/H,IAAA;MAAA;IAAA,GAAA6H,SAAA;EAAA,CAElE;EAAA,iBAAAI,IAAA,EAAAC,IAAA;IAAA,OAAAN,MAAA,CAAAxG,KAAA,OAAAD,SAAA;EAAA;AAAA,IAAC;AAAC,IAAAgH,QAAA,GAAAC,OAAA,cACY7G,MAAM","ignoreList":[]}},"mtime":1716656749303},"{\"assumptions\":{},\"sourceRoot\":\"C:\\\\Users\\\\Luisa Müller\\\\Documents\\\\Studium\\\\Projekt\\\\BachelorProject\\\\backend\\\\src\\\\models\\\\\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"C:\\\\Users\\\\Luisa Müller\\\\Documents\\\\Studium\\\\Projekt\\\\BachelorProject\\\\backend\",\"filename\":\"C:\\\\Users\\\\Luisa Müller\\\\Documents\\\\Studium\\\\Projekt\\\\BachelorProject\\\\backend\\\\src\\\\models\\\\artist.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\Luisa Müller\\\\Documents\\\\Studium\\\\Projekt\\\\BachelorProject\\\\backend\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-unicode-sets-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-class-static-block\",\"visitor\":{\"ClassBody\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-private-property-in-object\",\"visitor\":{\"BinaryExpression\":{\"enter\":[null]}},\"options\":{\"loose\":\"#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error\"},\"externalDependencies\":[]},{\"key\":\"transform-class-properties\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{\"loose\":\"#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error\"},\"externalDependencies\":[]},{\"key\":\"transform-private-methods\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{\"loose\":\"#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error\"},\"externalDependencies\":[]},{\"key\":\"transform-numeric-separator\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"BigIntLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-logical-assignment-operators\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-nullish-coalescing-operator\",\"visitor\":{\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-optional-chaining\",\"visitor\":{\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-json-strings\",\"visitor\":{\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-optional-catch-binding\",\"visitor\":{\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-async-generator-functions\",\"visitor\":{\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-object-rest-spread\",\"visitor\":{\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"DoWhileStatement\":{\"exit\":[null]},\"ForInStatement\":{\"exit\":[null]},\"ForStatement\":{\"exit\":[null]},\"WhileStatement\":{\"exit\":[null]},\"ForOfStatement\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null,null]},\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"StaticBlock\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-regenerator\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"CallExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-export-namespace-from\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"CallExpression\":{\"enter\":[null]},\"ImportExpression\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-dynamic-import\",\"visitor\":{\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-top-level-await\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-import-meta\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]}],\"presets\":[]}:7.24.4:development":{"value":{"code":"\"use strict\";\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nvar dbSemaphore = require('../semaphoreHandler');\nvar math = require('mathjs');\nvar latestArtists = [];\nvar latestRelationships = [];\nvar latestMinLimit = -1;\nvar latestMaxLimit = -1;\nvar latestValue = '';\nvar Artist = /*#__PURE__*/_createClass(function Artist(data) {\n  _classCallCheck(this, Artist);\n  this.id = Number(data.id);\n  this.firstname = data.firstname;\n  this.lastname = data.lastname;\n  this.birthyear = data.birthyear;\n  this.birthplace = data.birthplace;\n  this.deathyear = data.deathyear;\n  this.deathplace = data.deathplace;\n  this.nationality = data.country;\n  this.sex = data.sex;\n  this.title = data.title;\n  this.techniques = data.artForms;\n  this.amount_techniques = data.amountArtForms;\n  this.distinct_techniques = data.distinctArtForms;\n  this.europeanRegionNationality = data.europeanRegionNationality;\n  this.most_exhibited_in = data.mostExhibitedInCountry;\n  this.europeanRegionMostExhibited = data.europeanRegionMostExhibitedInCountry;\n  this.most_exhibited_in_amount = data.mostExhibitedInCountryAmount;\n  this.total_exhibited_artworks = data.TotalExhibitedArtworks;\n  this.deathcountry = data.deathCountry;\n  this.europeanRegionDeath = data.europeanRegionDeathCountry;\n  this.birthcountry = data.birthCountry;\n  this.europeanRegionBirth = data.europeanRegionBirthCountry;\n  this.total_exhibitions = data.TotalExhibitions;\n  this.techniques_freq = data.artFormsFreq;\n  this.cluster = -1; // Default value\n  this.overall_avg_date = data.overall_avg_date;\n  this.avg_start_date = data.avg_start_date;\n  this.avg_end_date = data.avg_end_date;\n  this.avg_duration = data.avg_duration;\n}); // Define European regions based on country codes\n/*   const europeanRegions = {\r\n    \"North Europe\": [\"DK\", \"EE\", \"FI\", \"IS\", \"IE\", \"LV\", \"LT\", \"NO\", \"SE\"],\r\n    \"Eastern Europe\": [\"AZ\", \"BY\", \"BG\", \"CZ\", \"HU\", \"MD\", \"PL\", \"RO\", \"RU\", \"SK\", \"UA\"],\r\n    \"Southern Europe\": [\"BA\", \"HR\", \"GI\", \"GR\", \"IT\", \"ME\", \"PT\", \"RS\", \"SI\", \"ES\"],\r\n    \"Western Europe\": [\"AT\", \"BE\", \"FR\", \"DE\", \"LU\", \"MC\", \"NL\", \"CH\", \"GB\"],\r\n    \"Others\": [\r\n        \"US\", \"AU\", \"GE\", \"MX\", \"AM\", \"IL\", \"CL\", \"AR\", \"CA\", \"DO\", \"PE\", \"JP\", \"TR\",\r\n        \"BR\", \"ZA\", \"NZ\", \"VE\", \"GT\", \"UY\", \"SV\", \"PY\", \"IN\", \"PF\", \"KZ\", \"UZ\", \"VN\", \r\n        \"NA\", \"JO\", \"IR\", \"KH\", \"JM\", \"SA\", \"DZ\", \"CN\", \"EG\", \"VI\", \"ID\", \"CU\", \"TN\", \r\n        \"MQ\", \"MU\", \"LK\", \"EC\", \"SG\", \"BL\", \"TH\", \"BO\"\r\n      ]\r\n    }; */\n/*   const allCountries = [\r\n    \"GB\", \"ID\", \"UA\", \"CH\", \"RU\", \"NL\", \"DE\", \"BY\", \"IT\", \"LT\", \"US\", \"HU\", \"FR\", \"AU\", \"BE\", \"CZ\", \"AT\", \"NO\", \r\n    \"GR\", \"SE\", \"PL\", \"LV\", \"FI\", \"ES\", \"MD\", \"CA\", \"BG\", \"GE\", \"DZ\", \"MX\", \"AZ\", \"RO\", \"EE\", \"DK\", \"AR\", \"UY\", \r\n    \"CU\", \"PT\", \"HR\", \"SI\", \"TN\", \"EG\", \"SK\", \"TR\", \"VI\", \"RS\", \"IE\", \"DO\", \"JP\", \"MQ\", \"IN\", \"MU\", \"ME\", \"CL\", \r\n    \"ZA\", \"NZ\", \"KH\", \"LU\", \"GI\", \"VE\", \"GT\", \"SV\", \"PY\", \"LK\", \"BA\", \"EC\", \"BR\", \"SG\", \"BL\", \"PE\", \"TH\", \"PF\", \r\n    \"AM\", \"IL\", \"MC\", \"CN\", \"UZ\", \"KZ\", \"MA\", \"BO\", \"VN\", \"NA\", \"JO\", \"IR\", \"JM\", \"SA\"\r\n  ]\r\n  // Create a set of all countries in europeanRegions\r\nconst categorizedCountries = new Set();\r\nObject.values(europeanRegions).forEach(regionCountries => {\r\n  regionCountries.forEach(country => {\r\n    categorizedCountries.add(country);\r\n  });\r\n});\r\n\r\n// Find countries in allCountries that are not in categorizedCountries\r\nconst uncategorizedCountries = allCountries.filter(country => !categorizedCountries.has(country));\r\n\r\nconsole.log(uncategorizedCountries);\r\n   */\nvar exhibited_with = /*#__PURE__*/_createClass(function exhibited_with(startData, endData, relationshipData) {\n  _classCallCheck(this, exhibited_with);\n  this.startId = Math.min(startData.id, endData.id);\n  this.endId = Math.max(startData.id, endData.id);\n  this.sharedExhibitions = relationshipData.sharedExhibitions;\n  this.sharedExhibitionMinArtworks = relationshipData.sharedExhibitionMinArtworks;\n});\nvar findAllNationalityTechnique = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n    var _require, session;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          _require = require('../db'), session = _require.session;\n          _context2.next = 3;\n          return dbSemaphore.runExclusive( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n            var result;\n            return _regeneratorRuntime().wrap(function _callee$(_context) {\n              while (1) switch (_context.prev = _context.next) {\n                case 0:\n                  console.log('Semaphore acquired by normal');\n                  _context.next = 3;\n                  return session.run( // Collect 25 distinct artists based on some criteria\n                  \"MATCH (a:Artist)\\n    WHERE a.artForms <> [] AND a.country <> '\\\\N'\\n    WITH a\\n    LIMIT 25\\n    WITH collect(a) AS selectedArtists\\n\\n    // For each artist in the selected group, find all exhibited relationships within this group\\n    UNWIND selectedArtists AS a\\n    MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\\n    WHERE b IN selectedArtists\\n    RETURN p\\n    \");\n                case 3:\n                  result = _context.sent;\n                  _context.next = 6;\n                  return processResult(result);\n                case 6:\n                  return _context.abrupt(\"return\", _context.sent);\n                case 7:\n                case \"end\":\n                  return _context.stop();\n              }\n            }, _callee);\n          })));\n        case 3:\n          return _context2.abrupt(\"return\", _context2.sent);\n        case 4:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return function findAllNationalityTechnique() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\n/* const findAllNationalityTechniqueAmount = async (minLimit, maxLimit) => {\r\n    const { session } = require('../db');\r\n    return await dbSemaphore.runExclusive(async () => {\r\n        console.log('Semaphore acquired by amount')\r\n    const result = await session.run(\r\n   // Collect artists where total\r\n    `MATCH (a:Artist)\r\n    WHERE a.artForms <> [] AND a.country <> '\\\\N' AND a.TotalExhibitedArtworks >= $minLimit AND a.TotalExhibitedArtworks <= $maxLimit\r\n    WITH a\r\n    WITH collect(a) AS selectedArtists\r\n\r\n    // For each artist in the selected group, find all exhibited relationships within this group\r\n    UNWIND selectedArtists AS a\r\n    MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\r\n    WHERE b IN selectedArtists\r\n    RETURN p\r\n    `\r\n    ,{ minLimit: parseInt(minLimit), maxLimit: parseInt(maxLimit) } );// Ensure these are correctly passed as integers);\r\n    \r\n\r\n    return await processResult(result);\r\n});\r\n}; */\n\nvar findAllBirthcountryTechnique = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n    var _require2, session;\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) switch (_context4.prev = _context4.next) {\n        case 0:\n          _require2 = require('../db'), session = _require2.session;\n          _context4.next = 3;\n          return dbSemaphore.runExclusive( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n            var result;\n            return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n              while (1) switch (_context3.prev = _context3.next) {\n                case 0:\n                  _context3.next = 2;\n                  return session.run( // Collect 25 distinct artists based on some criteria\n                  \"MATCH (a:Artist)\\n    WHERE a.artForms <> [] AND a.birthCountry <> '\\\\N'\\n    WITH a\\n    LIMIT 25\\n    WITH collect(a) AS selectedArtists\\n\\n    // For each artist in the selected group, find all exhibited relationships within this group\\n    UNWIND selectedArtists AS a\\n    MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\\n    WHERE b IN selectedArtists\\n    RETURN p\\n    \");\n                case 2:\n                  result = _context3.sent;\n                  _context3.next = 5;\n                  return processResult(result);\n                case 5:\n                  return _context3.abrupt(\"return\", _context3.sent);\n                case 6:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }, _callee3);\n          })));\n        case 3:\n          return _context4.abrupt(\"return\", _context4.sent);\n        case 4:\n        case \"end\":\n          return _context4.stop();\n      }\n    }, _callee4);\n  }));\n  return function findAllBirthcountryTechnique() {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\n/* const findAllBirthcountryTechniqueAmount = async (minLimit,maxLimit) => {\r\n    const { session } = require('../db');\r\n    return await dbSemaphore.runExclusive(async () => {\r\n    const result = await session.run(\r\n   // Collect 25 distinct artists based on some criteria\r\n    `MATCH (a:Artist) \r\n    WHERE a.artForms <> [] AND a.birthCountry <> '\\\\N' AND a.TotalExhibitedArtworks >= $minLimit AND a.TotalExhibitedArtworks <= $maxLimit\r\n    WITH a\r\n    WITH collect(a) AS selectedArtists\r\n\r\n    // For each artist in the selected group, find all exhibited relationships within this group\r\n    UNWIND selectedArtists AS a\r\n    MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\r\n    WHERE b IN selectedArtists\r\n    RETURN p\r\n    `\r\n    ,{ minLimit: parseInt(minLimit), maxLimit: parseInt(maxLimit) } );// Ensure these are correctly passed as integers);\r\n    \r\n\r\n    return await processResult(result);\r\n});\r\n}; */\n\nvar findAllDeathcountryTechnique = /*#__PURE__*/function () {\n  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n    var _require3, session;\n    return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n      while (1) switch (_context6.prev = _context6.next) {\n        case 0:\n          _require3 = require('../db'), session = _require3.session;\n          _context6.next = 3;\n          return dbSemaphore.runExclusive( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n            var result;\n            return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n              while (1) switch (_context5.prev = _context5.next) {\n                case 0:\n                  _context5.next = 2;\n                  return session.run( // Collect 25 distinct artists based on some criteria\n                  \"MATCH (a:Artist)\\n    WHERE a.artForms <> [] AND a.deathCountry <> '\\\\N'\\n    WITH a\\n    LIMIT 25\\n    WITH collect(a) AS selectedArtists\\n\\n    // For each artist in the selected group, find all exhibited relationships within this group\\n    UNWIND selectedArtists AS a\\n    MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\\n    WHERE b IN selectedArtists\\n    RETURN p\\n    \");\n                case 2:\n                  result = _context5.sent;\n                  _context5.next = 5;\n                  return processResult(result);\n                case 5:\n                  return _context5.abrupt(\"return\", _context5.sent);\n                case 6:\n                case \"end\":\n                  return _context5.stop();\n              }\n            }, _callee5);\n          })));\n        case 3:\n          return _context6.abrupt(\"return\", _context6.sent);\n        case 4:\n        case \"end\":\n          return _context6.stop();\n      }\n    }, _callee6);\n  }));\n  return function findAllDeathcountryTechnique() {\n    return _ref5.apply(this, arguments);\n  };\n}();\n/* \r\nconst findAllDeathcountryTechniqueAmount = async (minLimit,maxLimit) => {\r\n    const { session } = require('../db');\r\n    return await dbSemaphore.runExclusive(async () => {\r\n    const result = await session.run(\r\n   // Collect 25 distinct artists based on some criteria\r\n    `MATCH (a:Artist)\r\n    WHERE a.artForms <> [] AND a.deathCountry <> '\\\\N'  AND a.TotalExhibitedArtworks >= $minLimit AND a.TotalExhibitedArtworks <= $maxLimit\r\n    WITH a\r\n    WITH collect(a) AS selectedArtists\r\n\r\n    // For each artist in the selected group, find all exhibited relationships within this group\r\n    UNWIND selectedArtists AS a\r\n    MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\r\n    WHERE b IN selectedArtists\r\n    RETURN p\r\n    `\r\n    ,{ minLimit: parseInt(minLimit), maxLimit: parseInt(maxLimit) } );// Ensure these are correctly passed as integers);\r\n    \r\n\r\n    return await processResult(result);\r\n\r\n});\r\n}; */\n\nvar findAllMostExhibitedInTechnique = /*#__PURE__*/function () {\n  var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n    var _require4, session;\n    return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n      while (1) switch (_context8.prev = _context8.next) {\n        case 0:\n          _require4 = require('../db'), session = _require4.session;\n          _context8.next = 3;\n          return dbSemaphore.runExclusive( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n            var result;\n            return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n              while (1) switch (_context7.prev = _context7.next) {\n                case 0:\n                  _context7.next = 2;\n                  return session.run( // Collect 25 distinct artists based on some criteria\n                  \"MATCH (a:Artist)\\n    WHERE a.artForms <> [] AND a.mostExhibitedInCountry <> '\\\\N' AND a.unclearMostExhibitedInCountry = FALSE \\n    WITH a\\n    LIMIT 25\\n    WITH collect(a) AS selectedArtists\\n\\n    // For each artist in the selected group, find all exhibited relationships within this group\\n    UNWIND selectedArtists AS a\\n    MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\\n    WHERE b IN selectedArtists\\n    RETURN p\\n    \");\n                case 2:\n                  result = _context7.sent;\n                  _context7.next = 5;\n                  return processResult(result);\n                case 5:\n                  return _context7.abrupt(\"return\", _context7.sent);\n                case 6:\n                case \"end\":\n                  return _context7.stop();\n              }\n            }, _callee7);\n          })));\n        case 3:\n          return _context8.abrupt(\"return\", _context8.sent);\n        case 4:\n        case \"end\":\n          return _context8.stop();\n      }\n    }, _callee8);\n  }));\n  return function findAllMostExhibitedInTechnique() {\n    return _ref7.apply(this, arguments);\n  };\n}();\n\n/* const findAllMostExhibitedInTechniqueAmount = async (minLimit,maxLimit) => {\r\n    const { session } = require('../db');\r\n    return await dbSemaphore.runExclusive(async () => {\r\n    const result = await session.run(\r\n   // Collect 25 distinct artists based on some criteria\r\n    `MATCH (a:Artist)\r\n    WHERE a.artForms <> [] AND a.mostExhibitedInCountry <> '\\\\N' AND a.unclearMostExhibitedInCountry = FALSE  AND a.TotalExhibitedArtworks >= $minLimit AND a.TotalExhibitedArtworks <= $maxLimit\r\n    WITH a\r\n    WITH collect(a) AS selectedArtists\r\n\r\n    // For each artist in the selected group, find all exhibited relationships within this group\r\n    UNWIND selectedArtists AS a\r\n    MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\r\n    WHERE b IN selectedArtists\r\n    RETURN p\r\n    `\r\n    ,{ minLimit: parseInt(minLimit), maxLimit: parseInt(maxLimit) } );// Ensure these are correctly passed as integers);\r\n    \r\n\r\n    return await processResult(result);\r\n\r\n});\r\n}; */\n\nvar findAllTechniques = /*#__PURE__*/function () {\n  var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n    var _require5, session;\n    return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n      while (1) switch (_context10.prev = _context10.next) {\n        case 0:\n          _require5 = require('../db'), session = _require5.session;\n          _context10.next = 3;\n          return dbSemaphore.runExclusive( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n            var result;\n            return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n              while (1) switch (_context9.prev = _context9.next) {\n                case 0:\n                  _context9.next = 2;\n                  return session.run( // Collect 25 distinct artists based on some criteria\n                  \"MATCH (a:Artist)\\n    WHERE a.artForms <> [] AND a.artFormsFreq <> '{}'\\n    WITH a\\n    LIMIT 25\\n    WITH collect(a) AS selectedArtists\\n\\n    // For each artist in the selected group, find all exhibited relationships within this group\\n    UNWIND selectedArtists AS a\\n    MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\\n    WHERE b IN selectedArtists\\n    RETURN p\\n    \");\n                case 2:\n                  result = _context9.sent;\n                  _context9.next = 5;\n                  return processResult(result);\n                case 5:\n                  return _context9.abrupt(\"return\", _context9.sent);\n                case 6:\n                case \"end\":\n                  return _context9.stop();\n              }\n            }, _callee9);\n          })));\n        case 3:\n          return _context10.abrupt(\"return\", _context10.sent);\n        case 4:\n        case \"end\":\n          return _context10.stop();\n      }\n    }, _callee10);\n  }));\n  return function findAllTechniques() {\n    return _ref9.apply(this, arguments);\n  };\n}();\n\n// Assuming 'artists' is an array of artist nodes and 'relationships' is an array of edges with weights\nvar normalizeLogarithmically = function normalizeLogarithmically(values) {\n  var logMaxValue = Math.log1p(Math.max.apply(Math, _toConsumableArray(values.values())));\n  var logMinValue = Math.log1p(Math.min.apply(Math, _toConsumableArray(values.values())));\n  var range = logMaxValue - logMinValue;\n  var normalized = new Map();\n  values.forEach(function (value, id) {\n    normalized.set(id, (Math.log1p(value) - logMinValue) / range); // Normalize by dividing by the max degree\n  });\n  return normalized;\n};\nfunction spectralClustering(_x, _x2, _x3) {\n  return _spectralClustering.apply(this, arguments);\n}\nfunction _spectralClustering() {\n  _spectralClustering = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17(artists, relationships, k) {\n    var sharedExhibitionValues, normalizedSharedExhibitionValues, size, adjacencyMatrix, degreeMatrix, laplacianMatrix, eigensystem, firstThreeEigenvectors, featureMatrixU, i, vector, featureMatrixUTransposed, clusters, clusterArray, clusterAssignments, clusteredArtists, clusterMap, intraClusterRelationships, singleInterClusterRelationships, interClusterRelationshipsMap, interClusterRelationships;\n    return _regeneratorRuntime().wrap(function _callee17$(_context17) {\n      while (1) switch (_context17.prev = _context17.next) {\n        case 0:\n          console.log('cluster');\n          // Step 0: Extract sharedExhibitionMinArtworks values for normalization\n          sharedExhibitionValues = new Map();\n          relationships.forEach(function (relationship) {\n            var id = relationship.startId;\n            var value = relationship.sharedExhibitionMinArtworks;\n            sharedExhibitionValues.set(id, value);\n          });\n\n          // Step 0.1: Normalize sharedExhibitionMinArtworks values\n          normalizedSharedExhibitionValues = normalizeLogarithmically(sharedExhibitionValues); // Step 1: Construct the adjacency matrix\n          size = artists.length;\n          adjacencyMatrix = math.zeros(size, size);\n          relationships.forEach(function (relationship) {\n            var i = artists.findIndex(function (artist) {\n              return artist.id === relationship.startId;\n            });\n            var j = artists.findIndex(function (artist) {\n              return artist.id === relationship.endId;\n            });\n            var weight = normalizedSharedExhibitionValues.get(relationship.startId);\n            adjacencyMatrix.set([i, j], Number(weight));\n            adjacencyMatrix.set([j, i], Number(weight)); // since it's an undirected graph\n          });\n\n          // Step 2: Construct the degree matrix\n          degreeMatrix = adjacencyMatrix.map(function (value, index, matrix) {\n            return index[0] === index[1] ? Number(math.sum(matrix._data[index[0]])) : 0;\n          }); // Step 3: Construct the Laplacian matrix\n          laplacianMatrix = math.subtract(degreeMatrix, adjacencyMatrix); // Step 4: Compute the eigenvalues and eigenvectors\n          eigensystem = math.eigs(laplacianMatrix); // Check if the eigenvalues and eigenvectors are defined and not empty\n          if (!(!eigensystem || eigensystem.values.length === 0)) {\n            _context17.next = 12;\n            break;\n          }\n          throw new Error(\"Eigenvectors are undefined or missing data.\");\n        case 12:\n          // Extract the first three eigenvectors\n          firstThreeEigenvectors = eigensystem.eigenvectors.slice(0, k); // Initialize the feature matrix\n          featureMatrixU = []; // Loop over the eigenvectors\n          for (i = 0; i < firstThreeEigenvectors.length; i++) {\n            vector = firstThreeEigenvectors[i].vector.toArray(); // Convert DenseMatrix to array\n            featureMatrixU.push(vector); // Push the vector as a column in the feature matrix\n          }\n\n          // Transpose the feature matrix to have columns as data points\n          featureMatrixUTransposed = math.transpose(featureMatrixU); // Perform initial kMeans Clustering\n          clusters = kMeansClustering(featureMatrixUTransposed, k, 1); // Assume minClusterSize = 1 for basic example\n          // Redistribute clusters here\n          clusters = redistributeClusters(featureMatrixUTransposed, clusters, k, 5, 15); // Example sizes\n\n          // Assuming kMeansClustering and other related functions are d\n\n          // Associate artists with their clusters\n          clusterArray = artists.map(function (artist, index) {\n            return _objectSpread(_objectSpread({}, artist), {}, {\n              cluster: clusters[index]\n            });\n          }); // Associate artists with their clusters\n          clusterAssignments = artists.map(function (artist, index) {\n            artist.cluster = clusters[index]; // Assign the cluster to the artist\n          }); // Initialize an array of k empty arrays for the clusters\n          clusteredArtists = Array.from({\n            length: k\n          }, function () {\n            return [];\n          }); // Populate the cluster arrays with artists\n          artists.forEach(function (artist, index) {\n            var clusterIndex = clusters[index]; // Retrieve the cluster index assigned to the artist\n            clusteredArtists[clusterIndex].push(artist); // Add the artist to the corresponding cluster\n          });\n          clusterMap = new Map();\n          artists.forEach(function (artist, index) {\n            clusterMap.set(artist.id, clusters[index]); // Correctly associate artist ID with cluster index\n          });\n          intraClusterRelationships = Array.from({\n            length: k\n          }, function () {\n            return [];\n          });\n          singleInterClusterRelationships = Array.from({\n            length: k\n          }, function () {\n            return [];\n          });\n          interClusterRelationshipsMap = new Map();\n          relationships.forEach(function (relationship) {\n            var clusterA = clusterMap.get(relationship.startId);\n            var clusterB = clusterMap.get(relationship.endId);\n            if (clusterA === clusterB) {\n              intraClusterRelationships[clusterA].push(relationship);\n            } else {\n              singleInterClusterRelationships[clusterA].push(relationship);\n              singleInterClusterRelationships[clusterB].push(relationship);\n              var key = \"\".concat(Math.min(clusterA, clusterB), \"-\").concat(Math.max(clusterA, clusterB));\n              if (!interClusterRelationshipsMap.has(key)) {\n                interClusterRelationshipsMap.set(key, {\n                  startId: Math.min(clusterA, clusterB),\n                  endId: Math.max(clusterA, clusterB),\n                  sharedExhibitions: 0,\n                  sharedExhibitionMinArtworks: 0\n                });\n              }\n              var aggregatedRelationship = interClusterRelationshipsMap.get(key);\n              aggregatedRelationship.sharedExhibitions += relationship.sharedExhibitions;\n              aggregatedRelationship.sharedExhibitionMinArtworks += relationship.sharedExhibitionMinArtworks;\n            }\n          });\n          interClusterRelationships = Array.from(interClusterRelationshipsMap.values()).map(function (rel) {\n            return new exhibited_with({\n              id: rel.startId\n            }, {\n              id: rel.endId\n            }, {\n              sharedExhibitions: rel.sharedExhibitions,\n              sharedExhibitionMinArtworks: rel.sharedExhibitionMinArtworks\n            });\n          });\n          console.log('cluster finished');\n          return _context17.abrupt(\"return\", [clusteredArtists, intraClusterRelationships, interClusterRelationships,\n          // You might want to further organize this by cluster pairs if needed\n          singleInterClusterRelationships]);\n        case 31:\n        case \"end\":\n          return _context17.stop();\n      }\n    }, _callee17);\n  }));\n  return _spectralClustering.apply(this, arguments);\n}\nfunction redistributeClusters(data, clusters, k, minClusterSize, maxClusterSize) {\n  var centroids = calculateCentroids(data, clusters, k);\n  var clusterSizes = new Array(k).fill(0);\n  clusters.forEach(function (cluster) {\n    return clusterSizes[cluster]++;\n  });\n  var needsHelp = clusterSizes.map(function (size, index) {\n    return {\n      index: index,\n      size: size,\n      type: size < minClusterSize ? 'undersized' : size > maxClusterSize ? 'oversized' : 'ok'\n    };\n  }).filter(function (stat) {\n    return stat.type !== 'ok';\n  });\n  needsHelp.forEach(function (need) {\n    if (need.type === 'oversized') {\n      data.forEach(function (point, idx) {\n        if (clusters[idx] === need.index) {\n          var currentClusterIndex = need.index;\n          var closest = {\n            index: -1,\n            distance: Infinity\n          };\n          centroids.forEach(function (centroid, index) {\n            if (index !== currentClusterIndex && clusterSizes[index] < maxClusterSize) {\n              var distance = euclideanDistance(point, centroid);\n              if (distance < closest.distance) {\n                closest = {\n                  index: index,\n                  distance: distance\n                };\n              }\n            }\n          });\n          if (closest.index !== -1) {\n            clusters[idx] = closest.index;\n            clusterSizes[currentClusterIndex]--;\n            clusterSizes[closest.index]++;\n          }\n        }\n      });\n    }\n  });\n  return clusters;\n}\nfunction calculateCentroids(data, clusters, k) {\n  var centroids = Array(k).fill(null).map(function () {\n    return [];\n  });\n  data.forEach(function (point, index) {\n    centroids[clusters[index]].push(point);\n  });\n  return centroids.map(function (cluster) {\n    return cluster.reduce(function (mean, point) {\n      return mean.map(function (m, idx) {\n        return m + point[idx] / cluster.length;\n      });\n    }, new Array(data[0].length).fill(0));\n  });\n}\nfunction kMeansClustering(data, k, minClusterSize) {\n  var maxIterations = 500;\n  var bestCentroids = [];\n  var bestClusterAssignments = [];\n  var minTotalDistance = Infinity;\n  for (var initialization = 0; initialization < 10; initialization++) {\n    // Try multiple random initializations\n    var centroids = initializeCentroids(data, k);\n    var clusterAssignments = [];\n    for (var iteration = 0; iteration < maxIterations; iteration++) {\n      var newClusterAssignments = assignPointsToCentroids(data, centroids);\n      var newCentroids = updateCentroids(data, newClusterAssignments, k);\n      if (centroidsEqual(newCentroids, centroids)) {\n        clusterAssignments = newClusterAssignments;\n        break;\n      }\n      centroids = newCentroids;\n    }\n    var totalDistance = calculateTotalDistance(data, centroids, clusterAssignments);\n    if (totalDistance < minTotalDistance) {\n      bestCentroids = centroids;\n      bestClusterAssignments = clusterAssignments;\n      minTotalDistance = totalDistance;\n    }\n  }\n\n  // Ensure each cluster meets the minimum size requirement\n  var clusterSizes = new Array(k).fill(0);\n  bestClusterAssignments.forEach(function (clusterIndex) {\n    clusterSizes[clusterIndex]++;\n  });\n\n  // Reassign points until each cluster has at least minClusterSize points\n  var _loop = function _loop(i) {\n    var _loop2 = function _loop2() {\n      // Find the point farthest from its centroid in cluster i\n      var farthestPointIndex = -1;\n      var maxDistance = -1;\n      data.forEach(function (point, index) {\n        if (bestClusterAssignments[index] === i) {\n          var distance = euclideanDistance(point, bestCentroids[i]);\n          if (distance > maxDistance) {\n            maxDistance = distance;\n            farthestPointIndex = index;\n          }\n        }\n      });\n\n      // Reassign the farthest point to the nearest cluster\n      var minDistance = Infinity;\n      var nearestClusterIndex = -1;\n      for (var j = 0; j < k; j++) {\n        if (j !== i) {\n          var distance = euclideanDistance(data[farthestPointIndex], bestCentroids[j]);\n          if (distance < minDistance) {\n            minDistance = distance;\n            nearestClusterIndex = j;\n          }\n        }\n      }\n\n      // Reassign the point to the nearest cluster\n      bestClusterAssignments[farthestPointIndex] = nearestClusterIndex;\n      clusterSizes[i]--;\n      clusterSizes[nearestClusterIndex]++;\n    };\n    while (clusterSizes[i] < minClusterSize) {\n      _loop2();\n    }\n  };\n  for (var i = 0; i < k; i++) {\n    _loop(i);\n  }\n  return bestClusterAssignments;\n}\nfunction initializeCentroids(data, k) {\n  var centroids = [data[Math.floor(Math.random() * data.length)]]; // Start with one random centroid\n  var _loop3 = function _loop3() {\n    var distances = data.map(function (point) {\n      return Math.min.apply(Math, _toConsumableArray(centroids.map(function (centroid) {\n        return euclideanDistance(point, centroid);\n      })));\n    });\n    var totalDistance = distances.reduce(function (a, b) {\n      return a + b;\n    }, 0);\n    var probabilities = distances.map(function (distance) {\n      return distance / totalDistance;\n    });\n    var cumulativeProbabilities = probabilities.reduce(function (acc, prob, index) {\n      if (index === 0) acc.push(prob);else acc.push(acc[index - 1] + prob);\n      return acc;\n    }, []);\n    var rand = Math.random();\n    var nextCentroidIndex = cumulativeProbabilities.findIndex(function (cumProb) {\n      return cumProb >= rand;\n    });\n    centroids.push(data[nextCentroidIndex]);\n  };\n  for (var i = 1; i < k; i++) {\n    _loop3();\n  }\n  return centroids;\n}\nfunction assignPointsToCentroids(data, centroids) {\n  var clusterAssignments = [];\n  var _iterator = _createForOfIteratorHelper(data),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var point = _step.value;\n      var minDistance = Infinity;\n      var closestCentroidIndex = -1;\n      for (var i = 0; i < centroids.length; i++) {\n        var distance = euclideanDistance(point, centroids[i]);\n        if (distance < minDistance) {\n          minDistance = distance;\n          closestCentroidIndex = i;\n        }\n      }\n      clusterAssignments.push(closestCentroidIndex);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return clusterAssignments;\n}\nfunction updateCentroids(data, clusterAssignments, k) {\n  var newCentroids = new Array(k).fill(0).map(function () {\n    return new Array(data[0].length).fill(0);\n  });\n  var clusterCounts = new Array(k).fill(0);\n  for (var i = 0; i < data.length; i++) {\n    var clusterIndex = clusterAssignments[i];\n    for (var j = 0; j < data[i].length; j++) {\n      newCentroids[clusterIndex][j] += data[i][j];\n    }\n    clusterCounts[clusterIndex]++;\n  }\n  for (var _i = 0; _i < k; _i++) {\n    if (clusterCounts[_i] !== 0) {\n      for (var _j = 0; _j < newCentroids[_i].length; _j++) {\n        newCentroids[_i][_j] /= clusterCounts[_i];\n      }\n    } else {\n      // If no points were assigned to this cluster, keep the centroid unchanged\n    }\n  }\n  return newCentroids;\n}\nfunction centroidsEqual(centroids1, centroids2) {\n  for (var i = 0; i < centroids1.length; i++) {\n    for (var j = 0; j < centroids1[i].length; j++) {\n      if (centroids1[i][j] !== centroids2[i][j]) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\nfunction euclideanDistance(point1, point2) {\n  var sum = 0;\n  for (var i = 0; i < point1.length; i++) {\n    sum += Math.pow(point1[i] - point2[i], 2);\n  }\n  return Math.sqrt(sum);\n}\nfunction calculateTotalDistance(data, centroids, clusterAssignments) {\n  var totalDistance = 0;\n  for (var i = 0; i < data.length; i++) {\n    totalDistance += euclideanDistance(data[i], centroids[clusterAssignments[i]]);\n  }\n  return totalDistance;\n}\nvar processResult = function processResult(result) {\n  var artistsId = new Set();\n  var relationships = [];\n  var artists = [];\n  result.records.forEach(function (record) {\n    var relationship = record.get('p');\n    var startData = relationship.start.properties;\n    var endData = relationship.end.properties;\n    var relationshipData = relationship.segments[0].relationship.properties;\n    var relation = new exhibited_with(startData, endData, relationshipData);\n    relationships.push(relation);\n\n    // Check if the artist with the same ID hasn't been created yet\n    var artistId = startData.id;\n    if (!artistsId.has(artistId)) {\n      var artist = new Artist(startData);\n      artistsId.add(artistId);\n      artists.push(artist);\n      // Store the artist object as needed\n    }\n    var otherArtistId = endData.id;\n    if (!artistsId.has(otherArtistId)) {\n      var otherArtist = new Artist(endData);\n      artistsId.add(otherArtistId);\n      artists.push(otherArtist);\n    }\n  });\n  return [artists, relationships];\n};\nfunction removeEmptyClusters(clusteredArtists) {\n  // Remove empty clusters and reassign IDs\n  var nonEmptyClusters = clusteredArtists.filter(function (cluster) {\n    return cluster.length > 0;\n  });\n  var newClusterMap = new Map();\n  nonEmptyClusters.forEach(function (cluster, newIndex) {\n    cluster.forEach(function (artist) {\n      newClusterMap.set(artist.id, newIndex);\n    });\n  });\n  var newClusteredArtists = Array.from({\n    length: nonEmptyClusters.length\n  }, function () {\n    return [];\n  });\n  clusteredArtists.forEach(function (cluster) {\n    cluster.forEach(function (artist) {\n      var newClusterId = newClusterMap.get(artist.id);\n      newClusteredArtists[newClusterId].push(artist);\n      artist.cluster = newClusterId; // Update the artist's cluster ID\n    });\n  });\n  return newClusteredArtists;\n}\nvar findAllNationalityTechniqueAmount = /*#__PURE__*/function () {\n  var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(minLimit, maxLimit) {\n    var query;\n    return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n      while (1) switch (_context11.prev = _context11.next) {\n        case 0:\n          query = \"\\n        MATCH (a:Artist)\\n        WHERE a.artForms <> [] AND a.country <> '\\\\N' AND a.TotalExhibitedArtworks >= $minLimit AND a.TotalExhibitedArtworks <= $maxLimit\\n        WITH a\\n        WITH collect(a) AS selectedArtists\\n\\n        UNWIND selectedArtists AS a\\n        MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\\n        WHERE b IN selectedArtists\\n        RETURN p\\n    \";\n          return _context11.abrupt(\"return\", streamQuery(query, {\n            minLimit: parseInt(minLimit),\n            maxLimit: parseInt(maxLimit)\n          }));\n        case 2:\n        case \"end\":\n          return _context11.stop();\n      }\n    }, _callee11);\n  }));\n  return function findAllNationalityTechniqueAmount(_x4, _x5) {\n    return _ref11.apply(this, arguments);\n  };\n}();\nvar findAllBirthcountryTechniqueAmount = /*#__PURE__*/function () {\n  var _ref12 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(minLimit, maxLimit) {\n    var query;\n    return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n      while (1) switch (_context12.prev = _context12.next) {\n        case 0:\n          query = \"\\n        MATCH (a:Artist)\\n        WHERE a.artForms <> [] AND a.birthCountry <> '\\\\N' AND a.TotalExhibitedArtworks >= $minLimit AND a.TotalExhibitedArtworks <= $maxLimit\\n        WITH a\\n        WITH collect(a) AS selectedArtists\\n\\n        UNWIND selectedArtists AS a\\n        MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\\n        WHERE b IN selectedArtists\\n        RETURN p\\n    \";\n          return _context12.abrupt(\"return\", streamQuery(query, {\n            minLimit: parseInt(minLimit),\n            maxLimit: parseInt(maxLimit)\n          }));\n        case 2:\n        case \"end\":\n          return _context12.stop();\n      }\n    }, _callee12);\n  }));\n  return function findAllBirthcountryTechniqueAmount(_x6, _x7) {\n    return _ref12.apply(this, arguments);\n  };\n}();\nvar findAllDeathcountryTechniqueAmount = /*#__PURE__*/function () {\n  var _ref13 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(minLimit, maxLimit) {\n    var query;\n    return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n      while (1) switch (_context13.prev = _context13.next) {\n        case 0:\n          query = \"\\n        MATCH (a:Artist)\\n        WHERE a.artForms <> [] AND a.deathCountry <> '\\\\N' AND a.TotalExhibitedArtworks >= $minLimit AND a.TotalExhibitedArtworks <= $maxLimit\\n        WITH a\\n        WITH collect(a) AS selectedArtists\\n\\n        UNWIND selectedArtists AS a\\n        MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\\n        WHERE b IN selectedArtists\\n        RETURN p\\n    \";\n          return _context13.abrupt(\"return\", streamQuery(query, {\n            minLimit: parseInt(minLimit),\n            maxLimit: parseInt(maxLimit)\n          }));\n        case 2:\n        case \"end\":\n          return _context13.stop();\n      }\n    }, _callee13);\n  }));\n  return function findAllDeathcountryTechniqueAmount(_x8, _x9) {\n    return _ref13.apply(this, arguments);\n  };\n}();\nvar findAllMostExhibitedInTechniqueAmount = /*#__PURE__*/function () {\n  var _ref14 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(minLimit, maxLimit) {\n    var query;\n    return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n      while (1) switch (_context14.prev = _context14.next) {\n        case 0:\n          query = \"\\n        MATCH (a:Artist)\\n        WHERE a.artForms <> [] AND a.mostExhibitedInCountry <> '\\\\N' AND a.unclearMostExhibitedInCountry = FALSE AND a.TotalExhibitedArtworks >= $minLimit AND a.TotalExhibitedArtworks <= $maxLimit\\n        WITH a\\n        WITH collect(a) AS selectedArtists\\n\\n        UNWIND selectedArtists AS a\\n        MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\\n        WHERE b IN selectedArtists\\n        RETURN p\\n    \";\n          return _context14.abrupt(\"return\", streamQuery(query, {\n            minLimit: parseInt(minLimit),\n            maxLimit: parseInt(maxLimit)\n          }));\n        case 2:\n        case \"end\":\n          return _context14.stop();\n      }\n    }, _callee14);\n  }));\n  return function findAllMostExhibitedInTechniqueAmount(_x10, _x11) {\n    return _ref14.apply(this, arguments);\n  };\n}();\nvar streamQuery = /*#__PURE__*/function () {\n  var _ref15 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16(query, params) {\n    var _require6, session;\n    return _regeneratorRuntime().wrap(function _callee16$(_context16) {\n      while (1) switch (_context16.prev = _context16.next) {\n        case 0:\n          _require6 = require('../db'), session = _require6.session;\n          _context16.next = 3;\n          return dbSemaphore.runExclusive( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15() {\n            var result, artistsId, relationships, artists;\n            return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n              while (1) switch (_context15.prev = _context15.next) {\n                case 0:\n                  result = session.run(query, params);\n                  artistsId = new Set();\n                  relationships = [];\n                  artists = [];\n                  _context15.next = 6;\n                  return new Promise(function (resolve, reject) {\n                    result.subscribe({\n                      onNext: function onNext(record) {\n                        var relationship = record.get('p');\n                        var startData = relationship.start.properties;\n                        var endData = relationship.end.properties;\n                        var relationshipData = relationship.segments[0].relationship.properties;\n                        var relation = new exhibited_with(startData, endData, relationshipData);\n                        relationships.push(relation);\n                        var artistId = startData.id;\n                        if (!artistsId.has(artistId)) {\n                          var artist = new Artist(startData);\n                          artistsId.add(artistId);\n                          artists.push(artist);\n                        }\n                        var otherArtistId = endData.id;\n                        if (!artistsId.has(otherArtistId)) {\n                          var otherArtist = new Artist(endData);\n                          artistsId.add(otherArtistId);\n                          artists.push(otherArtist);\n                        }\n                      },\n                      onCompleted: function onCompleted() {\n                        resolve([artists, relationships]);\n                      },\n                      onError: function onError(error) {\n                        reject(error);\n                      }\n                    });\n                  });\n                case 6:\n                  return _context15.abrupt(\"return\", [artists, relationships]);\n                case 7:\n                case \"end\":\n                  return _context15.stop();\n              }\n            }, _callee15);\n          })));\n        case 3:\n          return _context16.abrupt(\"return\", _context16.sent);\n        case 4:\n        case \"end\":\n          return _context16.stop();\n      }\n    }, _callee16);\n  }));\n  return function streamQuery(_x12, _x13) {\n    return _ref15.apply(this, arguments);\n  };\n}();\nfunction spectralClusteringNationality(_x14, _x15, _x16) {\n  return _spectralClusteringNationality.apply(this, arguments);\n}\nfunction _spectralClusteringNationality() {\n  _spectralClusteringNationality = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18(min, max, k) {\n    var _yield$findAllNationa, _yield$findAllNationa2, artists, relationships, artistsWithClusters;\n    return _regeneratorRuntime().wrap(function _callee18$(_context18) {\n      while (1) switch (_context18.prev = _context18.next) {\n        case 0:\n          _context18.prev = 0;\n          if (!(latestMinLimit != min || latestMaxLimit != max || latestValue !== 'nationality')) {\n            _context18.next = 14;\n            break;\n          }\n          _context18.next = 4;\n          return findAllNationalityTechniqueAmount(min, max);\n        case 4:\n          _yield$findAllNationa = _context18.sent;\n          _yield$findAllNationa2 = _slicedToArray(_yield$findAllNationa, 2);\n          artists = _yield$findAllNationa2[0];\n          relationships = _yield$findAllNationa2[1];\n          latestArtists = artists;\n          latestRelationships = relationships;\n          latestMinLimit = min;\n          latestMaxLimit = max;\n          latestValue = 'nationality';\n          console.log(latestMinLimit, latestMaxLimit);\n        case 14:\n          _context18.next = 16;\n          return spectralClustering(latestArtists, latestRelationships, k);\n        case 16:\n          artistsWithClusters = _context18.sent;\n          return _context18.abrupt(\"return\", artistsWithClusters);\n        case 20:\n          _context18.prev = 20;\n          _context18.t0 = _context18[\"catch\"](0);\n          console.error(_context18.t0);\n        case 23:\n        case \"end\":\n          return _context18.stop();\n      }\n    }, _callee18, null, [[0, 20]]);\n  }));\n  return _spectralClusteringNationality.apply(this, arguments);\n}\nfunction spectralClusteringBirthcountry(_x17, _x18, _x19) {\n  return _spectralClusteringBirthcountry.apply(this, arguments);\n}\nfunction _spectralClusteringBirthcountry() {\n  _spectralClusteringBirthcountry = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee19(min, max, k) {\n    var _yield$findAllBirthco, _yield$findAllBirthco2, artists, relationships, artistsWithClusters;\n    return _regeneratorRuntime().wrap(function _callee19$(_context19) {\n      while (1) switch (_context19.prev = _context19.next) {\n        case 0:\n          _context19.prev = 0;\n          if (!(latestMinLimit != min || latestMaxLimit != max || latestValue !== 'birthcountry')) {\n            _context19.next = 13;\n            break;\n          }\n          _context19.next = 4;\n          return findAllBirthcountryTechniqueAmount(min, max);\n        case 4:\n          _yield$findAllBirthco = _context19.sent;\n          _yield$findAllBirthco2 = _slicedToArray(_yield$findAllBirthco, 2);\n          artists = _yield$findAllBirthco2[0];\n          relationships = _yield$findAllBirthco2[1];\n          latestArtists = artists;\n          latestRelationships = relationships;\n          latestMinLimit = min;\n          latestMaxLimit = max;\n          latestValue = 'birthcountry';\n        case 13:\n          _context19.next = 15;\n          return spectralClustering(latestArtists, latestRelationships, k);\n        case 15:\n          artistsWithClusters = _context19.sent;\n          return _context19.abrupt(\"return\", artistsWithClusters);\n        case 19:\n          _context19.prev = 19;\n          _context19.t0 = _context19[\"catch\"](0);\n          console.error(_context19.t0);\n        case 22:\n        case \"end\":\n          return _context19.stop();\n      }\n    }, _callee19, null, [[0, 19]]);\n  }));\n  return _spectralClusteringBirthcountry.apply(this, arguments);\n}\nfunction spectralClusteringDeathcountry(_x20, _x21, _x22) {\n  return _spectralClusteringDeathcountry.apply(this, arguments);\n}\nfunction _spectralClusteringDeathcountry() {\n  _spectralClusteringDeathcountry = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee20(min, max, k) {\n    var _yield$findAllDeathco, _yield$findAllDeathco2, artists, relationships, artistsWithClusters;\n    return _regeneratorRuntime().wrap(function _callee20$(_context20) {\n      while (1) switch (_context20.prev = _context20.next) {\n        case 0:\n          _context20.prev = 0;\n          if (!(latestMinLimit != min || latestMaxLimit != max || latestValue !== 'deathcountry')) {\n            _context20.next = 13;\n            break;\n          }\n          _context20.next = 4;\n          return findAllDeathcountryTechniqueAmount(min, max);\n        case 4:\n          _yield$findAllDeathco = _context20.sent;\n          _yield$findAllDeathco2 = _slicedToArray(_yield$findAllDeathco, 2);\n          artists = _yield$findAllDeathco2[0];\n          relationships = _yield$findAllDeathco2[1];\n          latestArtists = artists;\n          latestRelationships = relationships;\n          latestMinLimit = min;\n          latestMaxLimit = max;\n          latestValue = 'deathcountry';\n        case 13:\n          _context20.next = 15;\n          return spectralClustering(latestArtists, latestRelationships, k);\n        case 15:\n          artistsWithClusters = _context20.sent;\n          return _context20.abrupt(\"return\", artistsWithClusters);\n        case 19:\n          _context20.prev = 19;\n          _context20.t0 = _context20[\"catch\"](0);\n          console.error(_context20.t0);\n        case 22:\n        case \"end\":\n          return _context20.stop();\n      }\n    }, _callee20, null, [[0, 19]]);\n  }));\n  return _spectralClusteringDeathcountry.apply(this, arguments);\n}\nfunction spectralClusteringMostExhibited(_x23, _x24, _x25) {\n  return _spectralClusteringMostExhibited.apply(this, arguments);\n}\nfunction _spectralClusteringMostExhibited() {\n  _spectralClusteringMostExhibited = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee21(min, max, k) {\n    var _yield$findAllMostExh, _yield$findAllMostExh2, artists, relationships, artistsWithClusters;\n    return _regeneratorRuntime().wrap(function _callee21$(_context21) {\n      while (1) switch (_context21.prev = _context21.next) {\n        case 0:\n          _context21.prev = 0;\n          if (!(latestMinLimit != min || latestMaxLimit != max || latestValue !== 'mostexhibited')) {\n            _context21.next = 13;\n            break;\n          }\n          _context21.next = 4;\n          return findAllMostExhibitedInTechniqueAmount(min, max);\n        case 4:\n          _yield$findAllMostExh = _context21.sent;\n          _yield$findAllMostExh2 = _slicedToArray(_yield$findAllMostExh, 2);\n          artists = _yield$findAllMostExh2[0];\n          relationships = _yield$findAllMostExh2[1];\n          latestArtists = artists;\n          latestRelationships = relationships;\n          latestMinLimit = min;\n          latestMaxLimit = max;\n          latestValue = 'mostexhibited';\n        case 13:\n          _context21.next = 15;\n          return spectralClustering(latestArtists, latestRelationships, k);\n        case 15:\n          artistsWithClusters = _context21.sent;\n          return _context21.abrupt(\"return\", artistsWithClusters);\n        case 19:\n          _context21.prev = 19;\n          _context21.t0 = _context21[\"catch\"](0);\n          console.error(_context21.t0);\n        case 22:\n        case \"end\":\n          return _context21.stop();\n      }\n    }, _callee21, null, [[0, 19]]);\n  }));\n  return _spectralClusteringMostExhibited.apply(this, arguments);\n}\nmodule.exports = {\n  findAllNationalityTechnique: findAllNationalityTechnique,\n  findAllBirthcountryTechnique: findAllBirthcountryTechnique,\n  findAllDeathcountryTechnique: findAllDeathcountryTechnique,\n  findAllMostExhibitedInTechnique: findAllMostExhibitedInTechnique,\n  findAllTechniques: findAllTechniques,\n  findAllNationalityTechniqueAmount: findAllNationalityTechniqueAmount,\n  findAllBirthcountryTechniqueAmount: findAllBirthcountryTechniqueAmount,\n  findAllDeathcountryTechniqueAmount: findAllDeathcountryTechniqueAmount,\n  findAllMostExhibitedInTechniqueAmount: findAllMostExhibitedInTechniqueAmount,\n  spectralClusteringNationality: spectralClusteringNationality,\n  spectralClusteringBirthcountry: spectralClusteringBirthcountry,\n  spectralClusteringDeathcountry: spectralClusteringDeathcountry,\n  spectralClusteringMostExhibited: spectralClusteringMostExhibited\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":{"version":3,"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","_catch","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","key","info","error","_asyncToGenerator","fn","self","args","arguments","apply","err","undefined","_defineProperties","target","props","descriptor","_toPropertyKey","_createClass","Constructor","protoProps","staticProps","_toPrimitive","toPrimitive","String","Number","_classCallCheck","instance","dbSemaphore","require","math","latestArtists","latestRelationships","latestMinLimit","latestMaxLimit","latestValue","Artist","data","id","firstname","lastname","birthyear","birthplace","deathyear","deathplace","nationality","country","sex","title","techniques","artForms","amount_techniques","amountArtForms","distinct_techniques","distinctArtForms","europeanRegionNationality","most_exhibited_in","mostExhibitedInCountry","europeanRegionMostExhibited","europeanRegionMostExhibitedInCountry","most_exhibited_in_amount","mostExhibitedInCountryAmount","total_exhibited_artworks","TotalExhibitedArtworks","deathcountry","deathCountry","europeanRegionDeath","europeanRegionDeathCountry","birthcountry","birthCountry","europeanRegionBirth","europeanRegionBirthCountry","total_exhibitions","TotalExhibitions","techniques_freq","artFormsFreq","cluster","overall_avg_date","avg_start_date","avg_end_date","avg_duration","exhibited_with","startData","endData","relationshipData","startId","Math","min","endId","max","sharedExhibitions","sharedExhibitionMinArtworks","findAllNationalityTechnique","_ref","_callee2","_require","session","_callee2$","_context2","runExclusive","_callee","result","_callee$","_context","console","log","run","processResult","findAllBirthcountryTechnique","_ref3","_callee4","_require2","_callee4$","_context4","_callee3","_callee3$","_context3","findAllDeathcountryTechnique","_ref5","_callee6","_require3","_callee6$","_context6","_callee5","_callee5$","_context5","findAllMostExhibitedInTechnique","_ref7","_callee8","_require4","_callee8$","_context8","_callee7","_callee7$","_context7","findAllTechniques","_ref9","_callee10","_require5","_callee10$","_context10","_callee9","_callee9$","_context9","normalizeLogarithmically","logMaxValue","log1p","_toConsumableArray","logMinValue","range","normalized","Map","set","spectralClustering","_x","_x2","_x3","_spectralClustering","_callee17","artists","relationships","k","sharedExhibitionValues","normalizedSharedExhibitionValues","size","adjacencyMatrix","degreeMatrix","laplacianMatrix","eigensystem","firstThreeEigenvectors","featureMatrixU","vector","featureMatrixUTransposed","clusters","clusterArray","clusterAssignments","clusteredArtists","clusterMap","intraClusterRelationships","singleInterClusterRelationships","interClusterRelationshipsMap","interClusterRelationships","_callee17$","_context17","relationship","zeros","findIndex","artist","j","weight","get","map","index","matrix","sum","_data","subtract","eigs","eigenvectors","toArray","transpose","kMeansClustering","redistributeClusters","_objectSpread","Array","from","clusterIndex","clusterA","clusterB","concat","has","aggregatedRelationship","rel","minClusterSize","maxClusterSize","centroids","calculateCentroids","clusterSizes","fill","needsHelp","filter","stat","need","point","idx","currentClusterIndex","closest","distance","Infinity","centroid","euclideanDistance","reduce","mean","m","maxIterations","bestCentroids","bestClusterAssignments","minTotalDistance","initialization","initializeCentroids","iteration","newClusterAssignments","assignPointsToCentroids","newCentroids","updateCentroids","centroidsEqual","totalDistance","calculateTotalDistance","_loop","_loop2","farthestPointIndex","maxDistance","minDistance","nearestClusterIndex","floor","random","_loop3","distances","b","probabilities","cumulativeProbabilities","acc","prob","rand","nextCentroidIndex","cumProb","_iterator","_createForOfIteratorHelper","_step","closestCentroidIndex","clusterCounts","centroids1","centroids2","point1","point2","pow","sqrt","artistsId","Set","records","record","start","properties","end","segments","relation","artistId","add","otherArtistId","otherArtist","removeEmptyClusters","nonEmptyClusters","newClusterMap","newIndex","newClusteredArtists","newClusterId","findAllNationalityTechniqueAmount","_ref11","_callee11","minLimit","maxLimit","query","_callee11$","_context11","streamQuery","parseInt","_x4","_x5","findAllBirthcountryTechniqueAmount","_ref12","_callee12","_callee12$","_context12","_x6","_x7","findAllDeathcountryTechniqueAmount","_ref13","_callee13","_callee13$","_context13","_x8","_x9","findAllMostExhibitedInTechniqueAmount","_ref14","_callee14","_callee14$","_context14","_x10","_x11","_ref15","_callee16","params","_require6","_callee16$","_context16","_callee15","_callee15$","_context15","subscribe","onNext","onCompleted","onError","_x12","_x13","spectralClusteringNationality","_x14","_x15","_x16","_spectralClusteringNationality","_callee18","_yield$findAllNationa","_yield$findAllNationa2","artistsWithClusters","_callee18$","_context18","_slicedToArray","t0","spectralClusteringBirthcountry","_x17","_x18","_x19","_spectralClusteringBirthcountry","_callee19","_yield$findAllBirthco","_yield$findAllBirthco2","_callee19$","_context19","spectralClusteringDeathcountry","_x20","_x21","_x22","_spectralClusteringDeathcountry","_callee20","_yield$findAllDeathco","_yield$findAllDeathco2","_callee20$","_context20","spectralClusteringMostExhibited","_x23","_x24","_x25","_spectralClusteringMostExhibited","_callee21","_yield$findAllMostExh","_yield$findAllMostExh2","_callee21$","_context21","module","exports"],"sourceRoot":"C:\\Users\\Luisa Müller\\Documents\\Studium\\Projekt\\BachelorProject\\backend\\src\\models\\","sources":["artist.js"],"sourcesContent":["const dbSemaphore = require('../semaphoreHandler');\r\nconst math = require('mathjs');\r\n\r\nlet latestArtists = [];\r\nlet latestRelationships = [];\r\nlet latestMinLimit = -1;\r\nlet latestMaxLimit = -1;\r\nlet latestValue = '';\r\n\r\n\r\nclass Artist {\r\n    constructor(data) {\r\n        this.id = Number(data.id); \r\n        this.firstname = data.firstname;\r\n        this.lastname = data.lastname;\r\n        this.birthyear = data.birthyear;\r\n        this.birthplace = data.birthplace;\r\n        this.deathyear = data.deathyear\r\n        this.deathplace = data.deathplace;\r\n        this.nationality = data.country;\r\n        this.sex = data.sex;\r\n        this.title = data.title;\r\n        this.techniques = data.artForms;\r\n        this.amount_techniques=data.amountArtForms;\r\n        this.distinct_techniques=data.distinctArtForms;\r\n        this.europeanRegionNationality = data.europeanRegionNationality\r\n        this.most_exhibited_in = data.mostExhibitedInCountry;\r\n        this.europeanRegionMostExhibited =  data.europeanRegionMostExhibitedInCountry;\r\n        this.most_exhibited_in_amount = data.mostExhibitedInCountryAmount;\r\n        this.total_exhibited_artworks = data.TotalExhibitedArtworks;\r\n        this.deathcountry = data.deathCountry;\r\n        this.europeanRegionDeath = data.europeanRegionDeathCountry\r\n        this.birthcountry = data.birthCountry;\r\n        this.europeanRegionBirth = data.europeanRegionBirthCountry;\r\n        this.total_exhibitions = data.TotalExhibitions;\r\n        this.techniques_freq = data.artFormsFreq;\r\n        this.cluster = -1; // Default value\r\n        this.overall_avg_date = data.overall_avg_date;\r\n        this.avg_start_date = data.avg_start_date;\r\n        this.avg_end_date = data.avg_end_date;\r\n        this.avg_duration = data.avg_duration;\r\n    }\r\n\r\n\r\n}\r\n\r\n// Define European regions based on country codes\r\n/*   const europeanRegions = {\r\n    \"North Europe\": [\"DK\", \"EE\", \"FI\", \"IS\", \"IE\", \"LV\", \"LT\", \"NO\", \"SE\"],\r\n    \"Eastern Europe\": [\"AZ\", \"BY\", \"BG\", \"CZ\", \"HU\", \"MD\", \"PL\", \"RO\", \"RU\", \"SK\", \"UA\"],\r\n    \"Southern Europe\": [\"BA\", \"HR\", \"GI\", \"GR\", \"IT\", \"ME\", \"PT\", \"RS\", \"SI\", \"ES\"],\r\n    \"Western Europe\": [\"AT\", \"BE\", \"FR\", \"DE\", \"LU\", \"MC\", \"NL\", \"CH\", \"GB\"],\r\n    \"Others\": [\r\n        \"US\", \"AU\", \"GE\", \"MX\", \"AM\", \"IL\", \"CL\", \"AR\", \"CA\", \"DO\", \"PE\", \"JP\", \"TR\",\r\n        \"BR\", \"ZA\", \"NZ\", \"VE\", \"GT\", \"UY\", \"SV\", \"PY\", \"IN\", \"PF\", \"KZ\", \"UZ\", \"VN\", \r\n        \"NA\", \"JO\", \"IR\", \"KH\", \"JM\", \"SA\", \"DZ\", \"CN\", \"EG\", \"VI\", \"ID\", \"CU\", \"TN\", \r\n        \"MQ\", \"MU\", \"LK\", \"EC\", \"SG\", \"BL\", \"TH\", \"BO\"\r\n      ]\r\n    }; */\r\n\r\n\r\n/*   const allCountries = [\r\n    \"GB\", \"ID\", \"UA\", \"CH\", \"RU\", \"NL\", \"DE\", \"BY\", \"IT\", \"LT\", \"US\", \"HU\", \"FR\", \"AU\", \"BE\", \"CZ\", \"AT\", \"NO\", \r\n    \"GR\", \"SE\", \"PL\", \"LV\", \"FI\", \"ES\", \"MD\", \"CA\", \"BG\", \"GE\", \"DZ\", \"MX\", \"AZ\", \"RO\", \"EE\", \"DK\", \"AR\", \"UY\", \r\n    \"CU\", \"PT\", \"HR\", \"SI\", \"TN\", \"EG\", \"SK\", \"TR\", \"VI\", \"RS\", \"IE\", \"DO\", \"JP\", \"MQ\", \"IN\", \"MU\", \"ME\", \"CL\", \r\n    \"ZA\", \"NZ\", \"KH\", \"LU\", \"GI\", \"VE\", \"GT\", \"SV\", \"PY\", \"LK\", \"BA\", \"EC\", \"BR\", \"SG\", \"BL\", \"PE\", \"TH\", \"PF\", \r\n    \"AM\", \"IL\", \"MC\", \"CN\", \"UZ\", \"KZ\", \"MA\", \"BO\", \"VN\", \"NA\", \"JO\", \"IR\", \"JM\", \"SA\"\r\n  ]\r\n  // Create a set of all countries in europeanRegions\r\nconst categorizedCountries = new Set();\r\nObject.values(europeanRegions).forEach(regionCountries => {\r\n  regionCountries.forEach(country => {\r\n    categorizedCountries.add(country);\r\n  });\r\n});\r\n\r\n// Find countries in allCountries that are not in categorizedCountries\r\nconst uncategorizedCountries = allCountries.filter(country => !categorizedCountries.has(country));\r\n\r\nconsole.log(uncategorizedCountries);\r\n   */\r\n\r\nclass exhibited_with {\r\n    constructor(startData, endData, relationshipData) {\r\n        this.startId = Math.min(startData.id, endData.id);\r\n        this.endId = Math.max(startData.id, endData.id);\r\n        this.sharedExhibitions = relationshipData.sharedExhibitions;\r\n        this.sharedExhibitionMinArtworks = relationshipData.sharedExhibitionMinArtworks;\r\n    }\r\n} \r\n\r\nconst findAllNationalityTechnique = async () => {\r\n    const { session } = require('../db');\r\n    return await dbSemaphore.runExclusive(async () => {\r\n        console.log('Semaphore acquired by normal')\r\n    \r\n    const result = await session.run(\r\n   // Collect 25 distinct artists based on some criteria\r\n    `MATCH (a:Artist)\r\n    WHERE a.artForms <> [] AND a.country <> '\\\\N'\r\n    WITH a\r\n    LIMIT 25\r\n    WITH collect(a) AS selectedArtists\r\n\r\n    // For each artist in the selected group, find all exhibited relationships within this group\r\n    UNWIND selectedArtists AS a\r\n    MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\r\n    WHERE b IN selectedArtists\r\n    RETURN p\r\n    `);\r\n\r\n    return await processResult(result); \r\n});\r\n};\r\n\r\n/* const findAllNationalityTechniqueAmount = async (minLimit, maxLimit) => {\r\n    const { session } = require('../db');\r\n    return await dbSemaphore.runExclusive(async () => {\r\n        console.log('Semaphore acquired by amount')\r\n    const result = await session.run(\r\n   // Collect artists where total\r\n    `MATCH (a:Artist)\r\n    WHERE a.artForms <> [] AND a.country <> '\\\\N' AND a.TotalExhibitedArtworks >= $minLimit AND a.TotalExhibitedArtworks <= $maxLimit\r\n    WITH a\r\n    WITH collect(a) AS selectedArtists\r\n\r\n    // For each artist in the selected group, find all exhibited relationships within this group\r\n    UNWIND selectedArtists AS a\r\n    MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\r\n    WHERE b IN selectedArtists\r\n    RETURN p\r\n    `\r\n    ,{ minLimit: parseInt(minLimit), maxLimit: parseInt(maxLimit) } );// Ensure these are correctly passed as integers);\r\n    \r\n\r\n    return await processResult(result);\r\n});\r\n}; */\r\n\r\n\r\nconst findAllBirthcountryTechnique = async () => {\r\n    const { session } = require('../db');\r\n    return await dbSemaphore.runExclusive(async () => {\r\n    const result = await session.run(\r\n   // Collect 25 distinct artists based on some criteria\r\n    `MATCH (a:Artist)\r\n    WHERE a.artForms <> [] AND a.birthCountry <> '\\\\N'\r\n    WITH a\r\n    LIMIT 25\r\n    WITH collect(a) AS selectedArtists\r\n\r\n    // For each artist in the selected group, find all exhibited relationships within this group\r\n    UNWIND selectedArtists AS a\r\n    MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\r\n    WHERE b IN selectedArtists\r\n    RETURN p\r\n    `);\r\n\r\n    return await processResult(result);\r\n});\r\n};\r\n\r\n/* const findAllBirthcountryTechniqueAmount = async (minLimit,maxLimit) => {\r\n    const { session } = require('../db');\r\n    return await dbSemaphore.runExclusive(async () => {\r\n    const result = await session.run(\r\n   // Collect 25 distinct artists based on some criteria\r\n    `MATCH (a:Artist) \r\n    WHERE a.artForms <> [] AND a.birthCountry <> '\\\\N' AND a.TotalExhibitedArtworks >= $minLimit AND a.TotalExhibitedArtworks <= $maxLimit\r\n    WITH a\r\n    WITH collect(a) AS selectedArtists\r\n\r\n    // For each artist in the selected group, find all exhibited relationships within this group\r\n    UNWIND selectedArtists AS a\r\n    MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\r\n    WHERE b IN selectedArtists\r\n    RETURN p\r\n    `\r\n    ,{ minLimit: parseInt(minLimit), maxLimit: parseInt(maxLimit) } );// Ensure these are correctly passed as integers);\r\n    \r\n\r\n    return await processResult(result);\r\n});\r\n}; */\r\n\r\nconst findAllDeathcountryTechnique = async () => {\r\n    const { session } = require('../db');\r\n    return await dbSemaphore.runExclusive(async () => {\r\n    const result = await session.run(\r\n   // Collect 25 distinct artists based on some criteria\r\n    `MATCH (a:Artist)\r\n    WHERE a.artForms <> [] AND a.deathCountry <> '\\\\N'\r\n    WITH a\r\n    LIMIT 25\r\n    WITH collect(a) AS selectedArtists\r\n\r\n    // For each artist in the selected group, find all exhibited relationships within this group\r\n    UNWIND selectedArtists AS a\r\n    MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\r\n    WHERE b IN selectedArtists\r\n    RETURN p\r\n    `);\r\n\r\n    return await processResult(result);\r\n\r\n});\r\n};\r\n/* \r\nconst findAllDeathcountryTechniqueAmount = async (minLimit,maxLimit) => {\r\n    const { session } = require('../db');\r\n    return await dbSemaphore.runExclusive(async () => {\r\n    const result = await session.run(\r\n   // Collect 25 distinct artists based on some criteria\r\n    `MATCH (a:Artist)\r\n    WHERE a.artForms <> [] AND a.deathCountry <> '\\\\N'  AND a.TotalExhibitedArtworks >= $minLimit AND a.TotalExhibitedArtworks <= $maxLimit\r\n    WITH a\r\n    WITH collect(a) AS selectedArtists\r\n\r\n    // For each artist in the selected group, find all exhibited relationships within this group\r\n    UNWIND selectedArtists AS a\r\n    MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\r\n    WHERE b IN selectedArtists\r\n    RETURN p\r\n    `\r\n    ,{ minLimit: parseInt(minLimit), maxLimit: parseInt(maxLimit) } );// Ensure these are correctly passed as integers);\r\n    \r\n\r\n    return await processResult(result);\r\n\r\n});\r\n}; */\r\n\r\n\r\nconst findAllMostExhibitedInTechnique = async () => {\r\n    const { session } = require('../db');\r\n    return await dbSemaphore.runExclusive(async () => {\r\n    const result = await session.run(\r\n   // Collect 25 distinct artists based on some criteria\r\n    `MATCH (a:Artist)\r\n    WHERE a.artForms <> [] AND a.mostExhibitedInCountry <> '\\\\N' AND a.unclearMostExhibitedInCountry = FALSE \r\n    WITH a\r\n    LIMIT 25\r\n    WITH collect(a) AS selectedArtists\r\n\r\n    // For each artist in the selected group, find all exhibited relationships within this group\r\n    UNWIND selectedArtists AS a\r\n    MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\r\n    WHERE b IN selectedArtists\r\n    RETURN p\r\n    `);\r\n\r\n    return await processResult(result);\r\n});\r\n};\r\n\r\n/* const findAllMostExhibitedInTechniqueAmount = async (minLimit,maxLimit) => {\r\n    const { session } = require('../db');\r\n    return await dbSemaphore.runExclusive(async () => {\r\n    const result = await session.run(\r\n   // Collect 25 distinct artists based on some criteria\r\n    `MATCH (a:Artist)\r\n    WHERE a.artForms <> [] AND a.mostExhibitedInCountry <> '\\\\N' AND a.unclearMostExhibitedInCountry = FALSE  AND a.TotalExhibitedArtworks >= $minLimit AND a.TotalExhibitedArtworks <= $maxLimit\r\n    WITH a\r\n    WITH collect(a) AS selectedArtists\r\n\r\n    // For each artist in the selected group, find all exhibited relationships within this group\r\n    UNWIND selectedArtists AS a\r\n    MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\r\n    WHERE b IN selectedArtists\r\n    RETURN p\r\n    `\r\n    ,{ minLimit: parseInt(minLimit), maxLimit: parseInt(maxLimit) } );// Ensure these are correctly passed as integers);\r\n    \r\n\r\n    return await processResult(result);\r\n\r\n});\r\n}; */\r\n\r\n\r\nconst findAllTechniques = async () => {\r\n    const { session } = require('../db');\r\n    return await dbSemaphore.runExclusive(async () => {\r\n    const result = await session.run(\r\n   // Collect 25 distinct artists based on some criteria\r\n    `MATCH (a:Artist)\r\n    WHERE a.artForms <> [] AND a.artFormsFreq <> '{}'\r\n    WITH a\r\n    LIMIT 25\r\n    WITH collect(a) AS selectedArtists\r\n\r\n    // For each artist in the selected group, find all exhibited relationships within this group\r\n    UNWIND selectedArtists AS a\r\n    MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\r\n    WHERE b IN selectedArtists\r\n    RETURN p\r\n    `);\r\n\r\n    return await processResult(result);\r\n\r\n});\r\n};\r\n\r\n\r\n\r\n  // Assuming 'artists' is an array of artist nodes and 'relationships' is an array of edges with weights\r\nconst normalizeLogarithmically = (values) => {\r\n    const logMaxValue = Math.log1p(Math.max(...values.values()));\r\n    const logMinValue = Math.log1p(Math.min(...values.values()));\r\n    const range = logMaxValue - logMinValue;\r\n    const normalized = new Map();\r\n   \r\n    values.forEach((value, id) => {\r\n        normalized.set(id, (Math.log1p(value) - logMinValue) / range); // Normalize by dividing by the max degree\r\n    });\r\n    return normalized;\r\n};\r\n\r\nasync function spectralClustering(artists, relationships, k) {\r\n    console.log('cluster')\r\n    // Step 0: Extract sharedExhibitionMinArtworks values for normalization\r\n    const sharedExhibitionValues = new Map();\r\n    relationships.forEach(relationship => {\r\n        const id = relationship.startId;\r\n        const value = relationship.sharedExhibitionMinArtworks;\r\n        sharedExhibitionValues.set(id, value);\r\n    });\r\n\r\n    // Step 0.1: Normalize sharedExhibitionMinArtworks values\r\n    const normalizedSharedExhibitionValues = normalizeLogarithmically(sharedExhibitionValues);\r\n\r\n    // Step 1: Construct the adjacency matrix\r\n    const size = artists.length;\r\n    const adjacencyMatrix = math.zeros(size, size);\r\n\r\n    relationships.forEach(relationship => {\r\n        const i = artists.findIndex(artist => artist.id === relationship.startId);\r\n        const j = artists.findIndex(artist => artist.id === relationship.endId);\r\n        const weight = normalizedSharedExhibitionValues.get(relationship.startId);\r\n\r\n        adjacencyMatrix.set([i, j], Number(weight));\r\n        adjacencyMatrix.set([j, i], Number(weight)); // since it's an undirected graph\r\n    });   \r\n\r\n    // Step 2: Construct the degree matrix\r\n    const degreeMatrix = adjacencyMatrix.map((value, index, matrix) => {\r\n        return index[0] === index[1] ? Number(math.sum(matrix._data[index[0]])) : 0;\r\n    });\r\n\r\n    // Step 3: Construct the Laplacian matrix\r\n    const laplacianMatrix = math.subtract(degreeMatrix, adjacencyMatrix);\r\n\r\n   // Step 4: Compute the eigenvalues and eigenvectors\r\n   const eigensystem = math.eigs(laplacianMatrix);\r\n\r\n   // Check if the eigenvalues and eigenvectors are defined and not empty\r\n   if (!eigensystem || eigensystem.values.length === 0) {\r\n       throw new Error(\"Eigenvectors are undefined or missing data.\");\r\n   }\r\n \r\n\r\n   // Extract the first three eigenvectors\r\nconst firstThreeEigenvectors = eigensystem.eigenvectors.slice(0, k);\r\n\r\n// Initialize the feature matrix\r\nconst featureMatrixU = [];\r\n\r\n// Loop over the eigenvectors\r\nfor (let i = 0; i < firstThreeEigenvectors.length; i++) {\r\n    const vector = firstThreeEigenvectors[i].vector.toArray(); // Convert DenseMatrix to array\r\n    featureMatrixU.push(vector); // Push the vector as a column in the feature matrix\r\n}\r\n\r\n// Transpose the feature matrix to have columns as data points\r\nconst featureMatrixUTransposed = math.transpose(featureMatrixU);\r\n      // Perform initial kMeans Clustering\r\n      let clusters = kMeansClustering(featureMatrixUTransposed, k, 1); // Assume minClusterSize = 1 for basic example\r\n\r\n      // Redistribute clusters here\r\n      clusters = redistributeClusters(featureMatrixUTransposed, clusters, k, 5, 15); // Example sizes\r\n  \r\n   // Assuming kMeansClustering and other related functions are d\r\n   \r\n    // Associate artists with their clusters\r\n    const clusterArray = artists.map((artist, index) => ({\r\n        ...artist,\r\n        cluster: clusters[index]\r\n    }));\r\n    // Associate artists with their clusters\r\n    const clusterAssignments = artists.map((artist, index) => {\r\n    artist.cluster = clusters[index]; // Assign the cluster to the artist\r\n        \r\n});\r\n   \r\n    // Initialize an array of k empty arrays for the clusters\r\nconst clusteredArtists = Array.from({ length: k }, () => []);\r\n\r\n// Populate the cluster arrays with artists\r\nartists.forEach((artist, index) => {\r\n  const clusterIndex = clusters[index]; // Retrieve the cluster index assigned to the artist\r\n  clusteredArtists[clusterIndex].push(artist); // Add the artist to the corresponding cluster\r\n});\r\n\r\nconst clusterMap = new Map();\r\nartists.forEach((artist, index) => {\r\n    clusterMap.set(artist.id, clusters[index]); // Correctly associate artist ID with cluster index\r\n});\r\n\r\n\r\nconst intraClusterRelationships = Array.from({ length: k }, () => []);\r\nconst singleInterClusterRelationships = Array.from({ length: k }, () => []);\r\nconst interClusterRelationshipsMap = new Map();\r\n\r\nrelationships.forEach(relationship => {\r\n    const clusterA = clusterMap.get(relationship.startId);\r\n    const clusterB = clusterMap.get(relationship.endId);\r\n\r\n    if (clusterA === clusterB) {\r\n        intraClusterRelationships[clusterA].push(relationship);\r\n    } else {\r\n        singleInterClusterRelationships[clusterA].push(relationship);\r\n        singleInterClusterRelationships[clusterB].push(relationship);\r\n        const key = `${Math.min(clusterA, clusterB)}-${Math.max(clusterA, clusterB)}`;\r\n        if (!interClusterRelationshipsMap.has(key)) {\r\n            interClusterRelationshipsMap.set(key, { \r\n                startId: Math.min(clusterA, clusterB), \r\n                endId: Math.max(clusterA, clusterB), \r\n                sharedExhibitions: 0, \r\n                sharedExhibitionMinArtworks: 0 \r\n            });\r\n        }\r\n        const aggregatedRelationship = interClusterRelationshipsMap.get(key);\r\n        aggregatedRelationship.sharedExhibitions += relationship.sharedExhibitions;\r\n        aggregatedRelationship.sharedExhibitionMinArtworks += relationship.sharedExhibitionMinArtworks;\r\n    }\r\n});\r\n\r\nconst interClusterRelationships = Array.from(interClusterRelationshipsMap.values()).map(rel => \r\n    new exhibited_with(\r\n        { id: rel.startId }, \r\n        { id: rel.endId }, \r\n        { sharedExhibitions: rel.sharedExhibitions, sharedExhibitionMinArtworks: rel.sharedExhibitionMinArtworks }\r\n    )\r\n);\r\n\r\nconsole.log('cluster finished')\r\nreturn [\r\n    clusteredArtists,\r\n    intraClusterRelationships,\r\n    interClusterRelationships,  // You might want to further organize this by cluster pairs if needed\r\n    singleInterClusterRelationships\r\n];\r\n\r\n}\r\n\r\nfunction redistributeClusters(data, clusters, k, minClusterSize, maxClusterSize) {\r\n    const centroids = calculateCentroids(data, clusters, k);\r\n    let clusterSizes = new Array(k).fill(0);\r\n    clusters.forEach(cluster => clusterSizes[cluster]++);\r\n\r\n    const needsHelp = clusterSizes.map((size, index) => ({\r\n        index,\r\n        size,\r\n        type: size < minClusterSize ? 'undersized' : (size > maxClusterSize ? 'oversized' : 'ok')\r\n    })).filter(stat => stat.type !== 'ok');\r\n\r\n    needsHelp.forEach(need => {\r\n        if (need.type === 'oversized') {\r\n            data.forEach((point, idx) => {\r\n                if (clusters[idx] === need.index) {\r\n                    const currentClusterIndex = need.index;\r\n                    let closest = { index: -1, distance: Infinity };\r\n                    \r\n                    centroids.forEach((centroid, index) => {\r\n                        if (index !== currentClusterIndex && clusterSizes[index] < maxClusterSize) {\r\n                            const distance = euclideanDistance(point, centroid);\r\n                            if (distance < closest.distance) {\r\n                                closest = { index, distance };\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    if (closest.index !== -1) {\r\n                        clusters[idx] = closest.index;\r\n                        clusterSizes[currentClusterIndex]--;\r\n                        clusterSizes[closest.index]++;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    });\r\n\r\n    return clusters;\r\n}\r\n\r\nfunction calculateCentroids(data, clusters, k) {\r\n    const centroids = Array(k).fill(null).map(() => []);\r\n    data.forEach((point, index) => {\r\n        centroids[clusters[index]].push(point);\r\n    });\r\n    return centroids.map(cluster => cluster.reduce((mean, point) => \r\n        mean.map((m, idx) => m + point[idx] / cluster.length), new Array(data[0].length).fill(0))\r\n    );\r\n}\r\n\r\nfunction kMeansClustering(data, k, minClusterSize) {\r\n    const maxIterations = 500;\r\n    let bestCentroids = [];\r\n    let bestClusterAssignments = [];\r\n    let minTotalDistance = Infinity;\r\n\r\n    for (let initialization = 0; initialization < 10; initialization++) { // Try multiple random initializations\r\n        let centroids = initializeCentroids(data, k);\r\n        let clusterAssignments = [];\r\n\r\n        for (let iteration = 0; iteration < maxIterations; iteration++) {\r\n            const newClusterAssignments = assignPointsToCentroids(data, centroids);\r\n            const newCentroids = updateCentroids(data, newClusterAssignments, k);\r\n\r\n            if (centroidsEqual(newCentroids, centroids)) {\r\n                clusterAssignments = newClusterAssignments;\r\n                break;\r\n            }\r\n\r\n            centroids = newCentroids;\r\n        }\r\n\r\n        const totalDistance = calculateTotalDistance(data, centroids, clusterAssignments);\r\n        if (totalDistance < minTotalDistance) {\r\n            bestCentroids = centroids;\r\n            bestClusterAssignments = clusterAssignments;\r\n            minTotalDistance = totalDistance;\r\n        }\r\n    }\r\n\r\n    // Ensure each cluster meets the minimum size requirement\r\n    let clusterSizes = new Array(k).fill(0);\r\n    bestClusterAssignments.forEach(clusterIndex => {\r\n        clusterSizes[clusterIndex]++;\r\n    });\r\n\r\n    // Reassign points until each cluster has at least minClusterSize points\r\n    for (let i = 0; i < k; i++) {\r\n        while (clusterSizes[i] < minClusterSize) {\r\n            // Find the point farthest from its centroid in cluster i\r\n            let farthestPointIndex = -1;\r\n            let maxDistance = -1;\r\n\r\n            data.forEach((point, index) => {\r\n                if (bestClusterAssignments[index] === i) {\r\n                    const distance = euclideanDistance(point, bestCentroids[i]);\r\n                    if (distance > maxDistance) {\r\n                        maxDistance = distance;\r\n                        farthestPointIndex = index;\r\n                    }\r\n                }\r\n            });\r\n\r\n            // Reassign the farthest point to the nearest cluster\r\n            let minDistance = Infinity;\r\n            let nearestClusterIndex = -1;\r\n            for (let j = 0; j < k; j++) {\r\n                if (j !== i) {\r\n                    const distance = euclideanDistance(data[farthestPointIndex], bestCentroids[j]);\r\n                    if (distance < minDistance) {\r\n                        minDistance = distance;\r\n                        nearestClusterIndex = j;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Reassign the point to the nearest cluster\r\n            bestClusterAssignments[farthestPointIndex] = nearestClusterIndex;\r\n            clusterSizes[i]--;\r\n            clusterSizes[nearestClusterIndex]++;\r\n        }\r\n    }\r\n\r\n    return bestClusterAssignments;\r\n}\r\n\r\nfunction initializeCentroids(data, k) {\r\n    const centroids = [data[Math.floor(Math.random() * data.length)]]; // Start with one random centroid\r\n    for (let i = 1; i < k; i++) {\r\n        const distances = data.map(point => Math.min(...centroids.map(centroid => euclideanDistance(point, centroid))));\r\n        const totalDistance = distances.reduce((a, b) => a + b, 0);\r\n        const probabilities = distances.map(distance => distance / totalDistance);\r\n        const cumulativeProbabilities = probabilities.reduce((acc, prob, index) => {\r\n            if (index === 0) acc.push(prob);\r\n            else acc.push(acc[index - 1] + prob);\r\n            return acc;\r\n        }, []);\r\n        \r\n        const rand = Math.random();\r\n        const nextCentroidIndex = cumulativeProbabilities.findIndex(cumProb => cumProb >= rand);\r\n        centroids.push(data[nextCentroidIndex]);\r\n    }\r\n    return centroids;\r\n}\r\n\r\nfunction assignPointsToCentroids(data, centroids) {\r\n    const clusterAssignments = [];\r\n    for (const point of data) {\r\n        let minDistance = Infinity;\r\n        let closestCentroidIndex = -1;\r\n        for (let i = 0; i < centroids.length; i++) {\r\n            const distance = euclideanDistance(point, centroids[i]);\r\n            if (distance < minDistance) {\r\n                minDistance = distance;\r\n                closestCentroidIndex = i;\r\n            }\r\n        }\r\n        clusterAssignments.push(closestCentroidIndex);\r\n    }\r\n    return clusterAssignments;\r\n}\r\n\r\nfunction updateCentroids(data, clusterAssignments, k) {\r\n    const newCentroids = new Array(k).fill(0).map(() => new Array(data[0].length).fill(0));\r\n    const clusterCounts = new Array(k).fill(0);\r\n\r\n    for (let i = 0; i < data.length; i++) {\r\n        const clusterIndex = clusterAssignments[i];\r\n        for (let j = 0; j < data[i].length; j++) {\r\n            newCentroids[clusterIndex][j] += data[i][j];\r\n        }\r\n        clusterCounts[clusterIndex]++;\r\n    }\r\n\r\n    for (let i = 0; i < k; i++) {\r\n        if (clusterCounts[i] !== 0) {\r\n            for (let j = 0; j < newCentroids[i].length; j++) {\r\n                newCentroids[i][j] /= clusterCounts[i];\r\n            }\r\n        } else {\r\n            // If no points were assigned to this cluster, keep the centroid unchanged\r\n        }\r\n    }\r\n\r\n    return newCentroids;\r\n}\r\n\r\nfunction centroidsEqual(centroids1, centroids2) {\r\n    for (let i = 0; i < centroids1.length; i++) {\r\n        for (let j = 0; j < centroids1[i].length; j++) {\r\n            if (centroids1[i][j] !== centroids2[i][j]) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction euclideanDistance(point1, point2) {\r\n    let sum = 0;\r\n    for (let i = 0; i < point1.length; i++) {\r\n        sum += (point1[i] - point2[i]) ** 2;\r\n    }\r\n    return Math.sqrt(sum);\r\n}\r\n\r\nfunction calculateTotalDistance(data, centroids, clusterAssignments) {\r\n    let totalDistance = 0;\r\n    for (let i = 0; i < data.length; i++) {\r\n        totalDistance += euclideanDistance(data[i], centroids[clusterAssignments[i]]);\r\n    }\r\n    return totalDistance;\r\n}\r\n\r\nconst processResult = (result) => {\r\n    const artistsId = new Set();\r\n    const relationships = [];\r\n    const artists = [];\r\n    \r\n    result.records.forEach(record => {\r\n        const relationship = record.get('p');\r\n\r\n        const startData = relationship.start.properties;\r\n        const endData = relationship.end.properties;\r\n        const relationshipData = relationship.segments[0].relationship.properties;\r\n        const relation = new exhibited_with(startData, endData, relationshipData);\r\n        \r\n        relationships.push(relation);\r\n    \r\n        // Check if the artist with the same ID hasn't been created yet\r\n        const artistId = startData.id;\r\n        if (!artistsId.has(artistId)) {\r\n            const artist = new Artist(startData);\r\n            artistsId.add(artistId);\r\n            artists.push(artist);\r\n            // Store the artist object as needed\r\n        }\r\n    \r\n        const otherArtistId = endData.id;\r\n        if (!artistsId.has(otherArtistId)) {\r\n            const otherArtist = new Artist(endData);\r\n            artistsId.add(otherArtistId);\r\n            artists.push(otherArtist);\r\n        }\r\n    });\r\n\r\n    return [artists, relationships];\r\n};\r\n\r\nfunction removeEmptyClusters(clusteredArtists) {\r\n    // Remove empty clusters and reassign IDs\r\n    const nonEmptyClusters = clusteredArtists.filter(cluster => cluster.length > 0);\r\n    const newClusterMap = new Map();\r\n\r\n    nonEmptyClusters.forEach((cluster, newIndex) => {\r\n        cluster.forEach(artist => {\r\n            newClusterMap.set(artist.id, newIndex);\r\n        });\r\n    });\r\n\r\n    const newClusteredArtists = Array.from({ length: nonEmptyClusters.length }, () => []);\r\n\r\n    clusteredArtists.forEach(cluster => {\r\n        cluster.forEach(artist => {\r\n            const newClusterId = newClusterMap.get(artist.id);\r\n            newClusteredArtists[newClusterId].push(artist);\r\n            artist.cluster = newClusterId; // Update the artist's cluster ID\r\n        });\r\n    });\r\n\r\n    return newClusteredArtists;\r\n}\r\n\r\n\r\n\r\nconst findAllNationalityTechniqueAmount = async (minLimit, maxLimit) => {\r\n    const query = `\r\n        MATCH (a:Artist)\r\n        WHERE a.artForms <> [] AND a.country <> '\\\\N' AND a.TotalExhibitedArtworks >= $minLimit AND a.TotalExhibitedArtworks <= $maxLimit\r\n        WITH a\r\n        WITH collect(a) AS selectedArtists\r\n\r\n        UNWIND selectedArtists AS a\r\n        MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\r\n        WHERE b IN selectedArtists\r\n        RETURN p\r\n    `;\r\n    return streamQuery(query, { minLimit: parseInt(minLimit), maxLimit: parseInt(maxLimit) });\r\n};\r\n\r\nconst findAllBirthcountryTechniqueAmount = async (minLimit, maxLimit) => {\r\n    const query = `\r\n        MATCH (a:Artist)\r\n        WHERE a.artForms <> [] AND a.birthCountry <> '\\\\N' AND a.TotalExhibitedArtworks >= $minLimit AND a.TotalExhibitedArtworks <= $maxLimit\r\n        WITH a\r\n        WITH collect(a) AS selectedArtists\r\n\r\n        UNWIND selectedArtists AS a\r\n        MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\r\n        WHERE b IN selectedArtists\r\n        RETURN p\r\n    `;\r\n    return streamQuery(query, { minLimit: parseInt(minLimit), maxLimit: parseInt(maxLimit) });\r\n};\r\n\r\nconst findAllDeathcountryTechniqueAmount = async (minLimit, maxLimit) => {\r\n    const query = `\r\n        MATCH (a:Artist)\r\n        WHERE a.artForms <> [] AND a.deathCountry <> '\\\\N' AND a.TotalExhibitedArtworks >= $minLimit AND a.TotalExhibitedArtworks <= $maxLimit\r\n        WITH a\r\n        WITH collect(a) AS selectedArtists\r\n\r\n        UNWIND selectedArtists AS a\r\n        MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\r\n        WHERE b IN selectedArtists\r\n        RETURN p\r\n    `;\r\n    return streamQuery(query, { minLimit: parseInt(minLimit), maxLimit: parseInt(maxLimit) });\r\n};\r\n\r\nconst findAllMostExhibitedInTechniqueAmount = async (minLimit, maxLimit) => {\r\n    const query = `\r\n        MATCH (a:Artist)\r\n        WHERE a.artForms <> [] AND a.mostExhibitedInCountry <> '\\\\N' AND a.unclearMostExhibitedInCountry = FALSE AND a.TotalExhibitedArtworks >= $minLimit AND a.TotalExhibitedArtworks <= $maxLimit\r\n        WITH a\r\n        WITH collect(a) AS selectedArtists\r\n\r\n        UNWIND selectedArtists AS a\r\n        MATCH p=(a)-[r:EXHIBITED_WITH]-(b)\r\n        WHERE b IN selectedArtists\r\n        RETURN p\r\n    `;\r\n    return streamQuery(query, { minLimit: parseInt(minLimit), maxLimit: parseInt(maxLimit) });\r\n};\r\nconst streamQuery = async (query, params) => {\r\n    const { session } = require('../db');\r\n    return await dbSemaphore.runExclusive(async () => {\r\n        const result = session.run(query, params);\r\n\r\n        const artistsId = new Set();\r\n        const relationships = [];\r\n        const artists = [];\r\n\r\n        await new Promise((resolve, reject) => {\r\n            result.subscribe({\r\n                onNext: record => {\r\n                    const relationship = record.get('p');\r\n\r\n                    const startData = relationship.start.properties;\r\n                    const endData = relationship.end.properties;\r\n                    const relationshipData = relationship.segments[0].relationship.properties;\r\n                    const relation = new exhibited_with(startData, endData, relationshipData);\r\n\r\n                    relationships.push(relation);\r\n\r\n                    const artistId = startData.id;\r\n                    if (!artistsId.has(artistId)) {\r\n                        const artist = new Artist(startData);\r\n                        artistsId.add(artistId);\r\n                        artists.push(artist);\r\n                    }\r\n\r\n                    const otherArtistId = endData.id;\r\n                    if (!artistsId.has(otherArtistId)) {\r\n                        const otherArtist = new Artist(endData);\r\n                        artistsId.add(otherArtistId);\r\n                        artists.push(otherArtist);\r\n                    }\r\n                },\r\n                onCompleted: () => {\r\n                    resolve([artists, relationships]);\r\n                },\r\n                onError: error => {\r\n                    reject(error);\r\n                },\r\n            });\r\n        });\r\n\r\n        return [artists, relationships];\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\nasync function spectralClusteringNationality(min, max, k) {\r\n    try {\r\n        // To only retrieve the artists, when min/max got changed\r\n        if(latestMinLimit!=min || latestMaxLimit!=max  || latestValue !== 'nationality')    {\r\n            const [artists, relationships] = await findAllNationalityTechniqueAmount(min, max);\r\n            latestArtists = artists;\r\n            latestRelationships = relationships;\r\n            latestMinLimit=min;\r\n            latestMaxLimit=max;\r\n            latestValue = 'nationality';\r\n            console.log( latestMinLimit, latestMaxLimit)\r\n        }\r\n        const artistsWithClusters= await spectralClustering(latestArtists, latestRelationships, k);\r\n\r\n        return artistsWithClusters;\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n}\r\nasync function spectralClusteringBirthcountry(min, max, k) {\r\n    try {\r\n        if(latestMinLimit!=min || latestMaxLimit!=max  || latestValue !== 'birthcountry')    {\r\n            const [artists, relationships] = await findAllBirthcountryTechniqueAmount(min, max);\r\n            latestArtists = artists;\r\n            latestRelationships = relationships;\r\n            latestMinLimit=min;\r\n            latestMaxLimit=max;\r\n            latestValue = 'birthcountry';\r\n        }\r\n        const artistsWithClusters= await spectralClustering(latestArtists, latestRelationships, k);\r\n        return artistsWithClusters;\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n}\r\nasync function spectralClusteringDeathcountry(min, max, k) \r\n{\r\n    try {\r\n        if(latestMinLimit!=min || latestMaxLimit!=max  || latestValue !== 'deathcountry')    {\r\n            const [artists, relationships] = await findAllDeathcountryTechniqueAmount(min, max);\r\n            latestArtists = artists;\r\n            latestRelationships = relationships;\r\n            latestMinLimit=min;\r\n            latestMaxLimit=max;\r\n            latestValue = 'deathcountry';\r\n        }\r\n        const artistsWithClusters= await spectralClustering(latestArtists, latestRelationships, k);\r\n        return artistsWithClusters;\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n}\r\nasync function spectralClusteringMostExhibited(min, max, k) {\r\n    try {\r\n        if(latestMinLimit!=min || latestMaxLimit!=max  || latestValue !== 'mostexhibited')    {\r\n            const [artists, relationships] = await findAllMostExhibitedInTechniqueAmount(min, max);\r\n            latestArtists = artists;\r\n            latestRelationships = relationships;\r\n            latestMinLimit=min;\r\n            latestMaxLimit=max;\r\n            latestValue = 'mostexhibited';\r\n        }\r\n        const artistsWithClusters= await spectralClustering(latestArtists, latestRelationships, k);\r\n        return artistsWithClusters;\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nmodule.exports = {\r\n    findAllNationalityTechnique,\r\n    findAllBirthcountryTechnique,\r\n    findAllDeathcountryTechnique,\r\n    findAllMostExhibitedInTechnique,\r\n    findAllTechniques, \r\n    findAllNationalityTechniqueAmount, \r\n    findAllBirthcountryTechniqueAmount,\r\n    findAllDeathcountryTechniqueAmount,\r\n    findAllMostExhibitedInTechniqueAmount,\r\n    spectralClusteringNationality,\r\n    spectralClusteringBirthcountry,\r\n    spectralClusteringDeathcountry,\r\n    spectralClusteringMostExhibited\r\n};"],"mappings":"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","ignoreList":[]}},"mtime":1716726761734}}