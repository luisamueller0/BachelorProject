Zum Updaten von Labels:
^^^^^^^^^^^^^^^^^^^^^^^^
Hier: Techniques von json hinzufügen

CALL apoc.load.json("catalogue_entries_0.json") YIELD value
WITH value.ID AS jsonID, value.Type AS jsonType
LIMIT 2000
MATCH (n:CatalogueEntry)
WHERE n.id = toString(jsonID)
SET n.tech = jsonType



Zum Anzeigen von sharedExhibitions:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Step 1: Collect Exhibition IDs for each artist, potentially limit to relevant artists
MATCH (a:Artist)-[:EXHIBITED]->(e:Exhibition)
WITH a, COLLECT(e.id) AS a_exhibitions
ORDER BY SIZE(a_exhibitions) DESC LIMIT 100 // Limit to top 100 artists based on exhibition count

// Step 2: Repeat collection for all artists, then perform pair comparison
MATCH (b:Artist)-[:EXHIBITED]->(f:Exhibition)
WITH a, a_exhibitions, b, COLLECT(f.id) AS b_exhibitions
WHERE a <> b AND a.id < b.id // Ensure unique pairs and avoid self-comparison

// Step 3: Calculate the intersection of their exhibition lists, use native functions if APOC not available
WITH a, b, [x IN a_exhibitions WHERE x IN b_exhibitions] AS shared_exhibitions
RETURN a.firstname AS Artist1, b.firstname AS Artist2, SIZE(shared_exhibitions) AS SharedExhibitionCount
ORDER BY SharedExhibitionCount DESC
LIMIT 20


Zum Einfügen der Properties in exhibited_with:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

SharedExhibitions:
MATCH (a:Artist)-[:EXHIBITED]->(e:Exhibition)
WITH a, COLLECT(e.id) AS a_exhibitions
ORDER BY SIZE(a_exhibitions) DESC LIMIT 100 
// Step 2: Repeat collection for all artists, then perform pair comparison
MATCH (b:Artist)-[:EXHIBITED]->(f:Exhibition)
WITH a, a_exhibitions, b, COLLECT(f.id) AS b_exhibitions
WHERE a <> b AND a.id < b.id // Ensure unique pairs and avoid self-comparison

// Step 3: Calculate the intersection of their exhibition lists
WITH a, b, [x IN a_exhibitions WHERE x IN b_exhibitions] AS shared_exhibitions

// Step 4: Create or update EXHIBITED_WITH relationships with shared exhibition count for all pairs
FOREACH (ignored IN CASE WHEN SIZE(shared_exhibitions) > 0 THEN [1] ELSE [] END |
  MERGE (a)-[r:EXHIBITED_WITH]->(b)
  SET r.sharedExhibitionCount = SIZE(shared_exhibitions)
)




CALL apoc.periodic.iterate(
  '
  MATCH (a:Artist)-[:EXHIBITED]->(e:Exhibition)
  WITH DISTINCT a
  RETURN a
  ',
  '
  // Repeat collection for all artists, then perform pair comparison
  MATCH (b:Artist)
  WHERE a <> b // Ensure unique pairs and avoid self-comparison
  WITH a, b
  
  // Process exhibitions for each pair of artists
  UNWIND [(a)-->(e:Exhibition)<--(b) | e.id] AS a_exhibition_ids
  UNWIND [(b)-->(e:Exhibition)<--(a) | e.id] AS b_exhibition_ids
  
  // Calculate the intersection of their exhibition lists
  WITH a, b, COLLECT(DISTINCT a_exhibition_ids) AS a_exhibition_ids, COLLECT(DISTINCT b_exhibition_ids) AS b_exhibition_ids
  WHERE a_exhibition_ids <> [] AND b_exhibition_ids <> [] // Ensure non-empty lists
  WITH a, b, a_exhibition_ids, b_exhibition_ids
  
  // Create or update EXHIBITED_WITH relationships with shared exhibition count for all pairs
  FOREACH (ignored IN CASE WHEN SIZE([x IN a_exhibition_ids WHERE x IN b_exhibition_ids]) > 0 THEN [1] ELSE [] END |
    MATCH(a)-[r:EXHIBITED_WITH]->(b)
    SET r.sharedExhibitionCount = SIZE([x IN a_exhibition_ids WHERE x IN b_exhibition_ids])
  )
  ',
  {
    batchSize: 1000,
    parallel: true,
    iterateList: true
  }
)


New idea:
First save amount of exhibited artworks for every artist with every exhibition 
MATCH (a:Artist)-[r:EXHIBITED]->(e:Exhibition)
WITH a, e, count(r) AS times
MERGE (a)-[r_modified:EXHIBITED_MODIFIED]->(e)
SET r_modified.AmountExhibitedArtworks = times

SUM:
MATCH (a1:Artist)-[r1:EXHIBITED_MODIFIED]->(e:Exhibition)<-[r2:EXHIBITED_MODIFIED]-(a2:Artist)
WHERE id(a1) < id(a2)
WITH a1, a2, e, r1.AmountExhibitedArtworks AS a1Amount, r2.AmountExhibitedArtworks AS a2Amount
WITH a1, a2, a1Amount, a2Amount, SUM(a1Amount + a2Amount) AS TotalArtworks,  COLLECT(DISTINCT e) AS sharedExhibitions
RETURN a1.id AS Artist1ID, a2.id AS Artist2ID, TotalArtworks, size(sharedExhibitions), a1Amount, a2Amount
ORDER BY TotalArtworks DESC
LIMIT 100
=> not good idea, very skewed (one artist less active)

MINIMUM:
MATCH (a1:Artist)-[r1:EXHIBITED_MODIFIED]->(e:Exhibition)<-[r2:EXHIBITED_MODIFIED]-(a2:Artist)
WHERE id(a1) < id(a2)
WITH a1, a2, e,
     r1.AmountExhibitedArtworks AS a1Amount,
     r2.AmountExhibitedArtworks AS a2Amount,
     CASE 
         WHEN r1.AmountExhibitedArtworks < r2.AmountExhibitedArtworks THEN r1.AmountExhibitedArtworks
         ELSE r2.AmountExhibitedArtworks
     END AS MinAmountPerExhibition
WITH a1, a2, SUM(MinAmountPerExhibition) AS TotalMinAmount, COLLECT(e) AS SharedExhibitions
// Check for an existing relationship in either direction
MATCH p=(a1)-[r:EXHIBITED_WITH]-(a2)
SET r.sharedExhibitionMinArtworks = TotalMinAmount
=> choose this for now



Counts how often exhibited together but same exhibition multiplied also by how many artworks they exhibited there
MATCH (a1:Artist)
WITH a1 ORDER BY a1.name LIMIT 100
MATCH (a1)-[:EXHIBITED]->(e:Exhibition)<-[:EXHIBITED]-(a2:Artist)
WHERE id(a1) < id(a2)
WITH a1, a2, collect(e) AS sharedExhibitions
RETURN a1.lastname AS Artist1, a2.lastname AS Artist2, size(sharedExhibitions) AS TimesExhibitedTogether
ORDER BY TimesExhibitedTogether DESC
LIMIT 100

Counts how often exhibited at same exhibition ()not including how many artworks
// Match pairs of artists and their shared exhibitions
MATCH (a1:Artist)-[:EXHIBITED]->(e:Exhibition)<-[:EXHIBITED]-(a2:Artist)
WHERE id(a1) < id(a2)
WITH a1, a2, COLLECT(DISTINCT e) AS sharedExhibitions
MERGE (a1)-[r:EXHIBITED_WITH]-(a2)
SET r.sharedExhibitions = SIZE(sharedExhibitions)

Zum Einfügen der Properties in Artist:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Techniquesnd amountTechniques:
MATCH (a:Artist)-[:CREATED]->(b:CatalogueEntry)
WHERE b.technique <> '\\N'
WITH a, COLLECT(b.technique) AS techniques
MERGE (a)
SET a.amountTechniques = SIZE(techniques)
SET a.techniques = techniques

Artforms und amountArtforms:
MATCH (a:Artist)-[:CREATED]->(b:CatalogueEntry)
WHERE b.artForm <> '\\N'
WITH a, COLLECT(b.artForm) AS artForms
SET a.amountArtForms = SIZE(artForms)
SET a.artForms= artForms

Added distinct artforms:
MATCH (a:Artist)-[:CREATED]->(b:CatalogueEntry)
WHERE b.artForm <> '\\N'
WITH a, COLLECT(DISTINCT b.artForm) AS artForms
SET a.distinctArtForms = artForms

Added amount exhibited artworks for each artist:
MATCH (artist:Artist)-[r:EXHIBITED_MODIFIED]->(exhibition:Exhibition)
WITH artist, SUM(r.AmountExhibitedArtworks) AS TotalExhibitedArtworks
SET artist.TotalExhibitedArtworks = TotalExhibitedArtworks

Added birthcountry and deathcountry:
MATCH (a:Artist)
OPTIONAL MATCH (birthGeo:GeoName)
WHERE a.birthplace = birthGeo.place OR a.birthplace = birthGeo.place_alt
WITH a, COLLECT(DISTINCT birthGeo.country) AS birth_countries
OPTIONAL MATCH (deathGeo:GeoName)
WHERE a.deathplace = deathGeo.place OR a.deathplace = deathGeo.place_alt
WITH a, birth_countries, COLLECT(DISTINCT deathGeo.country) AS death_countries
WITH a, birth_countries[0] AS birth_country,
       death_countries[0] AS death_country
Set a.deathCountry = death_country
SET a.birthCountry = birth_country

Added where artist exhibited the most (country):

First: saved for eevry exhibition in their properties (using rel. took place in)in what country it took place:
MATCH p=(e:Exhibition)-[r:TOOK_PLACE_IN]->(h:Host) 
SET e.tookPlaceInCountry=h.country

MATCH (e:Exhibition)-[:TOOK_PLACE_IN]->(h:Host) 
WHERE h.country <> '\\N'  // Exclude hosts with country equal to '\N'
WITH e, COUNT(DISTINCT h) AS numHosts, COLLECT(DISTINCT h.country) AS hostCountries
WHERE numHosts > 1
SET e.tookPlaceInCountry = hostCountries
SET e.numHosts = numHosts

MATCH (a:Artist)-[r:EXHIBITED_MODIFIED]->(b:Exhibition)
WHERE exists(b.tookPlaceInCountry)
WITH a, MAX(r.AmountExhibitedArtworks) AS maxArtworks
MATCH (a)-[r:EXHIBITED_MODIFIED]->(b:Exhibition)
WHERE r.AmountExhibitedArtworks = maxArtworks AND exists(b.tookPlaceInCountry)
SET a.mostExhibitedInCountry = b.tookPlaceInCountry
=> this worked for 6708 artists


LATER:
MATCH (a:Artist)-[r:EXHIBITED_MODIFIED]->(b:Exhibition)
WHERE b.country IS NOT NULL
WITH a, MAX(r.AmountExhibitedArtworks) AS maxArtworks
MATCH (a)-[r:EXHIBITED_MODIFIED]->(b:Exhibition)
WHERE r.AmountExhibitedArtworks = maxArtworks AND b.country IS NOT NULL
SET a.mostExhibitedInCountry = b.country


NOW mostExhibitedInCountry: Getting the sum of exhibited artworks for each country and choosing country with highest amount
Test:
MATCH (a:Artist)-[r:EXHIBITED_MODIFIED]->(b:Exhibition)
WHERE a.lastname = 'Gogh'
WITH b.country AS country, collect(b) AS exhibitions, sum(r.AmountExhibitedArtworks) AS totalExhibitedArtworks
RETURN country, totalExhibitedArtworks

FInal query:
MATCH (a:Artist)-[r:EXHIBITED_MODIFIED]->(b:Exhibition)
WITH a, b.country AS country, sum(r.AmountExhibitedArtworks) AS totalExhibitedArtworks
ORDER BY totalExhibitedArtworks DESC
WITH a, country, totalExhibitedArtworks
ORDER BY totalExhibitedArtworks DESC
WITH a, collect({country: country, total: totalExhibitedArtworks}) AS countryTotals
WITH a, countryTotals[0].country AS topCountry, countryTotals[0].total as topTotal
SET a.mostExhibitedInCountry = topCountry,  a.mostExhibitedInCountryAmount = topTotal
RETURN a.lastname AS artist, a.mostExhibitedInCountry, a.mostExhibitedInCountryAmount



FOR COMMUNITY DETECTION
^^^^^^^^^^^^^^^^^^^^^^
// First, collect the necessary nodes and relationships into lists
MATCH (a:Artist)
WHERE EXISTS(a.artForms) AND a.country <> '\\N'
WITH a
WITH collect(a) AS selectedArtists
UNWIND selectedArtists AS a
MATCH (a)-[r:EXHIBITED_WITH]-(b)
WHERE b IN selectedArtists
WITH collect(a) AS nodes, collect(r) AS rels

// Now, use a Cypher projection to create the in-memory graph
CALL gds.graph.project.cypher(
    'myGraph2',
    'MATCH (n) WHERE n IN $nodes RETURN id(n) AS id',
    'MATCH (n)-[r:EXHIBITED_WITH]->(m) WHERE n IN $nodes AND m IN $nodes RETURN id(n) AS source, id(m) AS target',
    {parameters: {nodes: nodes}}
)YIELD graphName, nodeCount, relationshipCount
RETURN graphName, nodeCount, relationshipCount

SMaller graph:
// First, collect the necessary nodes and relationships into lists
MATCH (a:Artist)
WHERE EXISTS(a.artForms) AND a.country <> '\\N'
WITH a
LIMIT 1000
WITH collect(a) AS selectedArtists
UNWIND selectedArtists AS a
MATCH (a)-[r:EXHIBITED_WITH]-(b)
WHERE b IN selectedArtists
WITH collect(a) AS nodes, collect(r) AS rels

// Now, use a Cypher projection to create the in-memory graph
CALL gds.graph.project.cypher(
    'graph',
    'MATCH (n) WHERE n IN $nodes RETURN id(n) AS id',
    'MATCH (n)-[r:EXHIBITED_WITH]->(m) WHERE n IN $nodes AND m IN $nodes RETURN id(n) AS source, id(m) AS target',
    {parameters: {nodes: nodes}}
)YIELD graphName, nodeCount, relationshipCount
RETURN graphName, nodeCount, relationshipCount


TO calculate average time of an artists exhibitions:
MATCH (a:Artist)-[r:EXHIBITED_MODIFIED]->(e:Exhibition)
WHERE a.id = '1'
WITH date(e.startdate) AS start_date, date(e.enddate) AS end_date
WITH [(start_date.year + start_date.month/12 + start_date.day/365.25), 
      (end_date.year + end_date.month/12 + end_date.day/365.25)] AS dates
UNWIND dates AS date_in_decimal
WITH avg(date_in_decimal) AS avg_date_decimal
WITH toInteger(floor(avg_date_decimal)) AS avg_year,
     toInteger(floor((avg_date_decimal - floor(avg_date_decimal)) * 12)) AS avg_month,
     toInteger(floor((((avg_date_decimal - floor(avg_date_decimal)) * 12) - floor((avg_date_decimal - floor(avg_date_decimal)) * 12)) * 30)) AS avg_day
RETURN date({year: avg_year, month: avg_month + 1, day: avg_day + 1}) AS AverageDate


TO control when an artist cant be calculated if the dates are right:
MATCH p=(a:Artist)-[r:EXHIBITED_MODIFIED]->(e:Exhibition)
WHERE a.id = '23' RETURN e.startdate, e.enddate, e.id, e.organizer
